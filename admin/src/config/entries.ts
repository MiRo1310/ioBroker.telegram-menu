import type { TabValueEntries, TabValues } from '@/types/app';

export const tabValues: TabValues[] = [
    // Danach noch generateActions anpassen in action.js
    {
        label: 'SetState',
        value: 'set',
        trigger: true, // Wenn Trigger true ist wird hierfÃ¼r UsedTrigger gesucht
        entries: [
            { name: 'trigger', val: '', headline: 'trigger', elementGetRows: 'IDs', required: true },
            { name: 'IDs', val: '', headline: 'ID', width: '20%', required: true },
            { name: 'values', val: '', headline: 'value', width: '10%', required: true, btnCircleAdd: true },
            { name: 'returnText', val: '', headline: 'returnText', width: '40%', required: true, btnCircleAdd: true },
            {
                name: 'ack',
                val: 'false',
                headline: 'Ack',
                title: 'setWithAck',
                typeInput: 'checkbox',
                width: '3%',
                required: true,
            },
            {
                name: 'confirm',
                val: 'false',
                headline: 'Con',
                title: 'confirmMessage',
                typeInput: 'checkbox',
                width: '3%',
                required: true,
            },
            {
                name: 'switch_checkbox',
                val: 'false',
                headline: 'Tog',
                title: 'toggle',
                typeInput: 'checkbox',
                width: '3%',
                required: true,
            },
            {
                name: 'parse_mode',
                val: 'false',
                headline: 'Par',
                title: 'parseMode',
                typeInput: 'checkbox',
                width: '3%',
                required: true,
            },
        ],
        popupCard: { buttons: { add: true, remove: true, copy: true }, width: '99%', height: '80vh' },
    },
    {
        label: 'GetState',
        value: 'get',
        trigger: true,
        entries: [
            { name: 'trigger', val: '', headline: 'trigger', width: '20%', elementGetRows: 'IDs', required: true },
            { name: 'IDs', val: '', headline: 'ID', width: '40%', required: true },
            { name: 'text', val: '', headline: 'text', width: '40%', required: true, btnCircleAdd: true },
            {
                name: 'newline_checkbox',
                val: 'true',
                headline: 'New',
                title: 'newlineCheckbox',
                typeInput: 'checkbox',
                width: '3%',
                required: true,
            },
            {
                name: 'parse_mode',
                val: 'false',
                headline: 'Par',
                title: 'Parse Mode HTML',
                typeInput: 'checkbox',
                width: '3%',
                required: true,
            },
        ],
        popupCard: { buttons: { add: true, remove: true, copy: true }, width: '99%', height: '80vh' },
    },

    {
        label: 'Send Picture',
        value: 'pic',
        trigger: true,
        entries: [
            { name: 'trigger', val: '', headline: 'trigger', width: '20%', elementGetRows: 'IDs', required: true },
            { name: 'IDs', val: '', headline: 'ID', width: '40%', required: true },
            { name: 'fileName', val: '', headline: 'filename', width: '40%', required: true },
            { name: 'picSendDelay', val: '', headline: 'delay', width: '40%', type: 'number', required: true },
        ],
        popupCard: { buttons: { add: true, remove: true }, width: '99%', height: '80vh' },
    },
    {
        label: 'Send Location',
        value: 'loc',
        trigger: true,
        entries: [
            { name: 'trigger', val: '', headline: 'trigger', width: '20%', elementGetRows: 'latitude', required: true },
            { name: 'latitude', val: '', headline: 'latitude', width: '20%', search: true, required: true },
            { name: 'longitude', val: '', headline: 'longitude', width: '20%', search: true, required: true },
            {
                name: 'parse_mode',
                val: 'false',
                headline: 'Par',
                title: 'Parse Mode HTML',
                typeInput: 'checkbox',
                width: '3%',
                required: true,
            },
        ],
        popupCard: { buttons: { add: true, remove: true }, width: '99%', height: '80vh' },
    },
    {
        label: 'Events',
        value: 'events',
        trigger: false,
        entries: [
            { name: 'ID', val: '', headline: 'ID', width: '40%', search: true, required: true },
            { name: 'menu', val: '', headline: 'executedMenu', width: '20%', elementGetRows: 'menu', required: true },
            {
                name: 'conditionFilter',
                val: '',
                headline: 'conditionFilter',
                typeInput: 'select',
                width: '20%',
                noIcon: true,
                required: true,
                options: ['=', '!=', '>', '<', '>=', '<='],
            },
            { name: 'condition', val: '', headline: 'conditionMenu', width: '20%', noIcon: true, required: true },
            {
                name: 'ack',
                val: 'false',
                headline: 'Ack',
                title: 'setAck',
                typeInput: 'checkbox',
                width: '3%',
                required: true,
            },
        ],
        popupCard: { buttons: { add: false, remove: false }, width: '99%', height: '40%' },
    },
    {
        label: 'Echarts',
        value: 'echarts',
        searchRoot: { root: 'echarts', type: ['chart'] }, // Search Root for SelectID
        trigger: true,
        entries: [
            { name: 'trigger', val: '', headline: 'trigger', width: '20%', required: true },
            {
                name: 'preset',
                val: '',
                headline: 'preset',
                width: '40%',
                elementGetRows: 'preset',
                search: true,
                required: true,
            },
            { name: 'background', val: '#FFFFFF', headline: 'background', width: '10%', required: true },
            { name: 'theme', val: 'light', headline: 'theme', width: '10%', required: true },
            { name: 'filename', val: 'echarts-temp-photo.jpg', headline: 'filename', width: '20%', required: true },
        ],
        popupCard: { buttons: { add: true, remove: true }, width: '99%', height: '80vh' },
    },
    {
        label: 'Http Request',
        value: 'httpRequest',
        trigger: true,
        entries: [
            { name: 'trigger', val: '', headline: 'trigger', width: '20%', required: true },
            {
                name: 'url',
                val: '',
                headline: 'url',
                width: '20%',
                elementGetRows: 'url',
                search: false,
                required: true,
            },
            { name: 'user', val: '', headline: 'user', width: '20%' },
            { name: 'password', val: '', headline: 'password', password: true, width: '20%' },
            { name: 'filename', val: 'http-request-photo.jpg', headline: 'filename', width: '20%', required: true },
        ],
        popupCard: { buttons: { add: true, remove: true }, width: '99%', height: '80vh' },
    },
];
// Danach noch generateActions anpassen in action.js

export const navEntries: TabValueEntries[] = [
    { name: 'call', val: '', headline: 'trigger', width: 'auto', editWidth: '98%' },
    { name: 'value', val: '', headline: 'navigation', width: 'auto', editWidth: '98%' },
    { name: 'text', val: 'chooseAction', headline: 'text', width: '35%', editWidth: '98%' },
    {
        name: 'parse_mode',
        val: 'false',
        headline: 'Par',
        title: 'Parse Mode HTML',
        typeInput: 'checkbox',
        width: '10%',
    },
];
