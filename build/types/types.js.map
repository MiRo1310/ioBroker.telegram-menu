{
  "version": 3,
  "sources": ["../../src/types/types.ts"],
  "sourcesContent": ["export interface Checkboxes {\n    oneTiKey: boolean;\n    resKey: boolean;\n    checkboxNoValueFound: boolean;\n    sendMenuAfterRestart: boolean;\n}\n\nexport type ListOfMenus = string[];\n\nexport interface IsUserActiveCheckbox {\n    [key: string]: boolean;\n}\n\nexport interface MenusWithUsers {\n    [key: string]: string[];\n}\n\nexport interface UserListWithChatId {\n    chatID: string;\n    name: string;\n}\n\nexport interface Action {\n    [key: string]: Actions;\n}\n\nexport type ActionTypes = Get | Set | Pic | HttpRequest | Echart | Events;\n\nexport interface Actions {\n    get: Get[];\n    set: Set[];\n    pic: Pic[];\n    httpRequest: HttpRequest[];\n    echarts: Echart[];\n    events: Events[];\n}\n\nexport interface HttpRequest {\n    url: string;\n    user: string;\n    password: string;\n    filename: string;\n    trigger: string;\n    delay: string;\n}\n\nexport type NavPart = string[][];\n\nexport interface NavObject {\n    [key: string]: Nav[];\n}\n\nexport interface NavStaticValues {\n    call: string;\n    text: string;\n    parse_mode: BooleanString;\n}\n\nexport interface Set {\n    ack: BooleanString[];\n    confirm: BooleanString[];\n    parse_mode: BooleanString[];\n    switch_checkbox: BooleanString[];\n    IDs: string[];\n    returnText: string[];\n    trigger: string[];\n    values: string[];\n}\n\nexport interface Get {\n    newline_checkbox: BooleanString[];\n    parse_mode: BooleanString[];\n    IDs: string[];\n    text: string[];\n    trigger: string[];\n}\n\nexport interface Events {\n    ack: BooleanString;\n    ID: string;\n    menu: string;\n    condition: string;\n    trigger: string[];\n}\n\nexport interface Pic {\n    IDs: string[];\n    filename: string[];\n    trigger: string[];\n    picSendDelay: string[];\n}\n\nexport interface Echart {\n    background: string[];\n    echartsInstance: string[];\n    filename: string;\n    preset: string;\n    theme: string[];\n    trigger: string[];\n}\n\nexport interface StartSides {\n    [key: string]: string;\n}\n\nexport interface NewObjectNavStructure {\n    [key: string]: Part;\n}\n\nexport interface Nav extends NavStaticValues {\n    nav: string;\n    value: string;\n}\n\nexport interface MenuData {\n    [key: string]: MenuDataNav | AllMenusWithData;\n    data: AllMenusWithData;\n}\n\ninterface MenuDataNav {\n    nav: string[];\n}\n\nexport interface AllMenusWithData {\n    [key: string]: NewObjectNavStructure | DataObject;\n}\n\nexport interface DataObject {\n    action: Action;\n    nav: NavObject;\n    [key: string]: Nav | Action | NavObject;\n}\n\nexport interface GeneratedActions {\n    obj: NewObjectNavStructure;\n    ids: string[];\n}\n\nexport interface UserObjectActions {\n    [key: string]: {\n        nav?: string[][];\n        parse_mode?: BooleanString;\n        text?: string;\n        switch?: Switch[];\n        echarts?: { background: string; echartsInstance: string; filename: string; preset: string; theme: string }[];\n    };\n}\n\nexport interface Part {\n    text?: string;\n    nav?: any;\n    parse_mode?: BooleanString;\n    getData?: GetData[];\n    switch?: Switch[];\n    sendPic?: SendPic[];\n    location?: Location[];\n    echarts?: Echart[];\n    httpRequest?: HttpRequest[];\n    url?: string;\n    user?: string;\n    password?: string;\n    filename?: string;\n}\n\nexport interface SendPic {\n    // TODO: Define the type for SendPic\n\n    delay: number;\n    id: string;\n    fileName: string;\n}\n\nexport interface GetData {\n    id: string;\n    text: string;\n    parse_mode: BooleanString;\n    newline: BooleanString;\n}\n\nexport type BooleanString = 'false' | 'true';\nexport type ParseModeType = 'HTML' | 'Markdown';\nexport type Location = any;\n\nexport interface SetDynamicValueObj {\n    [key: string]: SetDynamicValue;\n}\n\nexport interface SetDynamicValue {\n    id: string;\n    ack: boolean;\n    returnText: string;\n    userToSend: string;\n    parse_mode: BooleanString;\n    confirm: string;\n    telegramInstance: string;\n    one_time_keyboard: boolean;\n    resize_keyboard: boolean;\n    userListWithChatID: UserListWithChatId[];\n    valueType: string;\n}\n\nexport interface DecomposeText {\n    startindex: number;\n    endindex: number;\n    substring: string;\n    textWithoutSubstring: string;\n}\n\nexport type Newline = 'true' | 'false';\n\nexport interface BindingObject {\n    values: { [key: string]: string };\n}\n\nexport interface EditArrayButtons extends NavStaticValues {\n    value: string;\n}\n\nexport interface GeneratedNavMenu extends NavStaticValues {\n    nav: string[] | string[][];\n}\n\nexport interface Switch {\n    id: string;\n    value: string;\n    toggle: boolean;\n    confirm: BooleanString;\n    returnText: string;\n    parse_mode: BooleanString;\n    ack: BooleanString;\n}\n\nexport interface GenerateActionsArrayOfEntries {\n    objName: string;\n    name: string;\n    loop: string;\n    elements: GenerateActionsArrayOfElements[];\n}\n\nexport interface GenerateActionsArrayOfElements {\n    name: string;\n    value?: string;\n    key?: number;\n    type?: string;\n}\n\nexport interface GenerateActionsNewObject {\n    preset?: string;\n    echartsInstance?: string;\n    background?: string;\n    theme?: string;\n    url?: string;\n    user?: string;\n    password?: string;\n    id?: string;\n    filename?: string;\n    delay?: string;\n    text?: string;\n    newline?: BooleanString;\n    parse_mode?: BooleanString;\n}\n\nexport interface UserInGroup {\n    [key: string]: string[];\n}\n\nexport type SplittedData = string[];\n\nexport interface SetStateIds {\n    id: string;\n    confirm: BooleanString | boolean;\n    returnText: string;\n    userToSend: string;\n    parse_mode?: BooleanString;\n}\n\nexport interface Timeouts {\n    key: string;\n    timeout: ioBroker.Timeout;\n}\n\nexport type GroupWithUser = string;\n\nexport interface Message {\n    time: number;\n}\n\nexport type WhatShouldDelete = 'all' | 'last';\n\nexport interface Keyboard {\n    inline_keyboard: KeyboardItems[][];\n}\n\nexport interface KeyboardItems {\n    text: string;\n    callback_data: string;\n}\n\nexport interface LastText {\n    [key: string]: string;\n}\n\nexport interface ValArray {\n    [key: string]: string;\n}\n\nexport interface KeyboardItem {\n    text: string;\n    callback_data: string;\n}\n\nexport interface BackMenu {\n    [key: string]: BackMenuList;\n}\n\n// TODO : Define the type for BackMenuList\ntype BackMenuList = any;\n\nexport interface CheckEveryMenuForDataType {\n    menuData: MenuData; // checked !!!!\n    calledValue: string;\n    userToSend: string;\n    instanceTelegram: string;\n    resize_keyboard: boolean;\n    one_time_keyboard: boolean;\n    userListWithChatID: UserListWithChatId[];\n    menus: string[];\n    isUserActiveCheckbox: IsUserActiveCheckbox;\n    token: string;\n    directoryPicture: string;\n    timeoutKey: string;\n}\n\nexport interface ProcessDataType {\n    menuData: MenuData;\n    calledValue: string;\n    userToSend: string;\n    groupWithUser: GroupWithUser;\n    instanceTelegram: string;\n    resize_keyboard: boolean;\n    one_time_keyboard: boolean;\n    userListWithChatID: UserListWithChatId[];\n    allMenusWithData: AllMenusWithData;\n    menus: string[];\n    isUserActiveCheckbox: IsUserActiveCheckbox;\n    token: string;\n    directoryPicture: string;\n    timeoutKey: string;\n    groupData: NewObjectNavStructure;\n}\n\nexport interface SetValueForSubmenuNumber extends GlobalTelegramValues {\n    callbackData: string;\n    calledValue: string;\n    userListWithChatID: UserListWithChatId[];\n    part: Part;\n}\n\nexport interface BackMenuType extends GlobalTelegramValues {\n    allMenusWithData: AllMenusWithData;\n    menus: string[];\n    userListWithChatID: UserListWithChatId[];\n}\n\nexport interface SetValueForSubmenuPercent extends GlobalTelegramValues {\n    callbackData: string;\n    calledValue: string;\n    userListWithChatID: UserListWithChatId[];\n    part: Part;\n    allMenusWithData: { [key: string]: NewObjectNavStructure };\n    menus: string[];\n}\n\nexport interface GlobalTelegramValues {\n    instanceTelegram: string;\n    resize_keyboard: boolean;\n    one_time_keyboard: boolean;\n    userToSend: string;\n}\n\nexport interface SetFirstMenuValue extends GlobalTelegramValues {\n    part: Part;\n    userListWithChatID: UserListWithChatId[];\n}\n\nexport interface SetSecondMenuValue extends GlobalTelegramValues {\n    part: Part;\n    userListWithChatID: UserListWithChatId[];\n}\n\nexport interface CreateMenu {\n    callbackData: string;\n    device2Switch: string;\n    text?: string;\n}\n\nexport interface SetDynamicValueType extends GlobalTelegramValues {\n    val: string;\n    part: Part;\n    userListWithChatID: UserListWithChatId[];\n}\n\nexport interface DeleteMessageIds {\n    userToSend: string;\n    userListWithChatID: UserListWithChatId[];\n    instanceTelegram: string;\n    device2Switch: string;\n    callbackData: string;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
