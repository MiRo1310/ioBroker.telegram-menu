{
  "version": 3,
  "sources": ["../../src/types/types.ts"],
  "sourcesContent": ["import type { MockAdapter } from '@iobroker/testing';\nimport type TelegramMenu from '../main';\n\nexport type ListOfMenus = string[];\n\nexport type IsUserActiveCheckbox = Record<string, boolean>;\nexport type MenusWithUsers = Record<string, string[]>;\n\nexport type Action = Record<string, Actions>;\n\nexport type Navigation = string[][];\n\nexport type ActionTypes = Get | Set | Pic | HttpRequest | Echart | Events;\n\nexport interface UserListWithChatId {\n    chatID: string;\n    name: string;\n}\n\nexport interface Checkboxes {\n    oneTiKey: boolean;\n    resKey: boolean;\n    checkboxNoValueFound: boolean;\n    sendMenuAfterRestart: boolean;\n}\n\nexport interface Actions {\n    get: Get[];\n    set: Set[];\n    pic: Pic[];\n    httpRequest: HttpRequest[];\n    echarts: Echart[];\n    events: Events[];\n}\n\nexport interface HttpRequest {\n    url: string;\n    user: string;\n    password: string;\n    filename: string;\n    trigger: string;\n    delay: string;\n}\n\nexport interface Set {\n    ack: BooleanString[];\n    confirm: BooleanString[];\n    parse_mode: boolean[];\n    switch_checkbox: BooleanString[];\n    IDs: string[];\n    returnText: string[];\n    trigger: string[];\n    values: string[];\n}\n\nexport interface Get {\n    newline_checkbox: BooleanString[];\n    parse_mode: boolean[];\n    IDs: string[];\n    text: string[];\n    trigger: string[];\n}\n\nexport interface Events {\n    ack: BooleanString;\n    ID: string;\n    menu: string;\n    condition: string;\n    trigger: string[];\n}\n\nexport interface Pic {\n    IDs: string[];\n    filename: string[];\n    trigger: string[];\n    picSendDelay: string[];\n}\n\nexport interface Echart {\n    background: string[];\n    echartsInstance: string[];\n    filename: string;\n    preset: string;\n    theme: string[];\n    trigger: string[];\n}\n\nexport type StartSides = Record<string, string>;\n\nexport type NewObjectStructure = Record<string, Part>;\n\n// export interface MenuData {\n//     data: AllMenusWithData;\n// }\n\nexport type MenuData = Record<string, NewObjectStructure>;\n\nexport interface DataObject {\n    action: Record<string, Actions>;\n    nav: Record<string, NavigationRow[]>;\n}\n\nexport interface UserObjectActions {\n    [key: string]: {\n        nav?: string[][];\n        parse_mode?: boolean;\n        text?: string;\n        switch?: Switch[];\n        echarts?: { background: string; echartsInstance: string; filename: string; preset: string; theme: string }[];\n    };\n}\n\nexport interface Part {\n    text?: string;\n    nav?: Navigation;\n    parse_mode?: boolean;\n    getData?: GetData[];\n    switch?: Switch[];\n    sendPic?: SendPic[];\n    location?: Location[];\n    echarts?: Echart[];\n    httpRequest?: HttpRequest[];\n    url?: string;\n    user?: string;\n    password?: string;\n    filename?: string;\n}\n\nexport interface SendPic {\n    // TODO: Define the type for SendPic\n\n    delay: number;\n    id: string;\n    fileName: string;\n}\n\nexport interface GetData {\n    id: string;\n    text: string;\n    parse_mode: boolean;\n    newline: BooleanString;\n}\n\nexport type BooleanString = 'false' | 'true';\nexport type ParseModeType = 'HTML' | 'Markdown';\n\nexport interface Location {\n    latitude: string;\n    longitude: string;\n}\n\nexport interface SetDynamicValueObj {\n    [key: string]: SetDynamicValue;\n}\n\nexport interface SetDynamicValue {\n    id: string;\n    ack: boolean;\n    returnText: string;\n    userToSend: string;\n    parse_mode: boolean;\n    confirm: string;\n    telegramInstance: string;\n    one_time_keyboard: boolean;\n    resize_keyboard: boolean;\n    userListWithChatID: UserListWithChatId[];\n    valueType: string;\n}\n\nexport type Newline = 'true' | 'false';\n\nexport interface BindingObject {\n    values: Record<string, string>;\n}\n\nexport interface NavigationRow {\n    value: string;\n    call: string;\n    text: string;\n    parse_mode: string;\n}\n\nexport interface splittedNavigation {\n    nav: string[][];\n    call: string;\n    text: string;\n    parse_mode: boolean;\n}\n\nexport interface Switch {\n    id: string;\n    value: string;\n    toggle: boolean;\n    confirm: BooleanString;\n    returnText: string;\n    parse_mode: boolean;\n    ack: BooleanString;\n}\n\nexport interface GenerateActionsArrayOfEntries {\n    objName: string;\n    name: string;\n    loop: string;\n    elements: GenerateActionsArrayOfElements[];\n}\n\nexport interface GenerateActionsArrayOfElements {\n    name: string;\n    value?: string;\n    key?: number;\n    type?: string;\n}\n\nexport interface GenerateActionsNewObject {\n    preset?: string;\n    echartsInstance?: string;\n    background?: string;\n    theme?: string;\n    url?: string;\n    user?: string;\n    password?: string;\n    id?: string;\n    filename?: string;\n    delay?: string;\n    text?: string;\n    newline?: BooleanString;\n    parse_mode?: boolean;\n}\n\nexport type UserInGroup = Record<string, string>;\n\nexport type SplittedData = string[];\n\nexport interface SetStateIds {\n    id: string;\n    confirm: BooleanString | boolean;\n    returnText: string;\n    userToSend: string;\n    parse_mode?: boolean;\n}\n\nexport type GroupWithUser = string;\n\nexport interface Message {\n    time: number;\n}\n\nexport type WhatShouldDelete = 'all' | 'last';\n\nexport type Keyboard = { inline_keyboard: KeyboardItems[][] } | string[][] | undefined;\n\nexport interface KeyboardItems {\n    text: string;\n    callback_data: string;\n}\n\nexport type LastText = Record<string, string>;\n\nexport type ValArray = Record<string, string>;\n\nexport interface KeyboardItem {\n    text: string;\n    callback_data: string;\n}\n\nexport type BackMenu = Record<string, BackMenuList>;\n\n// TODO : Define the type for BackMenuList\ntype BackMenuList = any;\n\nexport interface CheckEveryMenuForDataType extends TelegramParams {\n    menuData: MenuData; // checked !!!!\n    calledValue: string;\n    userListWithChatID: UserListWithChatId[];\n    menus: string[];\n    isUserActiveCheckbox: IsUserActiveCheckbox;\n    token: string;\n    directoryPicture: string;\n    timeoutKey: string;\n}\n\nexport interface ProcessDataType extends TelegramParams {\n    menuData: MenuData;\n    calledValue: string;\n    groupWithUser: GroupWithUser;\n    userListWithChatID: UserListWithChatId[];\n    allMenusWithData: MenuData;\n    menus: string[];\n    isUserActiveCheckbox: IsUserActiveCheckbox;\n    token: string;\n    directoryPicture: string;\n    timeoutKey: string;\n    groupData: NewObjectStructure;\n}\n\nexport interface SetValueForSubmenuNumber extends TelegramParams {\n    callbackData: string;\n    calledValue: string;\n    userListWithChatID: UserListWithChatId[];\n    part: Part;\n}\n\nexport interface BackMenuType extends TelegramParams {\n    allMenusWithData: MenuData;\n    menus: string[];\n    userListWithChatID: UserListWithChatId[];\n}\n\nexport interface SetValueForSubmenuPercent extends TelegramParams {\n    callbackData: string;\n    calledValue: string;\n    userListWithChatID: UserListWithChatId[];\n    part: Part;\n    allMenusWithData: { [key: string]: NewObjectStructure };\n    menus: string[];\n}\n\nexport interface TelegramParams {\n    instanceTelegram: string;\n    resize_keyboard: boolean;\n    one_time_keyboard: boolean;\n    userToSend: string;\n}\n\nexport interface SetFirstMenuValue extends TelegramParams {\n    part: Part;\n    userListWithChatID: UserListWithChatId[];\n}\n\nexport interface SetSecondMenuValue extends TelegramParams {\n    part: Part;\n    userListWithChatID: UserListWithChatId[];\n}\n\nexport interface CreateMenu {\n    callbackData: string;\n    device2Switch: string;\n    text?: string;\n}\n\nexport interface SetDynamicValueType extends TelegramParams {\n    val: string;\n    part: Part;\n    userListWithChatID: UserListWithChatId[];\n}\n\nexport interface DeleteMessageIds {\n    userToSend: string;\n    userListWithChatID: UserListWithChatId[];\n    instanceTelegram: string;\n    device2Switch: string;\n    callbackData: string;\n}\n\nexport interface ExchangeValueReturn {\n    newValue: string | number | boolean;\n    textToSend: string;\n    error: boolean;\n}\n\nexport type PrimitiveType = string | number | boolean;\nexport type PrimitiveNullableType = string | number | boolean | null | undefined;\n\nexport type Adapter = MockAdapter | TelegramMenu;\n\nexport interface Timeouts {\n    key: string;\n    timeout: ioBroker.Timeout;\n}\n\nexport interface StringReplacerObj {\n    val: string;\n    newValue: string;\n}\n\nexport interface DecomposeTextReturnType {\n    startindex: number;\n    endindex: number;\n    substring: string;\n    textExcludeSubstring: string;\n    substringExcludeSearch: string;\n}\n\nexport interface EvaluateReturnType {\n    val: any;\n    error: boolean;\n}\n\nexport interface Telegram extends TelegramParams {\n    textToSend?: string;\n    keyboard?: Keyboard;\n    userListWithChatID: UserListWithChatId[];\n    parse_mode?: boolean;\n}\n\nexport interface ExtractTimeValues {\n    milliseconds: number;\n    seconds: number;\n    minutes: number;\n    hours: number;\n    day: number;\n    month: number;\n    year: number;\n}\n\nexport interface GetTimeWithPad {\n    ms: string;\n    s: string;\n    m: string;\n    h: string;\n    d: string;\n    mo: string;\n    y: string;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
