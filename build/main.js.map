{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["\"use strict\";\r\n/*\r\n * Created with @iobroker/create-adapter v2.3.0\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nrequire(\"module-alias/register\");\r\nimport * as utils from \"@iobroker/adapter-core\";\r\n\r\nimport {\r\n\tgenerateActions,\r\n\tgenerateNewObjectStructure,\r\n\teditArrayButtons,\r\n\tgetUserToSendFromUserListWithChatID,\r\n\tgetMenusWithUserToSend,\r\n} from \"./lib/action\";\r\nimport { _subscribeForeignStatesAsync } from \"./lib/subscribeStates\";\r\nimport { sendToTelegram } from \"./lib/telegram\";\r\nimport { decomposeText, changeValue } from \"./lib/utilities\";\r\nimport { createState } from \"./lib/createState\";\r\nimport { saveMessageIds } from \"./lib/messageIds\";\r\nimport { adapterStartMenuSend } from \"./lib/adapterStartMenuSend\";\r\nimport { getStateIdsToListenTo, checkEveryMenuForData, getTimeouts } from \"./lib/processData\";\r\nimport { shoppingListSubscribeStateAndDeleteItem, deleteMessageAndSendNewShoppingList } from \"./lib/shoppingList\";\r\nimport { exchangePlaceholderWithValue, checkEvent } from \"./lib/action\";\r\nimport { debug, error } from \"./lib/logging\";\r\nimport { checkIsTelegramActive } from \"./lib/connection\";\r\n\r\nconst timeoutKey: string = \"0\";\r\nlet subscribeForeignStateIds: string[];\r\n\r\nexport default class TelegramMenu extends utils.Adapter {\r\n\tprivate static instance: TelegramMenu;\r\n\t/**\r\n\t * @param {Partial<utils.AdapterOptions>} [options={}]\r\n\t */\r\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n\t\tsuper({\r\n\t\t\t...options,\r\n\t\t\tname: \"telegram-menu\",\r\n\t\t});\r\n\t\tthis.on(\"ready\", this.onReady.bind(this));\r\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\r\n\t\tTelegramMenu.instance = this;\r\n\t}\r\n\tpublic static getInstance(): TelegramMenu {\r\n\t\treturn TelegramMenu.instance;\r\n\t}\r\n\tprivate async onReady(): Promise<void> {\r\n\t\tthis.setState(\"info.connection\", false, true);\r\n\t\tcreateState(this);\r\n\r\n\t\tlet instanceTelegram: string = this.config.instance;\r\n\t\tif (!instanceTelegram || instanceTelegram.length == 0) {\r\n\t\t\tinstanceTelegram = \"telegram.0\";\r\n\t\t}\r\n\t\tconst telegramID = `${instanceTelegram}.communicate.request`;\r\n\t\tconst botSendMessageID = `${instanceTelegram}.communicate.botSendMessageId`;\r\n\t\tconst requestMessageID = `${instanceTelegram}.communicate.requestMessageId`;\r\n\t\tconst infoConnectionOfTelegram = `${instanceTelegram}.info.connection`;\r\n\r\n\t\tconst checkboxes: Checkboxes = this.config.checkbox as Checkboxes;\r\n\t\tconst one_time_keyboard: boolean = checkboxes[\"oneTiKey\"];\r\n\t\tconst resize_keyboard: boolean = checkboxes[\"resKey\"];\r\n\t\tconst checkboxNoEntryFound: boolean = checkboxes[\"checkboxNoValueFound\"];\r\n\t\tconst sendMenuAfterRestart: boolean = checkboxes[\"sendMenuAfterRestart\"];\r\n\t\tlet listOfMenus: ListOfMenus = [];\r\n\t\tif (this.config.usersInGroup) {\r\n\t\t\tlistOfMenus = Object.keys(this.config.usersInGroup);\r\n\t\t}\r\n\t\tconst token = this.config.tokenGrafana;\r\n\t\tconst directoryPicture: string = this.config.directory;\r\n\t\tconst isUserActiveCheckbox: IsUserActiveCheckbox = this.config.userActiveCheckbox;\r\n\t\tconst menusWithUsers: MenusWithUsers = this.config.usersInGroup;\r\n\t\tconst textNoEntryFound: string = this.config.textNoEntry;\r\n\t\tconst userListWithChatID: UserListWithChatId[] = this.config.userListWithChatID;\r\n\t\tconst dataObject: DataObject = this.config.data as DataObject;\r\n\t\tconst startSides: StartSides = {};\r\n\r\n\t\tconst menuData: MenuData = {\r\n\t\t\tdata: {},\r\n\t\t} as MenuData;\r\n\r\n\t\tObject.keys(menusWithUsers).forEach((element) => {\r\n\t\t\tstartSides[element] = dataObject.nav[element][0][\"call\"];\r\n\t\t});\r\n\r\n\t\tthis.getForeignObject(infoConnectionOfTelegram, async (err, obj) => {\r\n\t\t\ttry {\r\n\t\t\t\tif (err || obj == null) {\r\n\t\t\t\t\tthis.log.error(`The State ${infoConnectionOfTelegram} was not found! ` + err);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet isTelegramActive = await checkIsTelegramActive(infoConnectionOfTelegram);\r\n\t\t\t\tconst nav = dataObject[\"nav\"];\r\n\t\t\t\tconst action = dataObject[\"action\"];\r\n\r\n\t\t\t\tthis.log.info(\"Telegram was found\");\r\n\r\n\t\t\t\tfor (const name in nav) {\r\n\t\t\t\t\tconst value = await editArrayButtons(nav[name], this);\r\n\r\n\t\t\t\t\tconst newObjectStructure = await generateNewObjectStructure(value);\r\n\t\t\t\t\tif (newObjectStructure) {\r\n\t\t\t\t\t\tmenuData.data[name] = newObjectStructure;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst generatedActions: GeneratedActions | undefined = generateActions(action[name], menuData.data[name]);\r\n\t\t\t\t\tif (generatedActions) {\r\n\t\t\t\t\t\tmenuData.data[name] = generatedActions?.obj;\r\n\t\t\t\t\t\tsubscribeForeignStateIds = generatedActions?.ids;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tdebug([{ text: \"No Actions generated!\" }]);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (subscribeForeignStateIds && subscribeForeignStateIds?.length > 0) {\r\n\t\t\t\t\t\t_subscribeForeignStatesAsync(subscribeForeignStateIds);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tdebug([{ text: \"Nothing to Subscribe!\" }]);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Subscribe Events\r\n\t\t\t\t\tif (dataObject[\"action\"][name] && dataObject[\"action\"][name].events) {\r\n\t\t\t\t\t\tdataObject[\"action\"][name].events.forEach((event: { ID: any }) => {\r\n\t\t\t\t\t\t\t_subscribeForeignStatesAsync([event.ID]);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdebug([\r\n\t\t\t\t\t\t{ text: \"Menu: \", val: name },\r\n\t\t\t\t\t\t{ text: \"Array Buttons: \", val: value },\r\n\t\t\t\t\t\t{ text: \"Gen. Actions: \", val: menuData.data[name] },\r\n\t\t\t\t\t]);\r\n\t\t\t\t}\r\n\t\t\t\tdebug([\r\n\t\t\t\t\t{ text: \"Checkbox\", val: checkboxes },\r\n\t\t\t\t\t{ text: \"MenuList\", val: listOfMenus },\r\n\t\t\t\t]);\r\n\r\n\t\t\t\tif (sendMenuAfterRestart) {\r\n\t\t\t\t\tadapterStartMenuSend(\r\n\t\t\t\t\t\tlistOfMenus,\r\n\t\t\t\t\t\tstartSides,\r\n\t\t\t\t\t\tisUserActiveCheckbox,\r\n\t\t\t\t\t\tmenusWithUsers,\r\n\t\t\t\t\t\tmenuData,\r\n\t\t\t\t\t\tuserListWithChatID,\r\n\t\t\t\t\t\tinstanceTelegram,\r\n\t\t\t\t\t\tresize_keyboard,\r\n\t\t\t\t\t\tone_time_keyboard,\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.on(\"stateChange\", async (id, state) => {\r\n\t\t\t\t\tlet userToSend: string | null = null;\r\n\t\t\t\t\tconst setStateIdsToListenTo: SetStateIds[] = getStateIdsToListenTo();\r\n\r\n\t\t\t\t\tif (id === infoConnectionOfTelegram) {\r\n\t\t\t\t\t\tisTelegramActive = await checkIsTelegramActive(infoConnectionOfTelegram);\r\n\t\t\t\t\t\tif (!isTelegramActive) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (id == `${instanceTelegram}.communicate.requestChatId` || !userToSend) {\r\n\t\t\t\t\t\tconst chatID = await this.getForeignStateAsync(`${instanceTelegram}.communicate.requestChatId`);\r\n\t\t\t\t\t\tuserToSend = getUserToSendFromUserListWithChatID(userListWithChatID, chatID);\r\n\r\n\t\t\t\t\t\tchatID ? debug([{ text: \"ChatID found\" }]) : debug([{ text: \"ChatID not found\" }]);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (state && typeof state.val == \"string\" && state.val.includes(\"sList:\")) {\r\n\t\t\t\t\t\tshoppingListSubscribeStateAndDeleteItem(state.val, instanceTelegram, userListWithChatID, resize_keyboard, one_time_keyboard);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (id.includes(\"alexa-shoppinglist\") && !id.includes(\"add_position\") && userToSend) {\r\n\t\t\t\t\t\tawait deleteMessageAndSendNewShoppingList(instanceTelegram, userListWithChatID, userToSend);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tstate &&\r\n\t\t\t\t\t\tcheckEvent(\r\n\t\t\t\t\t\t\tdataObject,\r\n\t\t\t\t\t\t\tid,\r\n\t\t\t\t\t\t\tstate,\r\n\t\t\t\t\t\t\tmenuData,\r\n\t\t\t\t\t\t\tuserListWithChatID,\r\n\t\t\t\t\t\t\tinstanceTelegram,\r\n\t\t\t\t\t\t\tresize_keyboard,\r\n\t\t\t\t\t\t\tone_time_keyboard,\r\n\t\t\t\t\t\t\tmenusWithUsers,\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ((id == botSendMessageID || id == requestMessageID) && state) {\r\n\t\t\t\t\t\tawait saveMessageIds(state, instanceTelegram);\r\n\t\t\t\t\t} else if (state && typeof state.val === \"string\" && state.val != \"\" && id == telegramID && state?.ack && userToSend) {\r\n\t\t\t\t\t\tconst value = state.val;\r\n\t\t\t\t\t\tconst calledValue = value.slice(value.indexOf(\"]\") + 1, value.length);\r\n\t\t\t\t\t\tconst menus: NewObjectNavStructureKey[] = getMenusWithUserToSend(menusWithUsers, userToSend);\r\n\r\n\t\t\t\t\t\tconst dataFound = await checkEveryMenuForData({\r\n\t\t\t\t\t\t\tmenuData,\r\n\t\t\t\t\t\t\tcalledValue,\r\n\t\t\t\t\t\t\tuserToSend,\r\n\t\t\t\t\t\t\tinstanceTelegram,\r\n\t\t\t\t\t\t\tresize_keyboard,\r\n\t\t\t\t\t\t\tone_time_keyboard,\r\n\t\t\t\t\t\t\tuserListWithChatID,\r\n\t\t\t\t\t\t\tmenus,\r\n\t\t\t\t\t\t\tisUserActiveCheckbox,\r\n\t\t\t\t\t\t\ttoken,\r\n\t\t\t\t\t\t\tdirectoryPicture,\r\n\t\t\t\t\t\t\ttimeoutKey,\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tdebug([\r\n\t\t\t\t\t\t\t{ text: \"Groups with searched User:\", val: menus },\r\n\t\t\t\t\t\t\t{ text: \"Data found:\", val: dataFound },\r\n\t\t\t\t\t\t]);\r\n\r\n\t\t\t\t\t\tif (!dataFound && checkboxNoEntryFound && userToSend) {\r\n\t\t\t\t\t\t\tdebug([{ text: \"No Entry found\" }]);\r\n\t\t\t\t\t\t\tsendToTelegram(\r\n\t\t\t\t\t\t\t\tuserToSend,\r\n\t\t\t\t\t\t\t\ttextNoEntryFound,\r\n\t\t\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\t\t\tinstanceTelegram,\r\n\t\t\t\t\t\t\t\tresize_keyboard,\r\n\t\t\t\t\t\t\t\tone_time_keyboard,\r\n\t\t\t\t\t\t\t\tuserListWithChatID,\r\n\t\t\t\t\t\t\t\t\"\",\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (state && setStateIdsToListenTo && setStateIdsToListenTo.find((element: { id: string }) => element.id == id)) {\r\n\t\t\t\t\t\tdebug([{ text: \"State, which is listen to was changed:\", val: id }]);\r\n\r\n\t\t\t\t\t\tsetStateIdsToListenTo.forEach((element, key: number) => {\r\n\t\t\t\t\t\t\tif (element.id == id) {\r\n\t\t\t\t\t\t\t\tdebug([{ text: \"Send Value:\", val: element }]);\r\n\r\n\t\t\t\t\t\t\t\tif (element.confirm != \"false\" && !state?.ack && element.returnText.includes(\"{confirmSet:\")) {\r\n\t\t\t\t\t\t\t\t\tconst substring = decomposeText(element.returnText, \"{confirmSet:\", \"}\").substring.split(\":\");\r\n\t\t\t\t\t\t\t\t\tlet text: string = \"\";\r\n\t\t\t\t\t\t\t\t\tif (state.val) {\r\n\t\t\t\t\t\t\t\t\t\ttext =\r\n\t\t\t\t\t\t\t\t\t\t\tsubstring[2] && substring[2].includes(\"noValue\")\r\n\t\t\t\t\t\t\t\t\t\t\t\t? substring[1]\r\n\t\t\t\t\t\t\t\t\t\t\t\t: exchangePlaceholderWithValue(substring[1], state.val as string);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tsendToTelegram(\r\n\t\t\t\t\t\t\t\t\t\telement.userToSend,\r\n\t\t\t\t\t\t\t\t\t\ttext,\r\n\t\t\t\t\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\t\t\t\t\tinstanceTelegram,\r\n\t\t\t\t\t\t\t\t\t\tresize_keyboard,\r\n\t\t\t\t\t\t\t\t\t\tone_time_keyboard,\r\n\t\t\t\t\t\t\t\t\t\tuserListWithChatID,\r\n\t\t\t\t\t\t\t\t\t\telement.parse_mode as BooleanString,\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t} else if (element.confirm != \"false\" && state?.ack) {\r\n\t\t\t\t\t\t\t\t\tdebug([{ text: \"User:\", val: element.userToSend }]);\r\n\t\t\t\t\t\t\t\t\tlet textToSend = element.returnText;\r\n\r\n\t\t\t\t\t\t\t\t\tif (textToSend.includes(\"{confirmSet:\")) {\r\n\t\t\t\t\t\t\t\t\t\tconst substring = decomposeText(textToSend, \"{confirmSet:\", \"}\").substring;\r\n\t\t\t\t\t\t\t\t\t\ttextToSend = textToSend.replace(substring, \"\");\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t// Wenn eine R\u00FCckgabe des Value an den User nicht gew\u00FCnscht ist soll value durch einen leeren String ersetzt werden\r\n\t\t\t\t\t\t\t\t\tlet value: string | number = \"\";\r\n\t\t\t\t\t\t\t\t\t// Change set value in another Value, like true => on, false => off\r\n\t\t\t\t\t\t\t\t\tlet valueChange: string | number = \"\";\r\n\t\t\t\t\t\t\t\t\tconst resultChange = changeValue(textToSend, state.val as string);\r\n\t\t\t\t\t\t\t\t\tif (resultChange) {\r\n\t\t\t\t\t\t\t\t\t\tvalueChange = resultChange[\"val\"];\r\n\t\t\t\t\t\t\t\t\t\ttextToSend = resultChange[\"textToSend\"];\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif (textToSend?.toString().includes(\"{novalue}\")) {\r\n\t\t\t\t\t\t\t\t\t\tvalue = \"\";\r\n\t\t\t\t\t\t\t\t\t\ttextToSend = textToSend.replace(\"{novalue}\", \"\");\r\n\t\t\t\t\t\t\t\t\t} else if (state.val || state.val == false) {\r\n\t\t\t\t\t\t\t\t\t\tvalue = state.val?.toString();\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tvalueChange ? (value = valueChange) : value;\r\n\t\t\t\t\t\t\t\t\ttextToSend = exchangePlaceholderWithValue(textToSend, value);\r\n\r\n\t\t\t\t\t\t\t\t\tsendToTelegram(\r\n\t\t\t\t\t\t\t\t\t\telement.userToSend,\r\n\t\t\t\t\t\t\t\t\t\ttextToSend,\r\n\t\t\t\t\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\t\t\t\t\tinstanceTelegram,\r\n\t\t\t\t\t\t\t\t\t\tresize_keyboard,\r\n\t\t\t\t\t\t\t\t\t\tone_time_keyboard,\r\n\t\t\t\t\t\t\t\t\t\tuserListWithChatID,\r\n\t\t\t\t\t\t\t\t\t\telement.parse_mode as BooleanString,\r\n\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\t\tsetStateIdsToListenTo.splice(key, 1);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} catch (e: any) {\r\n\t\t\t\terror([{ text: \"Error onReady\" }, { val: e.message }, { text: \"Error\", val: e.stack }]);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.subscribeForeignStatesAsync(botSendMessageID);\r\n\t\tthis.subscribeForeignStatesAsync(requestMessageID);\r\n\t\tthis.subscribeForeignStatesAsync(`${instanceTelegram}.communicate.requestChatId`);\r\n\t\tthis.subscribeForeignStatesAsync(telegramID);\r\n\t\tthis.subscribeForeignStatesAsync(`${instanceTelegram}.info.connection`);\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n\t * @param {() => void} callback\r\n\t */\r\n\tprivate onUnload(callback: () => void): void {\r\n\t\tconst timeouts = getTimeouts();\r\n\t\ttry {\r\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\r\n\t\t\ttimeouts.forEach((element: { timeout: string | number | NodeJS.Timeout | undefined }) => {\r\n\t\t\t\tclearTimeout(element.timeout);\r\n\t\t\t});\r\n\r\n\t\t\tcallback();\r\n\t\t} catch (e) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n\r\n\tonMessage(obj: ioBroker.Message): void {\r\n\t\tif (typeof obj === \"object\" && obj.message) {\r\n\t\t\tif (obj.command === \"send\") {\r\n\t\t\t\t// e.g. send email or pushover or whatever\r\n\t\t\t\tthis.log.info(\"send command\");\r\n\r\n\t\t\t\t// Send response in callback if required\r\n\t\t\t\tif (obj.callback) {\r\n\t\t\t\t\tthis.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nif (require.main !== module) {\r\n\t// Export the constructor in compact mode\r\n\t/**\r\n\t * @param {Partial<utils.AdapterOptions>} [options={}]\r\n\t */\r\n\tmodule.exports = (options: Partial<utils.AdapterOptions<undefined, undefined>> | undefined) => new TelegramMenu(options);\r\n} else {\r\n\t// otherwise start the instance directly\r\n\tnew TelegramMenu();\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_action"]
}
