{
  "version": 3,
  "sources": ["../../src/lib/processData.ts"],
  "sourcesContent": ["import TelegramMenu from '../main';\nimport { sendLocationToTelegram, sendToTelegram } from './telegram';\nimport { sendNav } from './sendNav';\nimport { callSubMenu } from './subMenu';\nimport { backMenuFunc, switchBack } from './backMenu';\nimport { setState } from './setstate';\nimport { getState } from './getstate';\nimport { sendPic } from './sendpic';\nimport { getDynamicValue, removeUserFromDynamicValue } from './dynamicValue';\nimport { adjustValueType } from './action';\nimport { _subscribeAndUnSubscribeForeignStatesAsync } from './subscribeStates';\nimport { getChart } from './echarts';\nimport { httpRequest } from './httpRequest';\nimport { debug, error } from './logging';\nimport type {\n    CheckEveryMenuForDataType,\n    IsUserActiveCheckbox,\n    MenuData,\n    NewObjectNavStructure,\n    Part,\n    ProcessDataType,\n    SetStateIds,\n    Timeouts,\n} from './telegram-menu';\n\nlet setStateIdsToListenTo: SetStateIds[] = [];\nlet timeouts: Timeouts[] = [];\n\nasync function checkEveryMenuForData(obj: CheckEveryMenuForDataType): Promise<boolean> {\n    const {\n        menuData,\n        calledValue,\n        userToSend,\n        instanceTelegram,\n        resize_keyboard,\n        one_time_keyboard,\n        userListWithChatID,\n        menus,\n        isUserActiveCheckbox,\n        token,\n        directoryPicture,\n        timeoutKey,\n    } = obj;\n    const _this = TelegramMenu.getInstance();\n    for (const menu of menus) {\n        const groupData: NewObjectNavStructure = menuData.data[menu];\n        debug([\n            { text: 'Nav:', val: menuData.data[menu] },\n            { text: 'Menu:', val: menu },\n            { text: 'Group:', val: menuData.data[menu] },\n        ]);\n\n        if (\n            await processData({\n                _this,\n                menuData,\n                calledValue,\n                userToSend,\n                groupWithUser: menu,\n                instanceTelegram,\n                resize_keyboard: resize_keyboard,\n                one_time_keyboard: one_time_keyboard,\n                userListWithChatID,\n                allMenusWithData: menuData.data,\n                menus,\n                isUserActiveCheckbox,\n                token,\n                directoryPicture,\n                timeoutKey,\n                groupData,\n            })\n        ) {\n            debug([{ text: 'CalledText found' }]);\n            //TODO - Remove\n            debug([{ text: 'CalledText found' }]);\n            return true;\n        }\n    }\n    return false;\n}\n\nasync function processData(obj: ProcessDataType): Promise<boolean | undefined> {\n    const {\n        _this,\n        menuData,\n        calledValue,\n        userToSend,\n        groupWithUser,\n        instanceTelegram,\n        resize_keyboard,\n        one_time_keyboard,\n        userListWithChatID,\n        allMenusWithData,\n        menus,\n        isUserActiveCheckbox,\n        token,\n        directoryPicture,\n        timeoutKey,\n        groupData,\n    } = obj;\n    try {\n        let part: Part = {} as Part;\n        let call: keyof NewObjectNavStructure = '';\n\n        if (getDynamicValue(userToSend)) {\n            const res = getDynamicValue(userToSend);\n            let valueToSet;\n            if (res && res.valueType) {\n                valueToSet = adjustValueType(calledValue, res.valueType);\n            } else {\n                valueToSet = calledValue;\n            }\n            if (valueToSet) {\n                await _this.setForeignStateAsync(res?.id, valueToSet, res?.ack);\n            } else {\n                await sendToTelegram(\n                    userToSend,\n                    `You insert a wrong Type of value, please insert type: ${res?.valueType}`,\n                    undefined,\n                    instanceTelegram,\n                    resize_keyboard,\n                    one_time_keyboard,\n                    userListWithChatID,\n                    'false',\n                );\n            }\n            removeUserFromDynamicValue(userToSend);\n            const result = await switchBack(userToSend, allMenusWithData, menus, true);\n\n            if (result) {\n                await sendToTelegram(\n                    userToSend,\n                    result.texttosend || '',\n                    result.menuToSend,\n                    instanceTelegram,\n                    resize_keyboard,\n                    one_time_keyboard,\n                    userListWithChatID,\n                    result.parseMode,\n                );\n            } else {\n                await sendNav(\n                    part,\n                    userToSend,\n                    instanceTelegram,\n                    userListWithChatID,\n                    resize_keyboard,\n                    one_time_keyboard,\n                );\n            }\n            return true;\n        }\n        if (calledValue.includes('menu:')) {\n            call = calledValue.split(':')[2] as keyof MenuData;\n        } else {\n            call = calledValue as keyof NewObjectNavStructure;\n        }\n        part = groupData[call];\n\n        if (\n            typeof call === 'string' &&\n            groupData &&\n            part &&\n            !calledValue.toString().includes('menu:') &&\n            userToSend &&\n            groupWithUser &&\n            isUserActiveCheckbox[groupWithUser as keyof IsUserActiveCheckbox]\n        ) {\n            if (part.nav) {\n                debug([{ text: 'Menu to Send:', val: part.nav }]);\n\n                backMenuFunc(call, part.nav, userToSend);\n\n                if (JSON.stringify(part.nav).includes('menu:')) {\n                    debug([{ text: 'Submenu' }]);\n                    const result = await callSubMenu(\n                        JSON.stringify(part.nav),\n                        groupData,\n                        userToSend,\n                        instanceTelegram,\n                        resize_keyboard,\n                        one_time_keyboard,\n                        userListWithChatID,\n                        part,\n                        allMenusWithData,\n                        menus,\n                        setStateIdsToListenTo,\n                    );\n                    if (result && result.setStateIdsToListenTo) {\n                        setStateIdsToListenTo = result.setStateIdsToListenTo;\n                    }\n                    if (result && result.newNav) {\n                        await checkEveryMenuForData({\n                            menuData,\n                            calledValue: result.newNav,\n                            userToSend,\n                            instanceTelegram,\n                            resize_keyboard,\n                            one_time_keyboard,\n                            userListWithChatID,\n                            menus,\n                            isUserActiveCheckbox,\n                            token,\n                            directoryPicture,\n                            timeoutKey,\n                        });\n                    }\n                } else {\n                    await sendNav(\n                        part,\n                        userToSend,\n                        instanceTelegram,\n                        userListWithChatID,\n                        resize_keyboard,\n                        one_time_keyboard,\n                    );\n                }\n                return true;\n            }\n\n            if (part.switch) {\n                const result = await setState(\n                    part,\n                    userToSend,\n                    0,\n                    false,\n                    instanceTelegram,\n                    resize_keyboard,\n                    one_time_keyboard,\n                    userListWithChatID,\n                );\n                if (result) {\n                    setStateIdsToListenTo = result;\n                }\n                if (Array.isArray(setStateIdsToListenTo)) {\n                    await _subscribeAndUnSubscribeForeignStatesAsync({ array: setStateIdsToListenTo });\n                }\n                return true;\n            }\n            if (part.getData) {\n                getState(part, userToSend, instanceTelegram, one_time_keyboard, resize_keyboard, userListWithChatID);\n                return true;\n            }\n            if (part.sendPic) {\n                const result = sendPic(\n                    part,\n                    userToSend,\n                    instanceTelegram,\n                    resize_keyboard,\n                    one_time_keyboard,\n                    userListWithChatID,\n                    token,\n                    directoryPicture,\n                    timeouts,\n                    timeoutKey,\n                );\n                if (result) {\n                    timeouts = result;\n                } else {\n                    debug([{ text: 'Timeouts not found' }]);\n                }\n                return true;\n            }\n            if (part.location) {\n                debug([{ text: 'Send Location' }]);\n                await sendLocationToTelegram(userToSend, part.location, instanceTelegram, userListWithChatID);\n                return true;\n            }\n            if (part.echarts) {\n                debug([{ text: 'Echarts' }]);\n                getChart(\n                    part.echarts,\n                    directoryPicture,\n                    userToSend,\n                    instanceTelegram,\n                    userListWithChatID,\n                    resize_keyboard,\n                    one_time_keyboard,\n                );\n                return true;\n            }\n            if (part.httpRequest) {\n                debug([{ text: 'HttpRequest' }]);\n                const result = await httpRequest(\n                    part,\n                    userToSend,\n                    instanceTelegram,\n                    resize_keyboard,\n                    one_time_keyboard,\n                    userListWithChatID,\n                    directoryPicture,\n                );\n                if (result) {\n                    return true;\n                }\n            }\n        }\n        if (\n            (calledValue.startsWith('menu') || calledValue.startsWith('submenu')) &&\n            menuData.data[groupWithUser][call]\n        ) {\n            debug([{ text: 'Call Submenu' }]);\n            const result = await callSubMenu(\n                calledValue,\n                menuData,\n                userToSend,\n                instanceTelegram,\n                resize_keyboard,\n                one_time_keyboard,\n                userListWithChatID,\n                part,\n                allMenusWithData,\n                menus,\n                setStateIdsToListenTo,\n            );\n            if (result && result.setStateIdsToListenTo) {\n                setStateIdsToListenTo = result.setStateIdsToListenTo;\n            }\n            return true;\n        }\n        return false;\n    } catch (e: any) {\n        error([\n            { text: 'Error processData:', val: e.message },\n            { text: 'Stack:', val: e.stack },\n        ]);\n    }\n}\n\nfunction getStateIdsToListenTo(): SetStateIds[] {\n    return setStateIdsToListenTo;\n}\n\nfunction getTimeouts(): Timeouts[] {\n    return timeouts;\n}\n\nexport { getStateIdsToListenTo, getTimeouts, checkEveryMenuForData };\n"],
  "mappings": "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",
  "names": ["TelegramMenu"]
}
