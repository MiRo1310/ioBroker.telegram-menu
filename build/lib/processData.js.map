{
  "version": 3,
  "sources": ["../../src/lib/processData.ts"],
  "sourcesContent": ["import TelegramMenu from \"../main\";\r\nimport { sendToTelegram } from \"./telegram\";\r\nimport { sendNav } from \"./sendNav\";\r\nimport { callSubMenu } from \"./subMenu\";\r\nimport { backMenuFunc, switchBack } from \"./backMenu\";\r\nimport { setState } from \"./setstate\";\r\nimport { getState } from \"./getstate\";\r\nimport { sendPic } from \"./sendpic\";\r\nimport { sendLocationToTelegram } from \"./telegram\";\r\nimport { getDynamicValue, removeUserFromDynamicValue } from \"./dynamicValue\";\r\nimport { adjustValueType } from \"./action\";\r\nimport { _subscribeAndUnSubscribeForeignStatesAsync } from \"./subscribeStates\";\r\nimport { getChart } from \"./echarts\";\r\nimport { httpRequest } from \"./httpRequest\";\r\nimport { debug, error } from \"./logging\";\r\nimport {\r\n\tSetStateIds,\r\n\tTimeouts,\r\n\tCheckEveryMenuForDataType,\r\n\tNewObjectNavStructure,\r\n\tProcessDataType,\r\n\tPart,\r\n\tMenuData,\r\n\tIsUserActiveCheckbox,\r\n} from \"./telegram-menu\";\r\n\r\nlet setStateIdsToListenTo: SetStateIds[] = [];\r\nlet timeouts: Timeouts[] = [];\r\n\r\nasync function checkEveryMenuForData(obj: CheckEveryMenuForDataType): Promise<boolean> {\r\n\tconst {\r\n\t\tmenuData,\r\n\t\tcalledValue,\r\n\t\tuserToSend,\r\n\t\tinstanceTelegram,\r\n\t\tresize_keyboard,\r\n\t\tone_time_keyboard,\r\n\t\tuserListWithChatID,\r\n\t\tmenus,\r\n\t\tisUserActiveCheckbox,\r\n\t\ttoken,\r\n\t\tdirectoryPicture,\r\n\t\ttimeoutKey,\r\n\t} = obj;\r\n\tconst _this = TelegramMenu.getInstance();\r\n\tfor (const menu of menus) {\r\n\t\tconst groupData: NewObjectNavStructure = menuData.data[menu];\r\n\t\tdebug([\r\n\t\t\t{ text: \"Nav:\", val: menuData.data[menu] },\r\n\t\t\t{ text: \"Menu:\", val: menu },\r\n\t\t\t{ text: \"Group:\", val: menuData.data[menu] },\r\n\t\t]);\r\n\r\n\t\tif (\r\n\t\t\tawait processData({\r\n\t\t\t\t_this,\r\n\t\t\t\tmenuData,\r\n\t\t\t\tcalledValue: calledValue,\r\n\t\t\t\tuserToSend,\r\n\t\t\t\tgroupWithUser: menu,\r\n\t\t\t\tinstanceTelegram,\r\n\t\t\t\tresize_keyboard: resize_keyboard,\r\n\t\t\t\tone_time_keyboard: one_time_keyboard,\r\n\t\t\t\tuserListWithChatID,\r\n\t\t\t\tallMenusWithData: menuData.data,\r\n\t\t\t\tmenus,\r\n\t\t\t\tisUserActiveCheckbox,\r\n\t\t\t\ttoken,\r\n\t\t\t\tdirectoryPicture,\r\n\t\t\t\ttimeoutKey,\r\n\t\t\t\tgroupData,\r\n\t\t\t})\r\n\t\t) {\r\n\t\t\tdebug([{ text: \"CalledText found\" }]);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nasync function processData(obj: ProcessDataType): Promise<boolean | undefined> {\r\n\tconst {\r\n\t\t_this,\r\n\t\tmenuData,\r\n\t\tcalledValue,\r\n\t\tuserToSend,\r\n\t\tgroupWithUser,\r\n\t\tinstanceTelegram,\r\n\t\tresize_keyboard,\r\n\t\tone_time_keyboard,\r\n\t\tuserListWithChatID,\r\n\t\tallMenusWithData,\r\n\t\tmenus,\r\n\t\tisUserActiveCheckbox,\r\n\t\ttoken,\r\n\t\tdirectoryPicture,\r\n\t\ttimeoutKey,\r\n\t\tgroupData,\r\n\t} = obj;\r\n\ttry {\r\n\t\tlet part: Part = {} as Part;\r\n\t\tlet call: keyof NewObjectNavStructure = \"\";\r\n\r\n\t\tif (getDynamicValue(userToSend)) {\r\n\t\t\tconst res = getDynamicValue(userToSend);\r\n\t\t\tlet valueToSet;\r\n\t\t\tif (res && res.valueType) {\r\n\t\t\t\tvalueToSet = adjustValueType(calledValue, res.valueType);\r\n\t\t\t} else {\r\n\t\t\t\tvalueToSet = calledValue;\r\n\t\t\t}\r\n\t\t\tif (valueToSet) {\r\n\t\t\t\tawait _this.setForeignStateAsync(res?.id, valueToSet, res?.ack);\r\n\t\t\t} else {\r\n\t\t\t\tsendToTelegram(\r\n\t\t\t\t\tuserToSend,\r\n\t\t\t\t\t`You insert a wrong Type of value, please insert type: ${res?.valueType}`,\r\n\t\t\t\t\tundefined,\r\n\t\t\t\t\tinstanceTelegram,\r\n\t\t\t\t\tresize_keyboard,\r\n\t\t\t\t\tone_time_keyboard,\r\n\t\t\t\t\tuserListWithChatID,\r\n\t\t\t\t\t\"\",\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tremoveUserFromDynamicValue(userToSend);\r\n\t\t\tconst result = await switchBack(userToSend, allMenusWithData, menus, true);\r\n\r\n\t\t\tif (result) {\r\n\t\t\t\tsendToTelegram(\r\n\t\t\t\t\tuserToSend,\r\n\t\t\t\t\tresult[\"texttosend\"] || \"\",\r\n\t\t\t\t\tresult[\"menuToSend\"],\r\n\t\t\t\t\tinstanceTelegram,\r\n\t\t\t\t\tresize_keyboard,\r\n\t\t\t\t\tone_time_keyboard,\r\n\t\t\t\t\tuserListWithChatID,\r\n\t\t\t\t\tresult[\"parseMode\"],\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tsendNav(part, userToSend, instanceTelegram, userListWithChatID, resize_keyboard, one_time_keyboard);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (typeof calledValue === \"string\" && calledValue.includes(\"menu:\")) {\r\n\t\t\tcall = calledValue.split(\":\")[2] as keyof MenuData;\r\n\t\t} else {\r\n\t\t\tcall = calledValue as keyof NewObjectNavStructure;\r\n\t\t}\r\n\t\tpart = groupData[call];\r\n\r\n\t\tif (\r\n\t\t\ttypeof call === \"string\" &&\r\n\t\t\tgroupData &&\r\n\t\t\tpart &&\r\n\t\t\t!calledValue.toString().includes(\"menu:\") &&\r\n\t\t\tuserToSend &&\r\n\t\t\tgroupWithUser &&\r\n\t\t\tisUserActiveCheckbox[groupWithUser as keyof IsUserActiveCheckbox]\r\n\t\t) {\r\n\t\t\tif (part.nav) {\r\n\t\t\t\tdebug([{ text: \"Menu to Send:\", val: part.nav }]);\r\n\r\n\t\t\t\tbackMenuFunc(call, part.nav, userToSend);\r\n\r\n\t\t\t\tif (JSON.stringify(part.nav).includes(\"menu:\")) {\r\n\t\t\t\t\tdebug([{ text: \"Submenu\" }]);\r\n\t\t\t\t\tconst result = await callSubMenu(\r\n\t\t\t\t\t\tJSON.stringify(part.nav),\r\n\t\t\t\t\t\tgroupData,\r\n\t\t\t\t\t\tuserToSend,\r\n\t\t\t\t\t\tinstanceTelegram,\r\n\t\t\t\t\t\tresize_keyboard,\r\n\t\t\t\t\t\tone_time_keyboard,\r\n\t\t\t\t\t\tuserListWithChatID,\r\n\t\t\t\t\t\tpart,\r\n\t\t\t\t\t\tallMenusWithData,\r\n\t\t\t\t\t\tmenus,\r\n\t\t\t\t\t\tsetStateIdsToListenTo,\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (result && result.setStateIdsToListenTo) {\r\n\t\t\t\t\t\tsetStateIdsToListenTo = result.setStateIdsToListenTo;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (result && result.newNav) {\r\n\t\t\t\t\t\tcheckEveryMenuForData({\r\n\t\t\t\t\t\t\tmenuData,\r\n\t\t\t\t\t\t\tcalledValue: result.newNav,\r\n\t\t\t\t\t\t\tuserToSend,\r\n\t\t\t\t\t\t\tinstanceTelegram,\r\n\t\t\t\t\t\t\tresize_keyboard,\r\n\t\t\t\t\t\t\tone_time_keyboard,\r\n\t\t\t\t\t\t\tuserListWithChatID,\r\n\t\t\t\t\t\t\tmenus,\r\n\t\t\t\t\t\t\tisUserActiveCheckbox,\r\n\t\t\t\t\t\t\ttoken,\r\n\t\t\t\t\t\t\tdirectoryPicture,\r\n\t\t\t\t\t\t\ttimeoutKey,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsendNav(part, userToSend, instanceTelegram, userListWithChatID, resize_keyboard, one_time_keyboard);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif (part.switch) {\r\n\t\t\t\tconst result = await setState(part, userToSend, 0, false, instanceTelegram, resize_keyboard, one_time_keyboard, userListWithChatID);\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\tsetStateIdsToListenTo = result;\r\n\t\t\t\t}\r\n\t\t\t\tif (Array.isArray(setStateIdsToListenTo)) {\r\n\t\t\t\t\t_subscribeAndUnSubscribeForeignStatesAsync({ array: setStateIdsToListenTo });\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (part.getData) {\r\n\t\t\t\tgetState(part, userToSend, instanceTelegram, one_time_keyboard, resize_keyboard, userListWithChatID);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (part.sendPic) {\r\n\t\t\t\tconst result = sendPic(\r\n\t\t\t\t\tpart,\r\n\t\t\t\t\tuserToSend,\r\n\t\t\t\t\tinstanceTelegram,\r\n\t\t\t\t\tresize_keyboard,\r\n\t\t\t\t\tone_time_keyboard,\r\n\t\t\t\t\tuserListWithChatID,\r\n\t\t\t\t\ttoken,\r\n\t\t\t\t\tdirectoryPicture,\r\n\t\t\t\t\ttimeouts,\r\n\t\t\t\t\ttimeoutKey,\r\n\t\t\t\t);\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\ttimeouts = result;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdebug([{ text: \"Timeouts not found\" }]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (part.location) {\r\n\t\t\t\tdebug([{ text: \"Send Location\" }]);\r\n\t\t\t\tsendLocationToTelegram(userToSend, part.location, instanceTelegram, userListWithChatID);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (part.echarts) {\r\n\t\t\t\tdebug([{ text: \"Echarts\" }]);\r\n\t\t\t\tawait getChart(part.echarts, directoryPicture, userToSend, instanceTelegram, userListWithChatID, resize_keyboard, one_time_keyboard);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (part.httpRequest) {\r\n\t\t\t\tdebug([{ text: \"HttpRequest\" }]);\r\n\t\t\t\tconst result = await httpRequest(\r\n\t\t\t\t\tpart,\r\n\t\t\t\t\tuserToSend,\r\n\t\t\t\t\tinstanceTelegram,\r\n\t\t\t\t\tresize_keyboard,\r\n\t\t\t\t\tone_time_keyboard,\r\n\t\t\t\t\tuserListWithChatID,\r\n\t\t\t\t\tdirectoryPicture,\r\n\t\t\t\t);\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((calledValue.startsWith(\"menu\") || calledValue.startsWith(\"submenu\")) && menuData.data[groupWithUser][call]) {\r\n\t\t\tdebug([{ text: \"Call Submenu\" }]);\r\n\t\t\tconst result = await callSubMenu(\r\n\t\t\t\tcalledValue,\r\n\t\t\t\tmenuData,\r\n\t\t\t\tuserToSend,\r\n\t\t\t\tinstanceTelegram,\r\n\t\t\t\tresize_keyboard,\r\n\t\t\t\tone_time_keyboard,\r\n\t\t\t\tuserListWithChatID,\r\n\t\t\t\tpart,\r\n\t\t\t\tallMenusWithData,\r\n\t\t\t\tmenus,\r\n\t\t\t\tsetStateIdsToListenTo,\r\n\t\t\t);\r\n\t\t\tif (result && result.setStateIdsToListenTo) {\r\n\t\t\t\tsetStateIdsToListenTo = result.setStateIdsToListenTo;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t} catch (e: any) {\r\n\t\terror([\r\n\t\t\t{ text: \"Error processData:\", val: e.message },\r\n\t\t\t{ text: \"Stack:\", val: e.stack },\r\n\t\t]);\r\n\t}\r\n}\r\n\r\nfunction getStateIdsToListenTo(): SetStateIds[] {\r\n\treturn setStateIdsToListenTo;\r\n}\r\nfunction getTimeouts(): Timeouts[] {\r\n\treturn timeouts;\r\n}\r\n\r\nexport { getStateIdsToListenTo, getTimeouts, checkEveryMenuForData };\r\n"],
  "mappings": "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",
  "names": ["import_telegram", "TelegramMenu"]
}
