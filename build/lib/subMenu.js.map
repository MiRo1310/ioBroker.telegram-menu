{
  "version": 3,
  "sources": ["../../src/lib/subMenu.ts"],
  "sourcesContent": ["import { switchBack } from \"./backMenu\";\r\nimport { setState } from \"./setstate\";\r\nimport { sendToTelegram, sendToTelegramSubmenu } from \"./telegram\";\r\nimport { checkStatusInfo } from \"./utilities\";\r\nimport { _subscribeAndUnSubscribeForeignStatesAsync } from \"./subscribeStates\";\r\nimport { deleteMessageIds } from \"./messageIds\";\r\nimport { dynamicSwitch } from \"./dynamicSwitch\";\r\nimport { debug } from \"./logging\";\r\nimport { error } from \"console\";\r\nimport {\r\n\tSetStateIds,\r\n\tSplittedData,\r\n\tSplitText,\r\n\tDeleteMessageIds,\r\n\tSetDynamicValueType,\r\n\tCreateSubmenuPercent,\r\n\tArrayOfEntriesDynamicSwitch,\r\n\tKeyboard,\r\n\tSetFirstMenuValue,\r\n\tSetSecondMenuValue,\r\n\tCreateSubmenuNumber,\r\n\tCreateSwitchMenu,\r\n\tSetValueForSubmenuPercent,\r\n\tSetValueForSubmenuNumber,\r\n\tBackMenuType,\r\n\tNewObjectNavStructure,\r\n\tUserListWithChatId,\r\n\tPart,\r\n} from \"./telegram-menu\";\r\n\r\nlet step = 0;\r\nlet returnIDToListenTo: SetStateIds[] = [];\r\nlet splittedData: SplittedData = [];\r\n\r\nconst splitText = (obj: SplitText): { callbackData: string; device: string; val: string } => {\r\n\tlet splittedText: string[] = [];\r\n\tif (obj.calledValue.includes('\"')) {\r\n\t\tsplittedText = obj.calledValue.split(`\"`)[1].split(\":\");\r\n\t} else {\r\n\t\tsplittedText = obj.calledValue.split(\":\");\r\n\t}\r\n\treturn { callbackData: splittedText[1], device: splittedText[2], val: splittedText[3] };\r\n};\r\n\r\nconst deleteMessages = async (obj: DeleteMessageIds): Promise<{ navToGoBack: string } | undefined> => {\r\n\tconst navToGoBack = obj.device2Switch;\r\n\tif (obj.callbackData.includes(\"deleteAll\")) {\r\n\t\tawait deleteMessageIds(obj.userToSend, obj.userListWithChatID, obj.instanceTelegram, \"all\");\r\n\t}\r\n\tif (navToGoBack && navToGoBack != \"\") {\r\n\t\treturn { navToGoBack: navToGoBack };\r\n\t}\r\n\treturn;\r\n};\r\n\r\nconst setDynamicValue = async (obj: SetDynamicValueType): Promise<{ returnIds: SetStateIds[] }> => {\r\n\tdebug([{ text: \"SplittedData:\", val: obj.val }]);\r\n\r\n\tconst result = await setState(\r\n\t\tobj.part,\r\n\t\tobj.userToSend,\r\n\t\tobj.val,\r\n\t\ttrue,\r\n\t\tobj.instanceTelegram,\r\n\t\tobj.resize_keyboard,\r\n\t\tobj.one_time_keyboard,\r\n\t\tobj.userListWithChatID,\r\n\t);\r\n\tif (Array.isArray(result)) {\r\n\t\treturnIDToListenTo = result;\r\n\t}\r\n\treturn {\r\n\t\treturnIds: returnIDToListenTo,\r\n\t};\r\n};\r\n\r\nconst createSubmenuPercent = (obj: CreateSubmenuPercent): { text: string | undefined; keyboard: string; device: string } => {\r\n\tconst callbackData = obj.callbackData;\r\n\tconst device2Switch = obj.device2Switch;\r\n\tstep = parseFloat(callbackData.replace(\"percent\", \"\"));\r\n\tlet rowEntries = 0;\r\n\tlet menu: ArrayOfEntriesDynamicSwitch[] = [];\r\n\tconst keyboard: Keyboard = {\r\n\t\tinline_keyboard: [],\r\n\t};\r\n\tfor (let i = 100; i >= 0; i -= step) {\r\n\t\tmenu.push({\r\n\t\t\ttext: `${i}%`,\r\n\t\t\tcallback_data: `submenu:percent${step},${i}:${device2Switch}`,\r\n\t\t});\r\n\t\tif (i != 0 && i - step < 0) {\r\n\t\t\tmenu.push({\r\n\t\t\t\ttext: `0%`,\r\n\t\t\t\tcallback_data: `submenu:percent${step},${0}:${device2Switch}`,\r\n\t\t\t});\r\n\t\t}\r\n\t\trowEntries++;\r\n\t\tif (rowEntries == 8) {\r\n\t\t\tkeyboard.inline_keyboard.push(menu);\r\n\t\t\tmenu = [];\r\n\t\t\trowEntries = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tif (rowEntries != 0) {\r\n\t\tkeyboard.inline_keyboard.push(menu);\r\n\t}\r\n\treturn { text: obj.text, keyboard: JSON.stringify(keyboard), device: device2Switch };\r\n};\r\n\r\nconst setFirstMenuValue = async (obj: SetFirstMenuValue): Promise<{ returnIds: SetStateIds[] }> => {\r\n\tlet val;\r\n\tdebug([{ text: \"SplittedData:\", val: splittedData }]);\r\n\tif (splittedData[1].split(\".\")[1] == \"false\") {\r\n\t\tval = false;\r\n\t} else if (splittedData[1].split(\".\")[1] == \"true\") {\r\n\t\tval = true;\r\n\t} else {\r\n\t\tval = splittedData[1].split(\".\")[1];\r\n\t}\r\n\tconst result = await setState(\r\n\t\tobj.part,\r\n\t\tobj.userToSend,\r\n\t\tval as string,\r\n\t\ttrue,\r\n\t\tobj.instanceTelegram,\r\n\t\tobj.resize_keyboard,\r\n\t\tobj.one_time_keyboard,\r\n\t\tobj.userListWithChatID,\r\n\t);\r\n\tif (Array.isArray(result)) {\r\n\t\treturnIDToListenTo = result;\r\n\t}\r\n\treturn { returnIds: returnIDToListenTo };\r\n};\r\n\r\nconst setSecondMenuValue = async (obj: SetSecondMenuValue): Promise<{ returnIds: SetStateIds[] }> => {\r\n\tlet val;\r\n\tif (splittedData[2].split(\".\")[1] == \"false\") {\r\n\t\tval = false;\r\n\t} else if (splittedData[2].split(\".\")[1] == \"true\") {\r\n\t\tval = true;\r\n\t} else {\r\n\t\tval = splittedData[2].split(\".\")[1];\r\n\t}\r\n\tconst result = await setState(\r\n\t\tobj.part,\r\n\t\tobj.userToSend,\r\n\t\tval as string,\r\n\t\ttrue,\r\n\t\tobj.instanceTelegram,\r\n\t\tobj.one_time_keyboard,\r\n\t\tobj.resize_keyboard,\r\n\t\tobj.userListWithChatID,\r\n\t);\r\n\tif (Array.isArray(result)) {\r\n\t\treturnIDToListenTo = result;\r\n\t}\r\n\treturn { returnIds: returnIDToListenTo };\r\n};\r\n\r\nconst createSubmenuNumber = (obj: CreateSubmenuNumber): { text: string | undefined; keyboard: string; device: string } => {\r\n\tlet callbackData = obj.callbackData;\r\n\tconst device2Switch = obj.device2Switch;\r\n\r\n\tif (callbackData.includes(\"(-)\")) {\r\n\t\tcallbackData = callbackData.replace(\"(-)\", \"negativ\");\r\n\t}\r\n\tconst splittedData = callbackData.replace(\"number\", \"\").split(\"-\");\r\n\tlet rowEntries = 0;\r\n\tlet menu: { text: string; callback_data: string }[] = [];\r\n\tconst keyboard = {\r\n\t\tinline_keyboard: [] as any[],\r\n\t};\r\n\tlet unit = \"\";\r\n\tif (splittedData[3] != \"\") {\r\n\t\tunit = splittedData[3];\r\n\t}\r\n\tlet start = 0,\r\n\t\tend = 0;\r\n\tconst firstValueInText = parseFloat(splittedData[0].includes(\"negativ\") ? splittedData[0].replace(\"negativ\", \"-\") : splittedData[0]);\r\n\tconst secondValueInText = parseFloat(splittedData[1].includes(\"negativ\") ? splittedData[1].replace(\"negativ\", \"-\") : splittedData[1]);\r\n\r\n\tif (firstValueInText < secondValueInText) {\r\n\t\tstart = secondValueInText;\r\n\t\tend = firstValueInText;\r\n\t} else {\r\n\t\tstart = firstValueInText;\r\n\t\tend = secondValueInText;\r\n\t}\r\n\tlet index = -1;\r\n\r\n\tlet maxEntriesPerRow = 8;\r\n\tconst step = parseFloat(splittedData[2].includes(\"negativ\") ? splittedData[2].replace(\"negativ\", \"-\") : splittedData[2]);\r\n\tif (step < 1) {\r\n\t\tmaxEntriesPerRow = 6;\r\n\t}\r\n\r\n\tfor (let i = start; i >= end; i -= step) {\r\n\t\t// Zahlen umdrehen\r\n\t\tif (parseFloat(splittedData[0]) < parseFloat(splittedData[1])) {\r\n\t\t\tif (i === start) {\r\n\t\t\t\tindex = end - step;\r\n\t\t\t}\r\n\t\t\tindex = index + step;\r\n\t\t} else {\r\n\t\t\tindex = i;\r\n\t\t}\r\n\t\tmenu.push({\r\n\t\t\ttext: `${index}${unit}`,\r\n\t\t\tcallback_data: `submenu:${callbackData}:${device2Switch}:${index}`,\r\n\t\t});\r\n\t\trowEntries++;\r\n\t\tif (rowEntries == maxEntriesPerRow) {\r\n\t\t\tkeyboard.inline_keyboard.push(menu);\r\n\t\t\tmenu = [];\r\n\t\t\trowEntries = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tif (rowEntries != 0) {\r\n\t\tkeyboard.inline_keyboard.push(menu);\r\n\t}\r\n\tdebug([{ text: \"keyboard:\", val: keyboard.inline_keyboard }]);\r\n\treturn { text: obj.text, keyboard: JSON.stringify(keyboard), device: device2Switch };\r\n};\r\n\r\nconst createSwitchMenu = (obj: CreateSwitchMenu): { text: string | undefined; keyboard: string; device: string } => {\r\n\tsplittedData = obj.callbackData.split(\"-\");\r\n\tconst keyboard = {\r\n\t\tinline_keyboard: [\r\n\t\t\t[\r\n\t\t\t\t{\r\n\t\t\t\t\ttext: splittedData[1].split(\".\")[0],\r\n\t\t\t\t\tcallback_data: `menu:first:${obj.device2Switch}`,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttext: splittedData[2].split(\".\")[0],\r\n\t\t\t\t\tcallback_data: `menu:second:${obj.device2Switch}`,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t],\r\n\t};\r\n\treturn { text: obj.text, keyboard: JSON.stringify(keyboard), device: obj.device2Switch };\r\n};\r\n\r\nconst setValueForSubmenuPercent = async (obj: SetValueForSubmenuPercent): Promise<{ returnIds: SetStateIds[] }> => {\r\n\tconst value = parseInt(obj.calledValue.split(\":\")[1].split(\",\")[1]);\r\n\r\n\tconst result = await setState(\r\n\t\tobj.part,\r\n\t\tobj.userToSend,\r\n\t\tvalue,\r\n\t\ttrue,\r\n\t\tobj.instanceTelegram,\r\n\t\tobj.resize_keyboard,\r\n\t\tobj.one_time_keyboard,\r\n\t\tobj.userListWithChatID,\r\n\t);\r\n\tif (Array.isArray(result)) {\r\n\t\treturnIDToListenTo = result;\r\n\t}\r\n\treturn { returnIds: returnIDToListenTo };\r\n};\r\n\r\nconst setValueForSubmenuNumber = async (obj: SetValueForSubmenuNumber): Promise<{ returnIds: SetStateIds[]; device2Switch: string }> => {\r\n\tdebug([{ text: \"CallbackData:\", val: obj.callbackData }]);\r\n\r\n\tconst value = parseFloat(obj.calledValue.split(\":\")[3]);\r\n\tconst device2Switch = obj.calledValue.split(\":\")[2];\r\n\r\n\tconst result = await setState(\r\n\t\tobj.part,\r\n\t\tobj.userToSend,\r\n\t\tvalue,\r\n\t\ttrue,\r\n\t\tobj.instanceTelegram,\r\n\t\tobj.resize_keyboard,\r\n\t\tobj.one_time_keyboard,\r\n\t\tobj.userListWithChatID,\r\n\t);\r\n\tif (Array.isArray(result)) {\r\n\t\treturnIDToListenTo = result;\r\n\t}\r\n\treturn { returnIds: returnIDToListenTo, device2Switch };\r\n};\r\n\r\nconst back = async (obj: BackMenuType): Promise<void> => {\r\n\tconst result = await switchBack(obj.userToSend, obj.allMenusWithData, obj.menus);\r\n\tif (result) {\r\n\t\tsendToTelegram(\r\n\t\t\tobj.userToSend,\r\n\t\t\tresult[\"texttosend\"] as string,\r\n\t\t\tresult[\"menuToSend\"],\r\n\t\t\tobj.instanceTelegram,\r\n\t\t\tobj.resize_keyboard,\r\n\t\t\tobj.one_time_keyboard,\r\n\t\t\tobj.userListWithChatID,\r\n\t\t\tresult[\"parseMode\"],\r\n\t\t);\r\n\t}\r\n};\r\nasync function callSubMenu(\r\n\tcalledValue: string,\r\n\tnewObjectNavStructure: NewObjectNavStructure,\r\n\tuserToSend: string,\r\n\tinstanceTelegram: string,\r\n\tresize_keyboard: boolean,\r\n\tone_time_keyboard: boolean,\r\n\tuserListWithChatID: UserListWithChatId[],\r\n\tpart: Part,\r\n\tallMenusWithData: { [key: string]: NewObjectNavStructure },\r\n\tmenus: string[],\r\n\tsetStateIdsToListenTo: SetStateIds[] | null,\r\n): Promise<{ setStateIdsToListenTo: SetStateIds[] | null; newNav: string | undefined } | undefined> {\r\n\ttry {\r\n\t\tdebug([{ text: \"Type of:\", val: typeof calledValue }]);\r\n\t\tconst obj = await subMenu(\r\n\t\t\tcalledValue,\r\n\t\t\tnewObjectNavStructure,\r\n\t\t\tuserToSend,\r\n\t\t\tinstanceTelegram,\r\n\t\t\tresize_keyboard,\r\n\t\t\tone_time_keyboard,\r\n\t\t\tuserListWithChatID,\r\n\t\t\tpart,\r\n\t\t\tallMenusWithData,\r\n\t\t\tmenus,\r\n\t\t);\r\n\t\tdebug([{ text: \"Submenu data:\", val: obj }]);\r\n\r\n\t\tif (obj?.returnIds) {\r\n\t\t\tsetStateIdsToListenTo = obj.returnIds;\r\n\r\n\t\t\t_subscribeAndUnSubscribeForeignStatesAsync({ array: obj.returnIds });\r\n\t\t}\r\n\r\n\t\tif (obj && typeof obj.text == \"string\" && obj.text && typeof obj.keyboard == \"string\") {\r\n\t\t\tsendToTelegramSubmenu(userToSend, obj.text, obj.keyboard, instanceTelegram, userListWithChatID, part.parse_mode || \"false\");\r\n\t\t}\r\n\t\treturn { setStateIdsToListenTo: setStateIdsToListenTo, newNav: obj?.navToGoBack };\r\n\t} catch (e: any) {\r\n\t\terror({\r\n\t\t\tarray: [\r\n\t\t\t\t{ text: \"Error callSubMenu:\", val: e.message },\r\n\t\t\t\t{ text: \"Stack:\", val: e.stack },\r\n\t\t\t],\r\n\t\t});\r\n\t}\r\n}\r\n\r\nasync function subMenu(\r\n\tcalledValue: string,\r\n\tmenuData: NewObjectNavStructure,\r\n\tuserToSend: string,\r\n\tinstanceTelegram: string,\r\n\tresize_keyboard: boolean,\r\n\tone_time_keyboard: boolean,\r\n\tuserListWithChatID: UserListWithChatId[],\r\n\tpart: Part,\r\n\tallMenusWithData: { [key: string]: NewObjectNavStructure },\r\n\tmenus: string[],\r\n): Promise<{ text?: string; keyboard?: string; device?: string; returnIds?: SetStateIds[]; navToGoBack?: string } | undefined> {\r\n\ttry {\r\n\t\tdebug([{ text: \"CalledValue:\", val: calledValue }]);\r\n\t\tlet text: string | undefined = \"\";\r\n\t\tif (part && part.text && part.text != \"\") {\r\n\t\t\ttext = await checkStatusInfo(part.text);\r\n\t\t}\r\n\t\tconst { callbackData, device, val } = splitText({ calledValue });\r\n\t\tlet device2Switch = device;\r\n\r\n\t\tif (callbackData.includes(\"delete\")) {\r\n\t\t\treturn await deleteMessages({ userToSend, userListWithChatID, instanceTelegram, device2Switch, callbackData });\r\n\t\t} else if (callbackData.includes(\"switch\")) {\r\n\t\t\treturn createSwitchMenu({ callbackData, text, device2Switch });\r\n\t\t} else if (callbackData.includes(\"first\")) {\r\n\t\t\treturn await setFirstMenuValue({\r\n\t\t\t\tpart,\r\n\t\t\t\tuserToSend,\r\n\t\t\t\tinstanceTelegram,\r\n\t\t\t\tresize_keyboard,\r\n\t\t\t\tone_time_keyboard,\r\n\t\t\t\tuserListWithChatID,\r\n\t\t\t});\r\n\t\t} else if (callbackData.includes(\"second\")) {\r\n\t\t\treturn await setSecondMenuValue({\r\n\t\t\t\tpart,\r\n\t\t\t\tuserToSend,\r\n\t\t\t\tinstanceTelegram,\r\n\t\t\t\tresize_keyboard,\r\n\t\t\t\tone_time_keyboard,\r\n\t\t\t\tuserListWithChatID,\r\n\t\t\t});\r\n\t\t} else if (callbackData.includes(\"dynSwitch\")) {\r\n\t\t\treturn dynamicSwitch(calledValue, device2Switch, text as string);\r\n\t\t} else if (callbackData.includes(\"dynS\")) {\r\n\t\t\treturn await setDynamicValue({\r\n\t\t\t\tval,\r\n\t\t\t\tuserToSend,\r\n\t\t\t\tinstanceTelegram,\r\n\t\t\t\tresize_keyboard,\r\n\t\t\t\tone_time_keyboard,\r\n\t\t\t\tuserListWithChatID,\r\n\t\t\t\tpart,\r\n\t\t\t});\r\n\t\t} else if (!calledValue.includes(\"submenu\") && callbackData.includes(\"percent\")) {\r\n\t\t\treturn createSubmenuPercent({ callbackData, text, device2Switch });\r\n\t\t} else if (calledValue.includes(`submenu:percent${step}`)) {\r\n\t\t\treturn await setValueForSubmenuPercent({\r\n\t\t\t\tcallbackData,\r\n\t\t\t\tcalledValue,\r\n\t\t\t\tuserToSend,\r\n\t\t\t\tinstanceTelegram,\r\n\t\t\t\tresize_keyboard,\r\n\t\t\t\tone_time_keyboard,\r\n\t\t\t\tuserListWithChatID,\r\n\t\t\t\tpart,\r\n\t\t\t\tallMenusWithData,\r\n\t\t\t\tmenus,\r\n\t\t\t});\r\n\t\t} else if (!calledValue.includes(\"submenu\") && callbackData.includes(\"number\")) {\r\n\t\t\treturn createSubmenuNumber({ callbackData, text, device2Switch });\r\n\t\t} else if (calledValue.includes(`submenu:${callbackData}`)) {\r\n\t\t\tconst result = await setValueForSubmenuNumber({\r\n\t\t\t\tcallbackData,\r\n\t\t\t\tcalledValue,\r\n\t\t\t\tuserToSend,\r\n\t\t\t\tinstanceTelegram,\r\n\t\t\t\tresize_keyboard,\r\n\t\t\t\tone_time_keyboard,\r\n\t\t\t\tuserListWithChatID,\r\n\t\t\t\tpart,\r\n\t\t\t});\r\n\t\t\tdevice2Switch = result.device2Switch;\r\n\t\t\treturn result.returnIds ? { returnIds: result.returnIds } : undefined;\r\n\t\t} else if (callbackData === \"back\") {\r\n\t\t\tawait back({ userToSend, allMenusWithData, menus, instanceTelegram, resize_keyboard, one_time_keyboard, userListWithChatID });\r\n\t\t}\r\n\t\treturn;\r\n\t} catch (error: any) {\r\n\t\terror([\r\n\t\t\t{ text: \"Error subMenu:\", val: error.message },\r\n\t\t\t{ text: \"Stack\", val: error.stack },\r\n\t\t]);\r\n\t}\r\n}\r\n\r\nexport { subMenu, callSubMenu };\r\n"],
  "mappings": "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",
  "names": ["splittedData", "step", "error"]
}
