{
  "version": 3,
  "sources": ["../../src/lib/subMenu.ts"],
  "sourcesContent": ["import { switchBack } from './backMenu';\nimport { setState } from './setstate';\nimport { sendToTelegram, sendToTelegramSubmenu } from './telegram';\nimport { checkStatusInfo } from './utilities';\nimport { _subscribeAndUnSubscribeForeignStatesAsync } from './subscribeStates';\nimport { deleteMessageIds } from './messageIds';\nimport { dynamicSwitch } from './dynamicSwitch';\nimport { debug } from './logging';\nimport { error } from 'console';\nimport type {\n    SetStateIds,\n    SplittedData,\n    DeleteMessageIds,\n    SetDynamicValueType,\n    CreateSubmenuPercent,\n    ArrayOfEntriesDynamicSwitch,\n    Keyboard,\n    SetFirstMenuValue,\n    SetSecondMenuValue,\n    CreateSubmenuNumber,\n    CreateSwitchMenu,\n    SetValueForSubmenuPercent,\n    SetValueForSubmenuNumber,\n    BackMenuType,\n    NewObjectNavStructure,\n    UserListWithChatId,\n    Part,\n    NavPart,\n} from './telegram-menu';\nimport { parseJSON } from './global';\nimport { _this } from '../main';\n\nlet step = 0;\nlet returnIDToListenTo: SetStateIds[] = [];\nlet splittedData: SplittedData = [];\n\nconst getMenuValues = (obj: string[]): { callbackData: string; device: string; val: string } => {\n    const splitText = obj[0].split(':');\n\n    return { callbackData: splitText[1], device: splitText[2], val: splitText[3] };\n};\n\nconst deleteMessages = async (obj: DeleteMessageIds): Promise<{ navToGoBack: string } | undefined> => {\n    const navToGoBack = obj.device2Switch;\n    if (obj.callbackData.includes('deleteAll')) {\n        await deleteMessageIds(obj.userToSend, obj.userListWithChatID, obj.instanceTelegram, 'all');\n    }\n    if (navToGoBack && navToGoBack != '') {\n        return { navToGoBack: navToGoBack };\n    }\n    return;\n};\n\nconst setDynamicValue = async (obj: SetDynamicValueType): Promise<{ returnIds: SetStateIds[] }> => {\n    debug([{ text: 'SplittedData:', val: obj.val }]);\n\n    const result = await setState(\n        obj.part,\n        obj.userToSend,\n        obj.val,\n        true,\n        obj.instanceTelegram,\n        obj.resize_keyboard,\n        obj.one_time_keyboard,\n        obj.userListWithChatID,\n    );\n    if (Array.isArray(result)) {\n        returnIDToListenTo = result;\n    }\n    return {\n        returnIds: returnIDToListenTo,\n    };\n};\n\nconst createSubmenuPercent = (\n    obj: CreateSubmenuPercent,\n): { text: string | undefined; keyboard: string; device: string } => {\n    const callbackData = obj.callbackData;\n    const device2Switch = obj.device2Switch;\n    step = parseFloat(callbackData.replace('percent', ''));\n    let rowEntries = 0;\n    let menu: ArrayOfEntriesDynamicSwitch[] = [];\n    const keyboard: Keyboard = {\n        inline_keyboard: [],\n    };\n    for (let i = 100; i >= 0; i -= step) {\n        menu.push({\n            text: `${i}%`,\n            callback_data: `submenu:percent${step},${i}:${device2Switch}`,\n        });\n        if (i != 0 && i - step < 0) {\n            menu.push({\n                text: `0%`,\n                callback_data: `submenu:percent${step},${0}:${device2Switch}`,\n            });\n        }\n        rowEntries++;\n        if (rowEntries == 8) {\n            keyboard.inline_keyboard.push(menu);\n            menu = [];\n            rowEntries = 0;\n        }\n    }\n\n    if (rowEntries != 0) {\n        keyboard.inline_keyboard.push(menu);\n    }\n    return { text: obj.text, keyboard: JSON.stringify(keyboard), device: device2Switch };\n};\n\nconst setFirstMenuValue = async (obj: SetFirstMenuValue): Promise<{ returnIds: SetStateIds[] }> => {\n    let val;\n    debug([{ text: 'SplitData:', val: splittedData }]);\n    if (splittedData[1].split('.')[1] == 'false') {\n        val = false;\n    } else if (splittedData[1].split('.')[1] == 'true') {\n        val = true;\n    } else {\n        val = splittedData[1].split('.')[1];\n    }\n    const result = await setState(\n        obj.part,\n        obj.userToSend,\n        val as string,\n        true,\n        obj.instanceTelegram,\n        obj.resize_keyboard,\n        obj.one_time_keyboard,\n        obj.userListWithChatID,\n    );\n    if (Array.isArray(result)) {\n        returnIDToListenTo = result;\n    }\n    return { returnIds: returnIDToListenTo };\n};\n\nconst setSecondMenuValue = async (obj: SetSecondMenuValue): Promise<{ returnIds: SetStateIds[] }> => {\n    let val;\n    if (splittedData[2].split('.')[1] == 'false') {\n        val = false;\n    } else if (splittedData[2].split('.')[1] == 'true') {\n        val = true;\n    } else {\n        val = splittedData[2].split('.')[1];\n    }\n    const result = await setState(\n        obj.part,\n        obj.userToSend,\n        val as string,\n        true,\n        obj.instanceTelegram,\n        obj.one_time_keyboard,\n        obj.resize_keyboard,\n        obj.userListWithChatID,\n    );\n    if (Array.isArray(result)) {\n        returnIDToListenTo = result;\n    }\n    return { returnIds: returnIDToListenTo };\n};\n\nconst createSubmenuNumber = (\n    obj: CreateSubmenuNumber,\n): { text: string | undefined; keyboard: string; device: string } => {\n    let callbackData = obj.callbackData;\n    const device2Switch = obj.device2Switch;\n\n    if (callbackData.includes('(-)')) {\n        callbackData = callbackData.replace('(-)', 'negativ');\n    }\n    const splittedData = callbackData.replace('number', '').split('-');\n    let rowEntries = 0;\n    let menu: { text: string; callback_data: string }[] = [];\n    const keyboard = {\n        inline_keyboard: [] as any[],\n    };\n    let unit = '';\n    if (splittedData[3] != '') {\n        unit = splittedData[3];\n    }\n    let start: number, end: number;\n    const firstValueInText = parseFloat(\n        splittedData[0].includes('negativ') ? splittedData[0].replace('negativ', '-') : splittedData[0],\n    );\n    const secondValueInText = parseFloat(\n        splittedData[1].includes('negativ') ? splittedData[1].replace('negativ', '-') : splittedData[1],\n    );\n\n    if (firstValueInText < secondValueInText) {\n        start = secondValueInText;\n        end = firstValueInText;\n    } else {\n        start = firstValueInText;\n        end = secondValueInText;\n    }\n    let index = -1;\n\n    let maxEntriesPerRow = 8;\n    const step = parseFloat(\n        splittedData[2].includes('negativ') ? splittedData[2].replace('negativ', '-') : splittedData[2],\n    );\n    if (step < 1) {\n        maxEntriesPerRow = 6;\n    }\n\n    for (let i = start; i >= end; i -= step) {\n        // Zahlen umdrehen\n        if (parseFloat(splittedData[0]) < parseFloat(splittedData[1])) {\n            if (i === start) {\n                index = end - step;\n            }\n            index = index + step;\n        } else {\n            index = i;\n        }\n        menu.push({\n            text: `${index}${unit}`,\n            callback_data: `submenu:${callbackData}:${device2Switch}:${index}`,\n        });\n        rowEntries++;\n        if (rowEntries == maxEntriesPerRow) {\n            keyboard.inline_keyboard.push(menu);\n            menu = [];\n            rowEntries = 0;\n        }\n    }\n\n    if (rowEntries != 0) {\n        keyboard.inline_keyboard.push(menu);\n    }\n    debug([{ text: 'keyboard:', val: keyboard.inline_keyboard }]);\n    return { text: obj.text, keyboard: JSON.stringify(keyboard), device: device2Switch };\n};\n\nconst createSwitchMenu = (obj: CreateSwitchMenu): { text?: string; keyboard: string; device: string } => {\n    splittedData = obj.callbackData.split('-');\n    const keyboard = {\n        inline_keyboard: [\n            [\n                {\n                    text: splittedData[1].split('.')[0],\n                    callback_data: `menu:first:${obj.device2Switch}`,\n                },\n                {\n                    text: splittedData[2].split('.')[0],\n                    callback_data: `menu:second:${obj.device2Switch}`,\n                },\n            ],\n        ],\n    };\n    return { text: obj.text, keyboard: JSON.stringify(keyboard), device: obj.device2Switch };\n};\n\nconst setValueForSubmenuPercent = async (obj: SetValueForSubmenuPercent): Promise<{ returnIds: SetStateIds[] }> => {\n    const value = parseInt(obj.calledValue.split(':')[1].split(',')[1]);\n\n    const result = await setState(\n        obj.part,\n        obj.userToSend,\n        value,\n        true,\n        obj.instanceTelegram,\n        obj.resize_keyboard,\n        obj.one_time_keyboard,\n        obj.userListWithChatID,\n    );\n    if (Array.isArray(result)) {\n        returnIDToListenTo = result;\n    }\n    return { returnIds: returnIDToListenTo };\n};\n\nconst setValueForSubmenuNumber = async (\n    obj: SetValueForSubmenuNumber,\n): Promise<{ returnIds: SetStateIds[]; device2Switch: string }> => {\n    debug([{ text: 'CallbackData:', val: obj.callbackData }]);\n\n    const value = parseFloat(obj.calledValue.split(':')[3]);\n    const device2Switch = obj.calledValue.split(':')[2];\n\n    const result = await setState(\n        obj.part,\n        obj.userToSend,\n        value,\n        true,\n        obj.instanceTelegram,\n        obj.resize_keyboard,\n        obj.one_time_keyboard,\n        obj.userListWithChatID,\n    );\n    if (Array.isArray(result)) {\n        returnIDToListenTo = result;\n    }\n    return { returnIds: returnIDToListenTo, device2Switch };\n};\n\nconst back = async (obj: BackMenuType): Promise<void> => {\n    const result = await switchBack(obj.userToSend, obj.allMenusWithData, obj.menus);\n    if (result) {\n        await sendToTelegram(\n            obj.userToSend,\n            result.texttosend as string,\n            result.menuToSend,\n            obj.instanceTelegram,\n            obj.resize_keyboard,\n            obj.one_time_keyboard,\n            obj.userListWithChatID,\n            result.parseMode,\n        );\n    }\n};\nasync function callSubMenu(\n    jsonStringNav: string,\n    newObjectNavStructure: NewObjectNavStructure,\n    userToSend: string,\n    instanceTelegram: string,\n    resize_keyboard: boolean,\n    one_time_keyboard: boolean,\n    userListWithChatID: UserListWithChatId[],\n    part: Part,\n    allMenusWithData: { [key: string]: NewObjectNavStructure },\n    menus: string[],\n    setStateIdsToListenTo: SetStateIds[] | null,\n    navObj: NavPart,\n): Promise<{ setStateIdsToListenTo: SetStateIds[] | null; newNav: string | undefined } | undefined> {\n    try {\n        const obj = await subMenu({\n            jsonStringNav: jsonStringNav,\n            userToSend: userToSend,\n            instanceTelegram: instanceTelegram,\n            resize_keyboard: resize_keyboard,\n            one_time_keyboard: one_time_keyboard,\n            userListWithChatID: userListWithChatID,\n            part,\n            allMenusWithData: allMenusWithData,\n            menus,\n            navObj,\n        });\n        debug([{ text: 'Submenu data:', val: obj?.text }]);\n        debug([{ text: 'Submenu data:', val: obj?.keyboard }]);\n        debug([{ text: 'Submenu data:', val: obj?.device }]);\n        debug([{ text: 'Submenu data:', val: obj?.navToGoBack }]);\n\n        if (obj?.returnIds) {\n            setStateIdsToListenTo = obj.returnIds;\n\n            await _subscribeAndUnSubscribeForeignStatesAsync({ array: obj.returnIds });\n        }\n\n        if (obj?.text && obj?.keyboard) {\n            sendToTelegramSubmenu(\n                userToSend,\n                obj.text,\n                obj.keyboard,\n                instanceTelegram,\n                userListWithChatID,\n                part.parse_mode || 'false',\n            );\n        }\n        return { setStateIdsToListenTo: setStateIdsToListenTo, newNav: obj?.navToGoBack };\n    } catch (e: any) {\n        error({\n            array: [\n                { text: 'Error callSubMenu:', val: e.message },\n                { text: 'Stack:', val: e.stack },\n            ],\n        });\n    }\n}\n\nasync function subMenu({\n    jsonStringNav,\n    userToSend,\n    instanceTelegram,\n    resize_keyboard,\n    one_time_keyboard,\n    userListWithChatID,\n    part,\n    allMenusWithData,\n    menus,\n    navObj,\n}: {\n    jsonStringNav: string;\n    userToSend: string;\n    instanceTelegram: string;\n    resize_keyboard: boolean;\n    one_time_keyboard: boolean;\n    userListWithChatID: UserListWithChatId[];\n    part: Part;\n    allMenusWithData: { [p: string]: NewObjectNavStructure };\n    menus: string[];\n    navObj: NavPart;\n}): Promise<\n    { text?: string; keyboard?: string; device?: string; returnIds?: SetStateIds[]; navToGoBack?: string } | undefined\n> {\n    try {\n        _this.log.debug(`Menu : ${navObj[0][0]}`);\n\n        let text: string | undefined = '';\n        if (part?.text && part.text != '') {\n            text = await checkStatusInfo(part.text);\n        }\n\n        const called = parseJSON<NavPart>(jsonStringNav);\n        if (!called?.length) {\n            return;\n        }\n        const { callbackData, device: device2Switch, val } = getMenuValues(called[0]);\n\n        if (callbackData.includes('delete')) {\n            return await deleteMessages({\n                userToSend,\n                userListWithChatID,\n                instanceTelegram,\n                device2Switch,\n                callbackData,\n            });\n        } else if (callbackData.includes('switch')) {\n            return createSwitchMenu({ callbackData, text, device2Switch });\n        } else if (callbackData.includes('first')) {\n            return await setFirstMenuValue({\n                part,\n                userToSend,\n                instanceTelegram,\n                resize_keyboard,\n                one_time_keyboard,\n                userListWithChatID,\n            });\n        } else if (callbackData.includes('second')) {\n            return await setSecondMenuValue({\n                part,\n                userToSend,\n                instanceTelegram,\n                resize_keyboard,\n                one_time_keyboard,\n                userListWithChatID,\n            });\n        } else if (callbackData.includes('dynSwitch')) {\n            return dynamicSwitch(jsonStringNav, device2Switch, text as string);\n        } else if (callbackData.includes('dynS')) {\n            return await setDynamicValue({\n                val,\n                userToSend,\n                instanceTelegram,\n                resize_keyboard,\n                one_time_keyboard,\n                userListWithChatID,\n                part,\n            });\n        } else if (!jsonStringNav.includes('submenu') && callbackData.includes('percent')) {\n            return createSubmenuPercent({ callbackData, text, device2Switch });\n        } else if (jsonStringNav.includes(`submenu:percent${step}`)) {\n            return await setValueForSubmenuPercent({\n                callbackData,\n                calledValue: jsonStringNav,\n                userToSend,\n                instanceTelegram,\n                resize_keyboard,\n                one_time_keyboard,\n                userListWithChatID,\n                part,\n                allMenusWithData,\n                menus,\n            });\n        } else if (!jsonStringNav.includes('submenu') && callbackData.includes('number')) {\n            return createSubmenuNumber({ callbackData, text, device2Switch });\n        } else if (jsonStringNav.includes(`submenu:${callbackData}`)) {\n            const result = await setValueForSubmenuNumber({\n                callbackData,\n                calledValue: jsonStringNav,\n                userToSend,\n                instanceTelegram,\n                resize_keyboard,\n                one_time_keyboard,\n                userListWithChatID,\n                part,\n            });\n            // device2Switch = result.device2Switch;\n            return result.returnIds ? { returnIds: result.returnIds } : undefined;\n        } else if (callbackData === 'back') {\n            await back({\n                userToSend,\n                allMenusWithData,\n                menus,\n                instanceTelegram,\n                resize_keyboard,\n                one_time_keyboard,\n                userListWithChatID,\n            });\n        }\n        return;\n    } catch (error: any) {\n        error([\n            { text: 'Error subMenu:', val: error.message },\n            { text: 'Stack', val: error.stack },\n        ]);\n    }\n}\n\nexport { subMenu, callSubMenu };\n"],
  "mappings": "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",
  "names": ["splittedData", "step", "error"]
}
