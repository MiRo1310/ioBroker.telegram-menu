{
  "version": 3,
  "sources": ["../../src/lib/appUtils.ts"],
  "sourcesContent": ["import { config } from '../config/config';\nimport type { Adapter, GetTimeWithPad, MenusWithUsers, ParseModeType } from '../types/types';\nimport { decomposeText, removeQuotes } from './string';\nimport { evaluate } from './math';\nimport { isTruthy } from './utils';\n\nexport const checkOneLineValue = (text: string): string =>\n    !text.includes(config.rowSplitter) ? `${text} ${config.rowSplitter}` : text;\n\nexport function calcValue(\n    textToSend: string,\n    val: string,\n    adapter: Adapter,\n): { textToSend: string; val: any; error: boolean } {\n    const { substringExcludeSearch, textExcludeSubstring } = decomposeText(\n        textToSend,\n        config.math.start,\n        config.math.end,\n    );\n    const { val: evalVal, error } = evaluate([val, substringExcludeSearch], adapter);\n\n    return error\n        ? { textToSend: textExcludeSubstring, val, error }\n        : { textToSend: textExcludeSubstring, val: evalVal, error };\n}\n\nexport function roundValue(val: string, textToSend: string): { val: string; textToSend: string; error: boolean } {\n    const floatVal = parseFloat(val);\n    const { textExcludeSubstring, substringExcludeSearch: decimalPlaces } = decomposeText(\n        textToSend,\n        config.round.start,\n        config.round.end,\n    );\n    const decimalPlacesNum = parseInt(decimalPlaces);\n\n    if (isNaN(floatVal)) {\n        return { val: 'NaN', textToSend: textExcludeSubstring, error: true };\n    }\n    if (isNaN(decimalPlacesNum)) {\n        return { val, textToSend: textExcludeSubstring, error: true };\n    }\n\n    return { val: floatVal.toFixed(decimalPlacesNum), textToSend: textExcludeSubstring, error: false };\n}\n\nexport const getListOfMenusIncludingUser = (menusWithUsers: MenusWithUsers, userToSend: string): string[] => {\n    const menus: string[] = [];\n    for (const key in menusWithUsers) {\n        if (menusWithUsers[key].includes(userToSend)) {\n            menus.push(key);\n        }\n    }\n    return menus;\n};\n\nexport const getParseMode = (val = false): ParseModeType => (val ? 'HTML' : 'Markdown');\n\nexport const getTypeofTimestamp = (val: string): 'lc' | 'ts' => (val.includes('lc') ? 'lc' : 'ts');\n\nexport const timeStringReplacer = ({ d, h, m, ms, y, s, mo }: GetTimeWithPad, string?: string): string | undefined => {\n    if (string) {\n        string = string\n            .replace('sss', ms)\n            .replace('ss', s)\n            .replace('mm', m)\n            .replace('hh', h)\n            .replace('DD', d)\n            .replace('MM', mo)\n            .replace('YYYY', y)\n            .replace('YY', y.slice(-2))\n            .replace('(', '')\n            .replace(')', '');\n    }\n    return string;\n};\n\nexport function statusIdAndParams(substringExcludeSearch: string): { id: string; shouldChange: boolean } {\n    if (substringExcludeSearch.includes(config.status.oldWithId)) {\n        const splitArray = substringExcludeSearch.split(':');\n\n        return {\n            id: removeQuotes(splitArray[1]), //'id':'ID':true\n            shouldChange: isTruthy(removeQuotes(splitArray[2])),\n        };\n    }\n    const splitArray = substringExcludeSearch.split(':');\n\n    return {\n        id: removeQuotes(splitArray[0]), //'ID':true\n        shouldChange: isTruthy(removeQuotes(splitArray[1])),\n    };\n}\n\nexport function isStartside(startSide: string): boolean {\n    return startSide != '-' && startSide != '';\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAuB;AAEvB,oBAA4C;AAC5C,kBAAyB;AACzB,mBAAyB;AAElB,MAAM,oBAAoB,CAAC,SAC9B,CAAC,KAAK,SAAS,qBAAO,WAAW,IAAI,GAAG,IAAI,IAAI,qBAAO,WAAW,KAAK;AAEpE,SAAS,UACZ,YACA,KACA,SACgD;AAChD,QAAM,EAAE,wBAAwB,qBAAqB,QAAI;AAAA,IACrD;AAAA,IACA,qBAAO,KAAK;AAAA,IACZ,qBAAO,KAAK;AAAA,EAChB;AACA,QAAM,EAAE,KAAK,SAAS,MAAM,QAAI,sBAAS,CAAC,KAAK,sBAAsB,GAAG,OAAO;AAE/E,SAAO,QACD,EAAE,YAAY,sBAAsB,KAAK,MAAM,IAC/C,EAAE,YAAY,sBAAsB,KAAK,SAAS,MAAM;AAClE;AAEO,SAAS,WAAW,KAAa,YAAyE;AAC7G,QAAM,WAAW,WAAW,GAAG;AAC/B,QAAM,EAAE,sBAAsB,wBAAwB,cAAc,QAAI;AAAA,IACpE;AAAA,IACA,qBAAO,MAAM;AAAA,IACb,qBAAO,MAAM;AAAA,EACjB;AACA,QAAM,mBAAmB,SAAS,aAAa;AAE/C,MAAI,MAAM,QAAQ,GAAG;AACjB,WAAO,EAAE,KAAK,OAAO,YAAY,sBAAsB,OAAO,KAAK;AAAA,EACvE;AACA,MAAI,MAAM,gBAAgB,GAAG;AACzB,WAAO,EAAE,KAAK,YAAY,sBAAsB,OAAO,KAAK;AAAA,EAChE;AAEA,SAAO,EAAE,KAAK,SAAS,QAAQ,gBAAgB,GAAG,YAAY,sBAAsB,OAAO,MAAM;AACrG;AAEO,MAAM,8BAA8B,CAAC,gBAAgC,eAAiC;AACzG,QAAM,QAAkB,CAAC;AACzB,aAAW,OAAO,gBAAgB;AAC9B,QAAI,eAAe,GAAG,EAAE,SAAS,UAAU,GAAG;AAC1C,YAAM,KAAK,GAAG;AAAA,IAClB;AAAA,EACJ;AACA,SAAO;AACX;AAEO,MAAM,eAAe,CAAC,MAAM,UAA0B,MAAM,SAAS;AAErE,MAAM,qBAAqB,CAAC,QAA8B,IAAI,SAAS,IAAI,IAAI,OAAO;AAEtF,MAAM,qBAAqB,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAmB,WAAwC;AAClH,MAAI,QAAQ;AACR,aAAS,OACJ,QAAQ,OAAO,EAAE,EACjB,QAAQ,MAAM,CAAC,EACf,QAAQ,MAAM,CAAC,EACf,QAAQ,MAAM,CAAC,EACf,QAAQ,MAAM,CAAC,EACf,QAAQ,MAAM,EAAE,EAChB,QAAQ,QAAQ,CAAC,EACjB,QAAQ,MAAM,EAAE,MAAM,EAAE,CAAC,EACzB,QAAQ,KAAK,EAAE,EACf,QAAQ,KAAK,EAAE;AAAA,EACxB;AACA,SAAO;AACX;AAEO,SAAS,kBAAkB,wBAAuE;AACrG,MAAI,uBAAuB,SAAS,qBAAO,OAAO,SAAS,GAAG;AAC1D,UAAMA,cAAa,uBAAuB,MAAM,GAAG;AAEnD,WAAO;AAAA,MACH,QAAI,4BAAaA,YAAW,CAAC,CAAC;AAAA;AAAA,MAC9B,kBAAc,2BAAS,4BAAaA,YAAW,CAAC,CAAC,CAAC;AAAA,IACtD;AAAA,EACJ;AACA,QAAM,aAAa,uBAAuB,MAAM,GAAG;AAEnD,SAAO;AAAA,IACH,QAAI,4BAAa,WAAW,CAAC,CAAC;AAAA;AAAA,IAC9B,kBAAc,2BAAS,4BAAa,WAAW,CAAC,CAAC,CAAC;AAAA,EACtD;AACJ;AAEO,SAAS,YAAY,WAA4B;AACpD,SAAO,aAAa,OAAO,aAAa;AAC5C;",
  "names": ["splitArray"]
}
