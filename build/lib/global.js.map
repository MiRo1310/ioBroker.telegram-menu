{
  "version": 3,
  "sources": ["../../src/lib/global.ts"],
  "sourcesContent": ["import type { DecomposeText } from './telegram-menu';\n\nfunction deleteDoubleEntriesInArray(arr: string[]): string[] {\n    return arr.filter((item, index) => arr.indexOf(item) === index);\n}\n\nfunction replaceAll(text: string, searchValue: string, replaceValue: string): string {\n    return text.replace(new RegExp(searchValue, 'g'), replaceValue);\n}\n\nfunction isJSON(_string: string): boolean {\n    try {\n        JSON.parse(_string);\n        return true;\n    } catch (error) {\n        console.error([{ text: 'Error:', val: error }]);\n        return false;\n    }\n}\n\nfunction decomposeText(text: string, searchValue: string, secondValue: string): DecomposeText {\n    const startindex = text.indexOf(searchValue);\n    const endindex = text.indexOf(secondValue, startindex);\n    const substring = text.substring(startindex, endindex + secondValue.length);\n    const textWithoutSubstring = text.replace(substring, '').trim();\n    return {\n        startindex: startindex,\n        endindex: endindex,\n        substring: substring,\n        textWithoutSubstring: textWithoutSubstring,\n    };\n}\n\nexport const deepCopy = <T>(obj: T): T | undefined => {\n    try {\n        return JSON.parse(JSON.stringify(obj));\n    } catch (err) {\n        console.error(`Error deepCopy: ${JSON.stringify(err)}`);\n    }\n};\n\nexport function isString(value: unknown): value is string {\n    return typeof value === 'string';\n}\n\nexport { deleteDoubleEntriesInArray, replaceAll, isJSON, decomposeText };\n\nexport function isFalsy(value: string | number | boolean | undefined | null): boolean {\n    return ['0', 0, false, 'false', undefined, null].includes(value);\n}\n\nexport function isDefined<T>(value: T | null | undefined): value is T {\n    return value !== null && value !== undefined;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,SAAS,2BAA2B,KAAyB;AACzD,SAAO,IAAI,OAAO,CAAC,MAAM,UAAU,IAAI,QAAQ,IAAI,MAAM,KAAK;AAClE;AAEA,SAAS,WAAW,MAAc,aAAqB,cAA8B;AACjF,SAAO,KAAK,QAAQ,IAAI,OAAO,aAAa,GAAG,GAAG,YAAY;AAClE;AAEA,SAAS,OAAO,SAA0B;AACtC,MAAI;AACA,SAAK,MAAM,OAAO;AAClB,WAAO;AAAA,EACX,SAAS,OAAO;AACZ,YAAQ,MAAM,CAAC,EAAE,MAAM,UAAU,KAAK,MAAM,CAAC,CAAC;AAC9C,WAAO;AAAA,EACX;AACJ;AAEA,SAAS,cAAc,MAAc,aAAqB,aAAoC;AAC1F,QAAM,aAAa,KAAK,QAAQ,WAAW;AAC3C,QAAM,WAAW,KAAK,QAAQ,aAAa,UAAU;AACrD,QAAM,YAAY,KAAK,UAAU,YAAY,WAAW,YAAY,MAAM;AAC1E,QAAM,uBAAuB,KAAK,QAAQ,WAAW,EAAE,EAAE,KAAK;AAC9D,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ;AAEO,MAAM,WAAW,CAAI,QAA0B;AAClD,MAAI;AACA,WAAO,KAAK,MAAM,KAAK,UAAU,GAAG,CAAC;AAAA,EACzC,SAAS,KAAK;AACV,YAAQ,MAAM,mBAAmB,KAAK,UAAU,GAAG,CAAC,EAAE;AAAA,EAC1D;AACJ;AAEO,SAAS,SAAS,OAAiC;AACtD,SAAO,OAAO,UAAU;AAC5B;AAIO,SAAS,QAAQ,OAA8D;AAClF,SAAO,CAAC,KAAK,GAAG,OAAO,SAAS,QAAW,IAAI,EAAE,SAAS,KAAK;AACnE;AAEO,SAAS,UAAa,OAAyC;AAClE,SAAO,UAAU,QAAQ,UAAU;AACvC;",
  "names": []
}
