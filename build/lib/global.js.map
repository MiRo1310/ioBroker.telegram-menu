{
  "version": 3,
  "sources": ["../../src/lib/global.ts"],
  "sourcesContent": ["function deleteDoubleEntriesInArray(arr: string[]): string[] {\r\n\treturn arr.filter((item, index) => arr.indexOf(item) === index);\r\n}\r\n\r\nfunction replaceAll(text: string, searchValue: string, replaceValue: string): string {\r\n\treturn text.replace(new RegExp(searchValue, \"g\"), replaceValue);\r\n}\r\n\r\nfunction isJSON(_string: string): boolean {\r\n\ttry {\r\n\t\tJSON.parse(_string);\r\n\t\treturn true;\r\n\t} catch (error) {\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nfunction decomposeText(text: string, searchValue: string, secondValue: string): DecomposeText {\r\n\tconst startindex = text.indexOf(searchValue);\r\n\tconst endindex = text.indexOf(secondValue, startindex);\r\n\tconst substring = text.substring(startindex, endindex + secondValue.length);\r\n\tconst textWithoutSubstring = text.replace(substring, \"\").trim();\r\n\treturn {\r\n\t\tstartindex: startindex,\r\n\t\tendindex: endindex,\r\n\t\tsubstring: substring,\r\n\t\ttextWithoutSubstring: textWithoutSubstring,\r\n\t};\r\n}\r\n\r\nexport { deleteDoubleEntriesInArray, replaceAll, isJSON, decomposeText };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAS,2BAA2B,KAAyB;AAC5D,SAAO,IAAI,OAAO,CAAC,MAAM,UAAU,IAAI,QAAQ,IAAI,MAAM,KAAK;AAC/D;AAEA,SAAS,WAAW,MAAc,aAAqB,cAA8B;AACpF,SAAO,KAAK,QAAQ,IAAI,OAAO,aAAa,GAAG,GAAG,YAAY;AAC/D;AAEA,SAAS,OAAO,SAA0B;AACzC,MAAI;AACH,SAAK,MAAM,OAAO;AAClB,WAAO;AAAA,EACR,SAAS,OAAP;AACD,WAAO;AAAA,EACR;AACD;AAEA,SAAS,cAAc,MAAc,aAAqB,aAAoC;AAC7F,QAAM,aAAa,KAAK,QAAQ,WAAW;AAC3C,QAAM,WAAW,KAAK,QAAQ,aAAa,UAAU;AACrD,QAAM,YAAY,KAAK,UAAU,YAAY,WAAW,YAAY,MAAM;AAC1E,QAAM,uBAAuB,KAAK,QAAQ,WAAW,EAAE,EAAE,KAAK;AAC9D,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACD;",
  "names": []
}
