{
  "version": 3,
  "sources": ["../../src/lib/dynamicValue.ts"],
  "sourcesContent": ["import { decomposeText } from \"./utilities\";\r\nimport { sendToTelegram } from \"./telegram\";\r\nconst setDynamicValueObj: SetDynamicValueObj = {};\r\nconst setDynamicValue = (\r\n\treturnText: string,\r\n\tack: boolean,\r\n\tid: string,\r\n\tuserToSend: string,\r\n\ttelegramInstance: string,\r\n\tone_time_keyboard: boolean,\r\n\tresize_keyboard: boolean,\r\n\tuserListWithChatID: UserListWithChatId[],\r\n\tparse_mode: BooleanString,\r\n\tconfirm: string,\r\n): { confirmText: string; id: string | undefined } => {\r\n\tconst { substring } = decomposeText(returnText, \"{setDynamicValue:\", \"}\");\r\n\tlet array = substring.split(\":\");\r\n\tarray = isBraceDeleteEntry(array);\r\n\tconst text = array[1];\r\n\tif (text) {\r\n\t\tsendToTelegram(userToSend, text, undefined, telegramInstance, resize_keyboard, one_time_keyboard, userListWithChatID, parse_mode);\r\n\t}\r\n\tsetDynamicValueObj[userToSend] = {\r\n\t\tid: id,\r\n\t\tack: ack,\r\n\t\treturnText: text,\r\n\t\tuserToSend: userToSend,\r\n\t\tparse_mode: parse_mode,\r\n\t\tconfirm: confirm,\r\n\t\ttelegramInstance: telegramInstance,\r\n\t\tone_time_keyboard: one_time_keyboard,\r\n\t\tresize_keyboard: resize_keyboard,\r\n\t\tuserListWithChatID: userListWithChatID,\r\n\t\tvalueType: array[2],\r\n\t};\r\n\r\n\tif (array[3] && array[3] != \"\") {\r\n\t\treturn { confirmText: array[3], id: array[4] };\r\n\t}\r\n\treturn { confirmText: \"\", id: undefined };\r\n};\r\n\r\nconst getDynamicValue = (userToSend: string): SetDynamicValue | null => {\r\n\tif (setDynamicValueObj[userToSend]) {\r\n\t\treturn setDynamicValueObj[userToSend];\r\n\t}\r\n\treturn null;\r\n};\r\nconst removeUserFromDynamicValue = (userToSend: string): boolean => {\r\n\tif (setDynamicValueObj[userToSend]) {\r\n\t\tdelete setDynamicValueObj[userToSend];\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n};\r\nexport { setDynamicValue, getDynamicValue, removeUserFromDynamicValue };\r\n\r\nfunction isBraceDeleteEntry(array: string[]): string[] {\r\n\tif (array[4] === \"}\") {\r\n\t\treturn array.slice(0, 4);\r\n\t}\r\n\treturn array;\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAA8B;AAC9B,sBAA+B;AAC/B,MAAM,qBAAyC,CAAC;AAChD,MAAM,kBAAkB,CACvB,YACA,KACA,IACA,YACA,kBACA,mBACA,iBACA,oBACA,YACA,YACqD;AACrD,QAAM,EAAE,UAAU,QAAI,gCAAc,YAAY,qBAAqB,GAAG;AACxE,MAAI,QAAQ,UAAU,MAAM,GAAG;AAC/B,UAAQ,mBAAmB,KAAK;AAChC,QAAM,OAAO,MAAM;AACnB,MAAI,MAAM;AACT,wCAAe,YAAY,MAAM,QAAW,kBAAkB,iBAAiB,mBAAmB,oBAAoB,UAAU;AAAA,EACjI;AACA,qBAAmB,cAAc;AAAA,IAChC;AAAA,IACA;AAAA,IACA,YAAY;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAW,MAAM;AAAA,EAClB;AAEA,MAAI,MAAM,MAAM,MAAM,MAAM,IAAI;AAC/B,WAAO,EAAE,aAAa,MAAM,IAAI,IAAI,MAAM,GAAG;AAAA,EAC9C;AACA,SAAO,EAAE,aAAa,IAAI,IAAI,OAAU;AACzC;AAEA,MAAM,kBAAkB,CAAC,eAA+C;AACvE,MAAI,mBAAmB,aAAa;AACnC,WAAO,mBAAmB;AAAA,EAC3B;AACA,SAAO;AACR;AACA,MAAM,6BAA6B,CAAC,eAAgC;AACnE,MAAI,mBAAmB,aAAa;AACnC,WAAO,mBAAmB;AAC1B,WAAO;AAAA,EACR;AACA,SAAO;AACR;AAGA,SAAS,mBAAmB,OAA2B;AACtD,MAAI,MAAM,OAAO,KAAK;AACrB,WAAO,MAAM,MAAM,GAAG,CAAC;AAAA,EACxB;AACA,SAAO;AACR;",
  "names": []
}
