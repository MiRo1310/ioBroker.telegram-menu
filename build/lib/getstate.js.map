{
  "version": 3,
  "sources": ["../../src/lib/getstate.ts"],
  "sourcesContent": ["import { sendToTelegram, sendToTelegramSubmenu } from \"./telegram\";\r\nimport { bindingFunc, roundValue, calcValue, idBySelector } from \"./action\";\r\nimport { createKeyboardFromJson, createTextTableFromJson } from \"./jsonTable\";\r\nimport { processTimeIdLc, processTimeValue, changeValue } from \"./utilities\";\r\nimport { decomposeText } from \"./global\";\r\nimport { debug } from \"./logging\";\r\nimport TelegramMenu from \"../main\";\r\n\r\nfunction getState(\r\n\tpart: Part,\r\n\tuserToSend: string,\r\n\ttelegramInstance: string,\r\n\tone_time_keyboard: boolean,\r\n\tresize_keyboard: boolean,\r\n\tuserListWithChatID: UserListWithChatId[],\r\n): void {\r\n\tconst _this = TelegramMenu.getInstance();\r\n\tlet text = \"\";\r\n\tlet i = 1;\r\n\t// Parse Mode ist nur immer im ersten Element\r\n\tconst parse_mode = part.getData?.[0].parse_mode || \"false\";\r\n\r\n\tpart.getData?.forEach(async (element) => {\r\n\t\ttry {\r\n\t\t\tdebug([{ text: \"Get Value ID:\", val: element.id }]);\r\n\t\t\tconst specificatedSelektor = \"functions=\";\r\n\t\t\tconst id = element.id;\r\n\t\t\tlet textToSend = \"\";\r\n\r\n\t\t\tif (id.indexOf(specificatedSelektor) != -1) {\r\n\t\t\t\tidBySelector(\r\n\t\t\t\t\t_this,\r\n\t\t\t\t\tid,\r\n\t\t\t\t\telement.text,\r\n\t\t\t\t\tuserToSend,\r\n\t\t\t\t\telement.newline,\r\n\t\t\t\t\ttelegramInstance,\r\n\t\t\t\t\tone_time_keyboard,\r\n\t\t\t\t\tresize_keyboard,\r\n\t\t\t\t\tuserListWithChatID,\r\n\t\t\t\t);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (element.text.includes(\"binding:\")) {\r\n\t\t\t\tdebug([{ text: \"Binding\" }]);\r\n\t\t\t\tbindingFunc(element.text, userToSend, telegramInstance, one_time_keyboard, resize_keyboard, userListWithChatID, parse_mode);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t_this.getForeignStateAsync(id).then(async (value: ioBroker.State | null | undefined) => {\r\n\t\t\t\tif (!value) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tconst valueForJson: string = value.val?.toString() || \"\";\r\n\t\t\t\tdebug([{ text: \"State:\", val: value }]);\r\n\r\n\t\t\t\tlet val: string | number = JSON.stringify(value.val);\r\n\t\t\t\tval = val.replace(/\\\\/g, \"\").replace(/\"/g, \"\");\r\n\r\n\t\t\t\tlet newline = \"\";\r\n\t\t\t\tif (element.newline === \"true\") {\r\n\t\t\t\t\tnewline = \"\\n\";\r\n\t\t\t\t}\r\n\t\t\t\tif (element.text) {\r\n\t\t\t\t\ttextToSend = element.text.toString();\r\n\t\t\t\t\tif (element.text.includes(\"{time.lc\") || element.text.includes(\"{time.ts\")) {\r\n\t\t\t\t\t\ttextToSend = (await processTimeIdLc(element.text, id)) || \"\";\r\n\t\t\t\t\t\tval = \"\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (textToSend.includes(\"{time}\")) {\r\n\t\t\t\t\t\ttextToSend = processTimeValue(textToSend, value);\r\n\t\t\t\t\t\tval = \"\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (textToSend.includes(\"math:\")) {\r\n\t\t\t\t\t\tconst result = calcValue(_this, textToSend, val);\r\n\t\t\t\t\t\tif (result) {\r\n\t\t\t\t\t\t\ttextToSend = result.textToSend;\r\n\t\t\t\t\t\t\tval = result.val;\r\n\t\t\t\t\t\t\t_this.log.debug(JSON.stringify({ textToSend: textToSend, val: val }));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (textToSend.includes(\"round:\")) {\r\n\t\t\t\t\t\tconst result = roundValue(val, textToSend);\r\n\t\t\t\t\t\tif (result) {\r\n\t\t\t\t\t\t\t_this.log.debug(\"The Value was rounded \" + JSON.stringify(val) + \" to \" + JSON.stringify(result.val));\r\n\t\t\t\t\t\t\tval = result.val;\r\n\t\t\t\t\t\t\ttextToSend = result.textToSend;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (textToSend.includes(\"{json\")) {\r\n\t\t\t\t\t\tif (decomposeText(textToSend, \"{json\", \"}\").substring.includes(\"TextTable\")) {\r\n\t\t\t\t\t\t\tconst result = await createTextTableFromJson(valueForJson, textToSend);\r\n\t\t\t\t\t\t\tif (result) {\r\n\t\t\t\t\t\t\t\tsendToTelegram(\r\n\t\t\t\t\t\t\t\t\tuserToSend,\r\n\t\t\t\t\t\t\t\t\tresult,\r\n\t\t\t\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\t\t\t\ttelegramInstance,\r\n\t\t\t\t\t\t\t\t\tone_time_keyboard,\r\n\t\t\t\t\t\t\t\t\tresize_keyboard,\r\n\t\t\t\t\t\t\t\t\tuserListWithChatID,\r\n\t\t\t\t\t\t\t\t\tparse_mode,\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t_this.log.debug(\"Cannot create a Text-Table\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconst result = createKeyboardFromJson(valueForJson, textToSend, element.id, userToSend);\r\n\t\t\t\t\t\t\tif (valueForJson && valueForJson.length > 0) {\r\n\t\t\t\t\t\t\t\tif (result && result.text && result.keyboard) {\r\n\t\t\t\t\t\t\t\t\tsendToTelegramSubmenu(userToSend, result.text, result.keyboard, telegramInstance, userListWithChatID, parse_mode);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tsendToTelegram(\r\n\t\t\t\t\t\t\t\t\tuserToSend,\r\n\t\t\t\t\t\t\t\t\t\"The state is empty!\",\r\n\t\t\t\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\t\t\t\ttelegramInstance,\r\n\t\t\t\t\t\t\t\t\tone_time_keyboard,\r\n\t\t\t\t\t\t\t\t\tresize_keyboard,\r\n\t\t\t\t\t\t\t\t\tuserListWithChatID,\r\n\t\t\t\t\t\t\t\t\tparse_mode,\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t_this.log.debug(\"The state is empty!\");\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst resultChange = changeValue(textToSend, val);\r\n\r\n\t\t\t\t\tif (resultChange) {\r\n\t\t\t\t\t\tdebug([{ text: \"Value Changed to:\", val: resultChange }]);\r\n\t\t\t\t\t\tval = resultChange[\"val\"];\r\n\t\t\t\t\t\ttextToSend = resultChange[\"textToSend\"];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tdebug([{ text: \"No Change\" }]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (textToSend.indexOf(\"&&\") != -1) {\r\n\t\t\t\t\t\ttext += `${textToSend.replace(\"&&\", val.toString())}${newline}`;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttext += textToSend + \" \" + val + newline;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttext += `${val} ${newline}`;\r\n\t\t\t\t}\r\n\t\t\t\tdebug([{ text: \"Text:\", val: text }]);\r\n\r\n\t\t\t\tif (i == part.getData?.length) {\r\n\t\t\t\t\tif (userToSend) {\r\n\t\t\t\t\t\tsendToTelegram(\r\n\t\t\t\t\t\t\tuserToSend,\r\n\t\t\t\t\t\t\ttext,\r\n\t\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\t\ttelegramInstance,\r\n\t\t\t\t\t\t\tone_time_keyboard,\r\n\t\t\t\t\t\t\tresize_keyboard,\r\n\t\t\t\t\t\t\tuserListWithChatID,\r\n\t\t\t\t\t\t\tparse_mode,\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\t\t\t});\r\n\t\t} catch (error: any) {\r\n\t\t\terror({\r\n\t\t\t\tarray: [\r\n\t\t\t\t\t{ text: \"Error GetData:\", val: error.message },\r\n\t\t\t\t\t{ text: \"Stack:\", val: error.stack },\r\n\t\t\t\t],\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n}\r\n\r\nexport { getState };\r\n"],
  "mappings": "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",
  "names": ["TelegramMenu", "_a", "_b"]
}
