{
  "version": 3,
  "sources": ["../../src/lib/exchangeValue.ts"],
  "sourcesContent": ["import { decomposeText, parseJSON, removeMultiSpaces, replaceAll } from '@b/lib/string';\nimport type { Adapter, ExchangeValueReturn, PrimitiveType } from '@b/types/types';\nimport { config } from '@b/config/config';\n\nexport function isNoValueParameter(textToSend: string): { insertValue: boolean; textToSend: string } {\n    let insertValue = true;\n    if (textToSend.includes('{novalue}')) {\n        textToSend = removeMultiSpaces(textToSend.replace('{novalue}', ''));\n        insertValue = false;\n    }\n    return { insertValue, textToSend };\n}\n\nexport const exchangeValue = (\n    adapter: Adapter,\n    textToSend: string,\n    val: PrimitiveType | null | undefined,\n    shouldChange = true,\n): ExchangeValueReturn => {\n    const result = isNoValueParameter(textToSend);\n\n    textToSend = result.textToSend;\n    if (textToSend.includes(config.change.start) && shouldChange) {\n        const { start, end, command } = config.change;\n        const { substring, textExcludeSubstring } = decomposeText(textToSend, start, end); // change{\"true\":\"an\",\"false\":\"aus\"}\n\n        const stringExcludedChange = replaceAll(substring, \"'\", '\"').replace(command, ''); // {\"true\":\"an\",\"false\":\"aus\"}\n\n        const { json, isValidJson } = parseJSON<Record<string, string>>(stringExcludedChange);\n        if (isValidJson) {\n            const newValue = json[String(val)] ?? val;\n\n            return {\n                newValue,\n                textToSend: removeMultiSpaces(\n                    exchangePlaceholderWithValue(textExcludeSubstring, result.insertValue ? newValue : ''),\n                ),\n                error: false,\n            };\n        }\n        adapter.log.error(`There is a error in your input: ${stringExcludedChange}`);\n        return { newValue: val ?? '', textToSend, error: true };\n    }\n\n    return {\n        textToSend: exchangePlaceholderWithValue(textToSend, result.insertValue ? (val ?? '') : ''),\n        newValue: val ?? '',\n        error: false,\n    };\n};\n\nexport function exchangePlaceholderWithValue(textToSend: string, val: PrimitiveType): string {\n    const searchString = getPlaceholderValue(textToSend);\n    return searchString !== ''\n        ? textToSend.replace(searchString, val.toString()).trim()\n        : `${textToSend} ${val}`.trim();\n}\n\nexport function getPlaceholderValue(textToSend: string): string {\n    if (textToSend.includes('&&')) {\n        return '&&';\n    }\n    if (textToSend.includes('&amp;&amp;')) {\n        return '&amp;&amp;';\n    }\n    return '';\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAwE;AAExE,oBAAuB;AAEhB,SAAS,mBAAmB,YAAkE;AACjG,MAAI,cAAc;AAClB,MAAI,WAAW,SAAS,WAAW,GAAG;AAClC,qBAAa,iCAAkB,WAAW,QAAQ,aAAa,EAAE,CAAC;AAClE,kBAAc;AAAA,EAClB;AACA,SAAO,EAAE,aAAa,WAAW;AACrC;AAEO,MAAM,gBAAgB,CACzB,SACA,YACA,KACA,eAAe,SACO;AAlB1B;AAmBI,QAAM,SAAS,mBAAmB,UAAU;AAE5C,eAAa,OAAO;AACpB,MAAI,WAAW,SAAS,qBAAO,OAAO,KAAK,KAAK,cAAc;AAC1D,UAAM,EAAE,OAAO,KAAK,QAAQ,IAAI,qBAAO;AACvC,UAAM,EAAE,WAAW,qBAAqB,QAAI,6BAAc,YAAY,OAAO,GAAG;AAEhF,UAAM,2BAAuB,0BAAW,WAAW,KAAK,GAAG,EAAE,QAAQ,SAAS,EAAE;AAEhF,UAAM,EAAE,MAAM,YAAY,QAAI,yBAAkC,oBAAoB;AACpF,QAAI,aAAa;AACb,YAAM,YAAW,UAAK,OAAO,GAAG,CAAC,MAAhB,YAAqB;AAEtC,aAAO;AAAA,QACH;AAAA,QACA,gBAAY;AAAA,UACR,6BAA6B,sBAAsB,OAAO,cAAc,WAAW,EAAE;AAAA,QACzF;AAAA,QACA,OAAO;AAAA,MACX;AAAA,IACJ;AACA,YAAQ,IAAI,MAAM,mCAAmC,oBAAoB,EAAE;AAC3E,WAAO,EAAE,UAAU,oBAAO,IAAI,YAAY,OAAO,KAAK;AAAA,EAC1D;AAEA,SAAO;AAAA,IACH,YAAY,6BAA6B,YAAY,OAAO,cAAe,oBAAO,KAAM,EAAE;AAAA,IAC1F,UAAU,oBAAO;AAAA,IACjB,OAAO;AAAA,EACX;AACJ;AAEO,SAAS,6BAA6B,YAAoB,KAA4B;AACzF,QAAM,eAAe,oBAAoB,UAAU;AACnD,SAAO,iBAAiB,KAClB,WAAW,QAAQ,cAAc,IAAI,SAAS,CAAC,EAAE,KAAK,IACtD,GAAG,UAAU,IAAI,GAAG,GAAG,KAAK;AACtC;AAEO,SAAS,oBAAoB,YAA4B;AAC5D,MAAI,WAAW,SAAS,IAAI,GAAG;AAC3B,WAAO;AAAA,EACX;AACA,MAAI,WAAW,SAAS,YAAY,GAAG;AACnC,WAAO;AAAA,EACX;AACA,SAAO;AACX;",
  "names": []
}
