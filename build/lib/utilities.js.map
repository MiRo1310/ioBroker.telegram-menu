{
  "version": 3,
  "sources": ["../../src/lib/utilities.ts"],
  "sourcesContent": ["import { isDefined, isTruthy } from './utils';\nimport { decomposeText, getValueToExchange, isEmptyString, jsonString, replaceAllItems } from './string';\nimport { errorLogger } from '../app/logging';\nimport { extractTimeValues, getTimeWithPad, integrateTimeIntoText } from './time';\nimport { adapter } from '../main';\nimport { config } from '../config/config';\nimport { isSameType, statusIdAndParams, timeStringReplacer } from './appUtils';\nimport { setstateIobroker } from '../app/setstate';\nimport { getProcessTimeValues } from './splitValues';\n\nexport const processTimeIdLc = async (textToSend: string, id?: string): Promise<string> => {\n    const { substring, substringExcludeSearch } = decomposeText(\n        textToSend,\n        config.timestamp.start,\n        config.timestamp.end,\n    ); //{time.lc,(DD MM YYYY hh:mm:ss:sss),id:'ID'}\n    const { typeofTimestamp, timeString, idString } = getProcessTimeValues(substringExcludeSearch);\n\n    if (!id && (!idString || idString.length < 5)) {\n        return textToSend.replace(substring, 'Invalid ID');\n    }\n    const value = await adapter.getForeignStateAsync(id ?? idString);\n\n    if (!value) {\n        return textToSend.replace(substring, 'Invalid ID');\n    }\n    const timeStringUser = replaceAllItems(timeString, [',(', ')', '}']); //\"(DD MM YYYY hh:mm:ss:sss)\"\n    const unixTs = value[typeofTimestamp];\n\n    const timeWithPad = getTimeWithPad(extractTimeValues(unixTs));\n    const timeStringReplaced = timeStringReplacer(timeWithPad, timeStringUser);\n\n    return timeStringReplaced ?? textToSend;\n};\n\n// TODO Check Usage of function\nexport const checkStatus = async (text: string): Promise<string> => {\n    const { substring, substringExcludeSearch, textExcludeSubstring } = decomposeText(\n        text,\n        config.status.start,\n        config.status.end,\n    ); //substring {status:'ID':true} new | old {status:'id':'ID':true}\n\n    const { id, shouldChange } = statusIdAndParams(substringExcludeSearch);\n\n    const stateValue = await adapter.getForeignStateAsync(id);\n\n    if (!isDefined(stateValue?.val)) {\n        adapter.log.debug(`State not found: ${id}`);\n        return text.replace(substring, '');\n    }\n\n    const stateValueString = String(stateValue.val);\n\n    if (text.includes(config.time)) {\n        return integrateTimeIntoText(textExcludeSubstring, stateValueString).replace(stateValueString, '');\n    }\n\n    if (!shouldChange) {\n        return text.replace(substring, stateValueString);\n    }\n\n    const { newValue: val, textToSend, error } = getValueToExchange(adapter, text, stateValue.val);\n\n    return (!error ? textToSend : text).replace(substring, !error ? val.toString() : stateValueString);\n};\n\nexport const checkStatusInfo = async (text?: string): Promise<string> => {\n    if (!text) {\n        return '';\n    }\n    try {\n        adapter.log.debug(`Check status Info: ${text}`);\n\n        if (text.includes(config.status.start)) {\n            while (text.includes(config.status.start)) {\n                text = await checkStatus(text);\n            }\n        }\n        if (text.includes(config.timestamp.lc) || text.includes(config.timestamp.ts)) {\n            text = await processTimeIdLc(text);\n        }\n        if (text.includes(config.set.start)) {\n            const { substring, textExcludeSubstring } = decomposeText(text, config.set.start, config.set.end);\n            const id = substring.split(',')[0].replace(\"{set:'id':\", '').replace(/'/g, '');\n            const importedValue = substring.split(',')[1];\n\n            text = textExcludeSubstring;\n            const convertedValue = await transformValueToTypeOfId(id, importedValue);\n\n            const ack = substring.split(',')[2].replace('}', '') == 'true';\n\n            if (isEmptyString(text)) {\n                text = 'W\u00E4hle eine Aktion';\n            }\n            if (convertedValue) {\n                await setstateIobroker({ id, value: convertedValue, ack });\n            }\n        }\n        adapter.log.debug(`CheckStatusInfo: ${text}`);\n        return text;\n    } catch (e: any) {\n        errorLogger('Error checkStatusInfo:', e, adapter);\n        return '';\n    }\n};\n\nexport async function transformValueToTypeOfId(\n    id: string,\n    value: ioBroker.StateValue,\n): Promise<ioBroker.StateValue | undefined> {\n    try {\n        const receivedType = typeof value;\n        const obj = await adapter.getForeignObjectAsync(id);\n\n        if (!obj || !isDefined(value) || isSameType(receivedType, obj)) {\n            return value;\n        }\n\n        adapter.log.debug(`Change Value type from \"${receivedType}\" to \"${obj.common.type}\"`);\n\n        switch (obj.common.type) {\n            case 'string':\n                return String(value);\n            case 'number':\n                return typeof value === 'string' ? parseFloat(value) : parseFloat(jsonString(value));\n            case 'boolean':\n                return isTruthy(value);\n            default:\n                return value;\n        }\n    } catch (e: any) {\n        errorLogger('Error checkTypeOfId:', e, adapter);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAoC;AACpC,oBAA8F;AAC9F,qBAA4B;AAC5B,kBAAyE;AACzE,kBAAwB;AACxB,oBAAuB;AACvB,sBAAkE;AAClE,sBAAiC;AACjC,yBAAqC;AAE9B,MAAM,kBAAkB,OAAO,YAAoB,OAAiC;AACvF,QAAM,EAAE,WAAW,uBAAuB,QAAI;AAAA,IAC1C;AAAA,IACA,qBAAO,UAAU;AAAA,IACjB,qBAAO,UAAU;AAAA,EACrB;AACA,QAAM,EAAE,iBAAiB,YAAY,SAAS,QAAI,yCAAqB,sBAAsB;AAE7F,MAAI,CAAC,OAAO,CAAC,YAAY,SAAS,SAAS,IAAI;AAC3C,WAAO,WAAW,QAAQ,WAAW,YAAY;AAAA,EACrD;AACA,QAAM,QAAQ,MAAM,oBAAQ,qBAAqB,kBAAM,QAAQ;AAE/D,MAAI,CAAC,OAAO;AACR,WAAO,WAAW,QAAQ,WAAW,YAAY;AAAA,EACrD;AACA,QAAM,qBAAiB,+BAAgB,YAAY,CAAC,MAAM,KAAK,GAAG,CAAC;AACnE,QAAM,SAAS,MAAM,eAAe;AAEpC,QAAM,kBAAc,gCAAe,+BAAkB,MAAM,CAAC;AAC5D,QAAM,yBAAqB,oCAAmB,aAAa,cAAc;AAEzE,SAAO,kDAAsB;AACjC;AAGO,MAAM,cAAc,OAAO,SAAkC;AAChE,QAAM,EAAE,WAAW,wBAAwB,qBAAqB,QAAI;AAAA,IAChE;AAAA,IACA,qBAAO,OAAO;AAAA,IACd,qBAAO,OAAO;AAAA,EAClB;AAEA,QAAM,EAAE,IAAI,aAAa,QAAI,mCAAkB,sBAAsB;AAErE,QAAM,aAAa,MAAM,oBAAQ,qBAAqB,EAAE;AAExD,MAAI,KAAC,wBAAU,yCAAY,GAAG,GAAG;AAC7B,wBAAQ,IAAI,MAAM,oBAAoB,EAAE,EAAE;AAC1C,WAAO,KAAK,QAAQ,WAAW,EAAE;AAAA,EACrC;AAEA,QAAM,mBAAmB,OAAO,WAAW,GAAG;AAE9C,MAAI,KAAK,SAAS,qBAAO,IAAI,GAAG;AAC5B,eAAO,mCAAsB,sBAAsB,gBAAgB,EAAE,QAAQ,kBAAkB,EAAE;AAAA,EACrG;AAEA,MAAI,CAAC,cAAc;AACf,WAAO,KAAK,QAAQ,WAAW,gBAAgB;AAAA,EACnD;AAEA,QAAM,EAAE,UAAU,KAAK,YAAY,MAAM,QAAI,kCAAmB,qBAAS,MAAM,WAAW,GAAG;AAE7F,UAAQ,CAAC,QAAQ,aAAa,MAAM,QAAQ,WAAW,CAAC,QAAQ,IAAI,SAAS,IAAI,gBAAgB;AACrG;AAEO,MAAM,kBAAkB,OAAO,SAAmC;AACrE,MAAI,CAAC,MAAM;AACP,WAAO;AAAA,EACX;AACA,MAAI;AACA,wBAAQ,IAAI,MAAM,sBAAsB,IAAI,EAAE;AAE9C,QAAI,KAAK,SAAS,qBAAO,OAAO,KAAK,GAAG;AACpC,aAAO,KAAK,SAAS,qBAAO,OAAO,KAAK,GAAG;AACvC,eAAO,MAAM,YAAY,IAAI;AAAA,MACjC;AAAA,IACJ;AACA,QAAI,KAAK,SAAS,qBAAO,UAAU,EAAE,KAAK,KAAK,SAAS,qBAAO,UAAU,EAAE,GAAG;AAC1E,aAAO,MAAM,gBAAgB,IAAI;AAAA,IACrC;AACA,QAAI,KAAK,SAAS,qBAAO,IAAI,KAAK,GAAG;AACjC,YAAM,EAAE,WAAW,qBAAqB,QAAI,6BAAc,MAAM,qBAAO,IAAI,OAAO,qBAAO,IAAI,GAAG;AAChG,YAAM,KAAK,UAAU,MAAM,GAAG,EAAE,CAAC,EAAE,QAAQ,cAAc,EAAE,EAAE,QAAQ,MAAM,EAAE;AAC7E,YAAM,gBAAgB,UAAU,MAAM,GAAG,EAAE,CAAC;AAE5C,aAAO;AACP,YAAM,iBAAiB,MAAM,yBAAyB,IAAI,aAAa;AAEvE,YAAM,MAAM,UAAU,MAAM,GAAG,EAAE,CAAC,EAAE,QAAQ,KAAK,EAAE,KAAK;AAExD,cAAI,6BAAc,IAAI,GAAG;AACrB,eAAO;AAAA,MACX;AACA,UAAI,gBAAgB;AAChB,kBAAM,kCAAiB,EAAE,IAAI,OAAO,gBAAgB,IAAI,CAAC;AAAA,MAC7D;AAAA,IACJ;AACA,wBAAQ,IAAI,MAAM,oBAAoB,IAAI,EAAE;AAC5C,WAAO;AAAA,EACX,SAAS,GAAQ;AACb,oCAAY,0BAA0B,GAAG,mBAAO;AAChD,WAAO;AAAA,EACX;AACJ;AAEA,eAAsB,yBAClB,IACA,OACwC;AACxC,MAAI;AACA,UAAM,eAAe,OAAO;AAC5B,UAAM,MAAM,MAAM,oBAAQ,sBAAsB,EAAE;AAElD,QAAI,CAAC,OAAO,KAAC,wBAAU,KAAK,SAAK,4BAAW,cAAc,GAAG,GAAG;AAC5D,aAAO;AAAA,IACX;AAEA,wBAAQ,IAAI,MAAM,2BAA2B,YAAY,SAAS,IAAI,OAAO,IAAI,GAAG;AAEpF,YAAQ,IAAI,OAAO,MAAM;AAAA,MACrB,KAAK;AACD,eAAO,OAAO,KAAK;AAAA,MACvB,KAAK;AACD,eAAO,OAAO,UAAU,WAAW,WAAW,KAAK,IAAI,eAAW,0BAAW,KAAK,CAAC;AAAA,MACvF,KAAK;AACD,mBAAO,uBAAS,KAAK;AAAA,MACzB;AACI,eAAO;AAAA,IACf;AAAA,EACJ,SAAS,GAAQ;AACb,oCAAY,wBAAwB,GAAG,mBAAO;AAAA,EAClD;AACJ;",
  "names": []
}
