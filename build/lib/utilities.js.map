{
  "version": 3,
  "sources": ["../../src/lib/utilities.ts"],
  "sourcesContent": ["import { isDefined } from '@b/lib/utils';\nimport { checkStatus } from '../app/status';\nimport type { Adapter } from '../types/types';\nimport { getProcessTimeValues } from '@b/lib/splitValues';\nimport { decomposeText, isEmptyString, jsonString, replaceAllItems } from '@b/lib/string';\nimport { invalidId, config } from '@b/config/config';\nimport { isSameType, timeStringReplacer } from '@b/lib/appUtils';\nimport { extractTimeValues, getTimeWithPad } from '@b/lib/time';\nimport { setstateIobroker } from '@b/app/setstate';\nimport { errorLogger } from '@b/app/logging';\n\nexport const setTimeValue = async (adapter: any, textToSend: string, id?: string): Promise<string> => {\n    const { substring, substringExcludeSearch } = decomposeText(\n        textToSend,\n        config.timestamp.start,\n        config.timestamp.end,\n    ); //{time.lc,(DD MM YYYY hh:mm:ss:sss),id:'ID'}\n    const { typeofTimestamp, timeString, idString } = getProcessTimeValues(substringExcludeSearch);\n\n    if (!id && (!idString || idString.length < 5)) {\n        return textToSend.replace(substring, invalidId);\n    }\n    const value = await adapter.getForeignStateAsync(id ?? idString);\n\n    if (!value) {\n        return textToSend.replace(substring, invalidId);\n    }\n    const formattedTimeParams = replaceAllItems(timeString, [',(', '(', ')', '}']); //\"(DD MM YYYY hh:mm:ss:sss)\"\n    const unixTs = value[typeofTimestamp];\n\n    const timeWithPad = getTimeWithPad(extractTimeValues(unixTs));\n    const formattedTime = timeStringReplacer(timeWithPad, formattedTimeParams);\n\n    return formattedTime ? textToSend.replace(substring, formattedTime) : textToSend;\n};\n\nexport const textModifier = async (adapter: Adapter, text?: string): Promise<string> => {\n    if (!text) {\n        return '';\n    }\n    try {\n        const inputText = text;\n\n        while (text.includes(config.status.start)) {\n            text = await checkStatus(adapter, text);\n        }\n\n        if (text.includes(config.timestamp.lc) || text.includes(config.timestamp.ts)) {\n            text = await setTimeValue(adapter, text);\n        }\n        if (text.includes(config.set.start)) {\n            const { substring, textExcludeSubstring } = decomposeText(text, config.set.start, config.set.end);\n            const id = substring.split(',')[0].replace(\"{set:'id':\", '').replace(/'/g, '');\n            const importedValue = substring.split(',')[1];\n\n            text = textExcludeSubstring;\n            const convertedValue = await transformValueToTypeOfId(adapter, id, importedValue);\n\n            const ack = substring.split(',')[2].replace('}', '') == 'true';\n\n            if (isEmptyString(text)) {\n                text = 'W\u00E4hle eine Aktion';\n            }\n            if (convertedValue) {\n                await setstateIobroker({ adapter, id, value: convertedValue, ack });\n            }\n        }\n\n        text === inputText\n            ? adapter.log.debug(`Return text : ${text} `)\n            : adapter.log.debug(`Return text was modified from \"${inputText}\" to \"${text}\" `);\n        return text;\n    } catch (e: any) {\n        errorLogger('Error returnTextModifier:', e, adapter);\n        return '';\n    }\n};\n\nexport async function transformValueToTypeOfId(\n    adapter: Adapter,\n    id: string,\n    value: ioBroker.StateValue,\n): Promise<ioBroker.StateValue | undefined> {\n    try {\n        const receivedType = typeof value;\n        const obj = await adapter.getForeignObjectAsync(id);\n\n        if (!obj || !isDefined(value) || isSameType(receivedType, obj)) {\n            return value;\n        }\n\n        adapter.log.debug(`Change Value type from \"${receivedType}\" to \"${obj.common.type}\"`);\n\n        switch (obj.common.type) {\n            case 'string':\n                return String(value);\n            case 'number':\n                return typeof value === 'string' ? parseFloat(value) : parseFloat(jsonString(value));\n            case 'boolean':\n                return isDefined(value) && !['false', false, 0, '0', 'null', 'undefined'].includes(value);\n            default:\n                return value;\n        }\n    } catch (e: any) {\n        errorLogger('Error checkTypeOfId:', e, adapter);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
