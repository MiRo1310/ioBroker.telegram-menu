{
  "version": 3,
  "sources": ["../../src/lib/utilities.ts"],
  "sourcesContent": ["import TelegramMenu from \"../main\";\r\nimport { isJSON, replaceAll } from \"./global\";\r\nimport { debug, error } from \"./logging\";\r\nimport { UserListWithChatId, ProzessTimeValue } from \"./telegram-menu\";\r\n\r\nconst processTimeValue = (textToSend: string, obj: ioBroker.State): string => {\r\n\tconst string = obj.val?.toString();\r\n\tif (!string) {\r\n\t\treturn textToSend;\r\n\t}\r\n\tconst time = new Date(string);\r\n\tconst timeString = time.toLocaleDateString(\"de-DE\", {\r\n\t\thour: \"2-digit\",\r\n\t\tminute: \"2-digit\",\r\n\t\tsecond: \"2-digit\",\r\n\t\thour12: false,\r\n\t});\r\n\ttextToSend = textToSend.replace(\"{time}\", timeString);\r\n\treturn textToSend;\r\n};\r\n\r\nconst getChatID = (userListWithChatID: UserListWithChatId[], user: string): string => {\r\n\tlet chatId = \"\";\r\n\tuserListWithChatID.forEach((element) => {\r\n\t\tif (element.name === user) {\r\n\t\t\tchatId = element.chatID;\r\n\t\t}\r\n\t});\r\n\treturn chatId;\r\n};\r\nconst exchangeValue = (textToSend: string, stateVal: string | number | boolean): { valueChange: string; textToSend: string } | boolean => {\r\n\tconst { startindex, endindex } = decomposeText(textToSend, \"change{\", \"}\");\r\n\r\n\tlet match = textToSend.substring(startindex + \"change\".length + 1, textToSend.indexOf(\"}\", startindex));\r\n\r\n\tlet objChangeValue;\r\n\tmatch = match.replace(/'/g, '\"');\r\n\r\n\tif (isJSON(\"{\" + match + \"}\")) {\r\n\t\tobjChangeValue = JSON.parse(\"{\" + match + \"}\");\r\n\t} else {\r\n\t\terror([{ text: `There is a error in your input:`, val: replaceAll(match, '\"', \"'\") }]);\r\n\t\treturn false;\r\n\t}\r\n\r\n\tlet newValue;\r\n\tobjChangeValue[String(stateVal)] ? (newValue = objChangeValue[String(stateVal)]) : (newValue = stateVal);\r\n\treturn { valueChange: newValue, textToSend: textToSend.substring(0, startindex) + textToSend.substring(endindex + 1) };\r\n};\r\n\r\nfunction decomposeText(\r\n\ttext: string,\r\n\tsearchValue: string,\r\n\tsecondValue: string,\r\n): { startindex: number; endindex: number; substring: string; textWithoutSubstring: string } {\r\n\tconst startindex = text.indexOf(searchValue);\r\n\tconst endindex = text.indexOf(secondValue, startindex);\r\n\tconst substring = text.substring(startindex, endindex + secondValue.length);\r\n\tconst textWithoutSubstring = text.replace(substring, \"\").trim();\r\n\treturn {\r\n\t\tstartindex: startindex,\r\n\t\tendindex: endindex,\r\n\t\tsubstring: substring,\r\n\t\ttextWithoutSubstring: textWithoutSubstring,\r\n\t};\r\n}\r\n\r\nfunction changeValue(textToSend: string, val: string | number | boolean): { textToSend: string; val: string | number } | undefined {\r\n\tif (textToSend.includes(\"change{\")) {\r\n\t\tconst result = exchangeValue(textToSend, val);\r\n\t\tif (!result) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (typeof result === \"boolean\") {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn { textToSend: result[\"textToSend\"], val: result[\"valueChange\"] };\r\n\t}\r\n}\r\nconst processTimeIdLc = async (textToSend: string, id: string | null): Promise<string | undefined> => {\r\n\tconst _this = TelegramMenu.getInstance();\r\n\r\n\tlet key: string = \"\";\r\n\tconst { substring } = decomposeText(textToSend, \"{time.\", \"}\");\r\n\tconst array = substring.split(\",\");\r\n\tlet changedSubstring = substring;\r\n\tchangedSubstring = changedSubstring.replace(array[0], \"\");\r\n\r\n\tif (array[0].includes(\"lc\")) {\r\n\t\tkey = \"lc\";\r\n\t} else if (array[0].includes(\"ts\")) {\r\n\t\tkey = \"ts\";\r\n\t}\r\n\tlet idFromText = \"\";\r\n\tif (!id) {\r\n\t\tif (!changedSubstring.includes(\"id:\")) {\r\n\t\t\tdebug([{ text: \"Error processTimeIdLc: id not found in:\", val: changedSubstring }]);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (array[2]) {\r\n\t\t\tidFromText = array[2].replace(\"id:\", \"\").replace(\"}\", \"\").replace(/'/g, \"\");\r\n\t\t\tchangedSubstring = changedSubstring.replace(array[2], \"\").replace(/,/g, \"\");\r\n\t\t}\r\n\t}\r\n\tif (!id && !idFromText) {\r\n\t\treturn;\r\n\t}\r\n\tconst value = await _this.getForeignStateAsync(id || idFromText);\r\n\tlet timeValue;\r\n\tlet timeStringUser;\r\n\tif (key && value) {\r\n\t\ttimeStringUser = changedSubstring.replace(\",(\", \"\").replace(\")\", \"\").replace(\"}\", \"\");\r\n\t\ttimeValue = value[key as keyof ioBroker.StateValue];\r\n\t}\r\n\tif (!timeValue) {\r\n\t\treturn;\r\n\t}\r\n\tconst timeObj = new Date(timeValue);\r\n\tconst milliseconds = timeObj.getMilliseconds();\r\n\tconst seconds = timeObj.getSeconds();\r\n\tconst minutes = timeObj.getMinutes();\r\n\tconst hours = timeObj.getHours();\r\n\tconst day = timeObj.getDate();\r\n\tconst month = timeObj.getMonth() + 1;\r\n\tconst year = timeObj.getFullYear();\r\n\r\n\tconst time = {\r\n\t\tms: milliseconds < 10 ? \"00\" + milliseconds : milliseconds < 100 ? \"0\" + milliseconds : milliseconds,\r\n\t\ts: seconds < 10 ? \"0\" + seconds : seconds,\r\n\t\tm: minutes < 10 ? \"0\" + minutes : minutes,\r\n\t\th: hours < 10 ? \"0\" + hours : hours,\r\n\t\td: day < 10 ? \"0\" + day : day,\r\n\t\tmo: month < 10 ? \"0\" + month : month,\r\n\t\ty: year,\r\n\t};\r\n\r\n\tif (timeStringUser) {\r\n\t\tif (timeStringUser.includes(\"sss\")) {\r\n\t\t\ttimeStringUser = timeStringUser.replace(\"sss\", time.ms.toString());\r\n\t\t}\r\n\t\tif (timeStringUser.includes(\"ss\")) {\r\n\t\t\ttimeStringUser = timeStringUser.replace(\"ss\", time.s.toString());\r\n\t\t}\r\n\t\tif (timeStringUser.includes(\"mm\")) {\r\n\t\t\ttimeStringUser = timeStringUser.replace(\"mm\", time.m.toString());\r\n\t\t}\r\n\t\tif (timeStringUser.includes(\"hh\")) {\r\n\t\t\ttimeStringUser = timeStringUser.replace(\"hh\", time.h.toString());\r\n\t\t}\r\n\t\tif (timeStringUser.includes(\"DD\")) {\r\n\t\t\ttimeStringUser = timeStringUser.replace(\"DD\", time.d.toString());\r\n\t\t}\r\n\t\tif (timeStringUser.includes(\"MM\")) {\r\n\t\t\ttimeStringUser = timeStringUser.replace(\"MM\", time.mo.toString());\r\n\t\t}\r\n\t\tif (timeStringUser.includes(\"YYYY\")) {\r\n\t\t\ttimeStringUser = timeStringUser.replace(\"YYYY\", time.y.toString());\r\n\t\t}\r\n\t\tif (timeStringUser.includes(\"YY\")) {\r\n\t\t\ttimeStringUser = timeStringUser.replace(\"YY\", time.y.toString().slice(-2));\r\n\t\t}\r\n\t\ttimeStringUser = timeStringUser.replace(\"(\", \"\").replace(\")\", \"\");\r\n\t\treturn textToSend.replace(substring, timeStringUser);\r\n\t}\r\n\r\n\treturn textToSend;\r\n};\r\n\r\nconst checkStatus = (text: string, processTimeValue?: ProzessTimeValue): Promise<string | undefined | ioBroker.State | null> => {\r\n\treturn new Promise(async (resolve) => {\r\n\t\ttry {\r\n\t\t\tconst _this = TelegramMenu.getInstance();\r\n\t\t\tdebug([{ text: \"CheckStatusInfo:\", val: text }]);\r\n\r\n\t\t\tconst substring = decomposeText(text, \"{status:\", \"}\").substring;\r\n\t\t\tlet id, valueChange;\r\n\r\n\t\t\tif (substring.includes(\"status:'id':\")) {\r\n\t\t\t\tid = substring.split(\":\")[2].replace(\"'}\", \"\").replace(/'/g, \"\").replace(/}/g, \"\");\r\n\r\n\t\t\t\tvalueChange = substring.split(\":\")[3] ? substring.split(\":\")[3].replace(\"}\", \"\") !== \"false\" : true;\r\n\t\t\t} else {\r\n\t\t\t\tid = substring.split(\":\")[1].replace(\"'}\", \"\").replace(/'/g, \"\").replace(/}/g, \"\");\r\n\t\t\t\tvalueChange = substring.split(\":\")[2] ? substring.split(\":\")[2].replace(\"}\", \"\") !== \"false\" : true;\r\n\t\t\t}\r\n\r\n\t\t\tconst stateValue = await _this.getForeignStateAsync(id);\r\n\r\n\t\t\tif (!stateValue) {\r\n\t\t\t\tdebug([{ text: \"Error getting Value from:\", val: id }]);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (text.includes(\"{time}\") && processTimeValue) {\r\n\t\t\t\ttext = text.replace(substring, \"\");\r\n\t\t\t\tif (stateValue.val && typeof stateValue.val === \"string\") {\r\n\t\t\t\t\tconst newValue = processTimeValue(text, stateValue).replace(stateValue.val, \"\");\r\n\t\t\t\t\treturn resolve(newValue);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (stateValue.val === undefined || stateValue.val === null) {\r\n\t\t\t\tdebug([{ text: \"Id\", val: id }, { text: \"Value is null or undefined!\" }]);\r\n\t\t\t\treturn resolve(text.replace(substring, \"\"));\r\n\t\t\t}\r\n\t\t\tif (!valueChange) {\r\n\t\t\t\tresolve(text.replace(substring, stateValue.val.toString()));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconst changedResult = changeValue(text, stateValue.val);\r\n\t\t\tlet newValue;\r\n\t\t\tif (changedResult) {\r\n\t\t\t\ttext = changedResult.textToSend;\r\n\t\t\t\tnewValue = changedResult.val;\r\n\t\t\t} else {\r\n\t\t\t\tnewValue = stateValue.val;\r\n\t\t\t}\r\n\t\t\tresolve(text.replace(substring, newValue.toString()));\r\n\t\t} catch (e: any) {\r\n\t\t\terror([\r\n\t\t\t\t{ text: \"Error checkStatus:\", val: e.message },\r\n\t\t\t\t{ text: \"Stack:\", val: e.stack },\r\n\t\t\t]);\r\n\t\t}\r\n\t});\r\n};\r\n\r\nconst checkStatusInfo = async (text: string): Promise<string | undefined> => {\r\n\tconst _this = TelegramMenu.getInstance();\r\n\r\n\ttry {\r\n\t\tif (!text) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t_this.log.debug(\"Text: \" + JSON.stringify(text));\r\n\t\tif (text.includes(\"{status:\")) {\r\n\t\t\twhile (text.includes(\"{status:\")) {\r\n\t\t\t\tconst result = await checkStatus(text, processTimeValue);\r\n\t\t\t\ttext = result?.toString() || \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (text.includes(\"{time.lc\") || text.includes(\"{time.ts\")) {\r\n\t\t\ttext = (await processTimeIdLc(text, null)) || \"\";\r\n\t\t}\r\n\t\tif (text.includes(\"{set:\")) {\r\n\t\t\tconst result = decomposeText(text, \"{set:\", \"}\");\r\n\t\t\tconst id = result.substring.split(\",\")[0].replace(\"{set:'id':\", \"\").replace(/'/g, \"\");\r\n\t\t\tconst importedValue = result.substring.split(\",\")[1];\r\n\r\n\t\t\ttext = result.textWithoutSubstring;\r\n\t\t\tconst convertedValue = await checkTypeOfId(id, importedValue);\r\n\r\n\t\t\tconst ack = result.substring.split(\",\")[2].replace(\"}\", \"\") == \"true\";\r\n\r\n\t\t\tif (text === \"\") {\r\n\t\t\t\ttext = \"W\u00E4hle eine Aktion\";\r\n\t\t\t}\r\n\t\t\tif (convertedValue) {\r\n\t\t\t\tawait _this.setForeignStateAsync(id, convertedValue, ack);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (text) {\r\n\t\t\treturn text;\r\n\t\t}\r\n\t} catch (e: any) {\r\n\t\terror([\r\n\t\t\t{ text: \"Error checkStatusInfo:\", val: e.message },\r\n\t\t\t{ text: \"Stack:\", val: e.stack },\r\n\t\t]);\r\n\t}\r\n};\r\n\r\nasync function checkTypeOfId(\r\n\tid: string,\r\n\tvalue: ioBroker.State | ioBroker.StateValue | ioBroker.SettableState,\r\n): Promise<ioBroker.State | null | undefined | ioBroker.State | ioBroker.StateValue | ioBroker.SettableState> {\r\n\tconst _this = TelegramMenu.getInstance();\r\n\ttry {\r\n\t\tdebug([{ text: `Check Type of Id: ${id}` }]);\r\n\t\tconst obj = await _this.getForeignObjectAsync(id);\r\n\t\tconst receivedType = typeof value;\r\n\t\tif (!obj || !value) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\tif (receivedType === obj.common.type || !obj.common.type) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\tdebug([{ text: `Change Value type from  \"${receivedType}\" to \"${obj.common.type}\"` }]);\r\n\r\n\t\tif (obj.common.type === \"boolean\") {\r\n\t\t\tif (value == \"true\") {\r\n\t\t\t\tvalue = true;\r\n\t\t\t}\r\n\t\t\tif (value == \"false\") {\r\n\t\t\t\tvalue = false;\r\n\t\t\t}\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\tif (obj.common.type === \"string\") {\r\n\t\t\treturn value.toString();\r\n\t\t}\r\n\t\tif (obj && obj.common && obj.common.type === \"number\" && typeof value === \"string\") {\r\n\t\t\treturn parseFloat(value);\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t} catch (e: any) {\r\n\t\terror([\r\n\t\t\t{ text: \"Error checkTypeOfId:\", val: e.message },\r\n\t\t\t{ text: \"Stack:\", val: e.stack },\r\n\t\t]);\r\n\t}\r\n}\r\nconst newLine = (text: string): string => {\r\n\tif (text && text.includes(\"\\\\n\")) {\r\n\t\treturn text.replace(/\\\\n/g, \"\\n\");\r\n\t}\r\n\treturn text;\r\n};\r\n\r\nexport { checkStatusInfo, checkTypeOfId, changeValue, newLine, processTimeIdLc, processTimeValue, decomposeText, replaceAll, getChatID };\r\n"],
  "mappings": "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",
  "names": ["TelegramMenu", "processTimeValue", "newValue"]
}
