{
  "version": 3,
  "sources": ["../../src/lib/utilities.ts"],
  "sourcesContent": ["import { isDefined, isTruthy } from './utils';\nimport { decomposeText, getValueToExchange, jsonString, replaceAllItems } from './string';\nimport { errorLogger } from '../app/logging';\nimport { extractTimeValues, getTimeWithPad, integrateTimeIntoText } from './time';\nimport { adapter } from '../main';\nimport { config } from '../config/config';\nimport { getTypeofTimestamp, statusIdAndParams, timeStringReplacer } from './appUtils';\n\nexport const processTimeIdLc = async (textToSend: string, id?: string): Promise<string> => {\n    const { substring, substringExcludeSearch } = decomposeText(\n        textToSend,\n        config.timestamp.start,\n        config.timestamp.end,\n    ); //{time.lc,(DD MM YYYY hh:mm:ss:sss),id:'ID'}\n    const array = substringExcludeSearch.split(','); //[\"lc\",\"(DD MM YYYY hh:mm:ss:sss)\",\"id:'ID'\"]\n    const timestampString = array[0];\n    const timeString = array[1]; //\"(DD MM YYYY hh:mm:ss:sss)\"\n    const idString = array[2];\n\n    const typeofTimestamp = getTypeofTimestamp(timestampString); //\"{time.lc\"\n\n    const idFromText = replaceAllItems(idString, ['id:', '}', \"'\"]); //\"id:'ID'\"\n\n    if (!id && (!idFromText || idFromText.length < 5)) {\n        return textToSend.replace(substring, 'Invalid ID');\n    }\n    const value = await adapter.getForeignStateAsync(id ?? idFromText);\n\n    if (!value) {\n        return textToSend.replace(substring, 'Invalid ID');\n    }\n    const timeStringUser = replaceAllItems(timeString, [',(', ')', '}']); //\"(DD MM YYYY hh:mm:ss:sss)\"\n    const unixTs = value[typeofTimestamp];\n\n    const timeWithPad = getTimeWithPad(extractTimeValues(unixTs));\n    const timeStringReplaced = timeStringReplacer(timeWithPad, timeStringUser);\n\n    return timeStringReplaced ?? textToSend;\n};\n\n// TODO Check Usage of function\nexport const checkStatus = async (text: string): Promise<string> => {\n    const { substring, substringExcludeSearch } = decomposeText(text, config.status.start, config.status.end); //substring {status:'ID':true} new | old {status:'id':'ID':true}\n    adapter.log.debug(text);\n    adapter.log.debug(substring);\n    adapter.log.debug(substringExcludeSearch);\n    const { id, shouldChange } = statusIdAndParams(substringExcludeSearch);\n\n    const stateValue = await adapter.getForeignStateAsync(id);\n\n    if (!isDefined(stateValue?.val)) {\n        adapter.log.debug(`State not found: ${id}`);\n        return text.replace(substring, '');\n    }\n\n    if (text.includes(config.time)) {\n        text = text.replace(substring, '');\n\n        const val = String(stateValue.val);\n        return integrateTimeIntoText(text, val).replace(val, '');\n    }\n\n    if (!shouldChange) {\n        return text.replace(substring, stateValue.val.toString());\n    }\n\n    const { newValue: val, textToSend, error } = getValueToExchange(adapter, text, stateValue.val);\n\n    text = !error ? textToSend : text;\n    const newValue = !error ? val : stateValue.val;\n\n    adapter.log.debug(`CheckStatus Text: ${text} Substring: ${substring}`);\n\n    return text.replace(substring, newValue.toString());\n};\n\nexport const checkStatusInfo = async (text: string): Promise<string> => {\n    try {\n        adapter.log.debug(`Check status Info: ${text}`);\n\n        if (text.includes(config.status.start)) {\n            while (text.includes(config.status.start)) {\n                text = await checkStatus(text);\n            }\n        }\n        if (text.includes(config.timestamp.lc) || text.includes(config.timestamp.ts)) {\n            text = await processTimeIdLc(text);\n        }\n        if (text.includes(config.set.start)) {\n            const result = decomposeText(text, config.set.start, config.set.end);\n            const id = result.substring.split(',')[0].replace(\"{set:'id':\", '').replace(/'/g, '');\n            const importedValue = result.substring.split(',')[1];\n\n            text = result.textExcludeSubstring;\n            const convertedValue = await transformValueToTypeOfId(id, importedValue);\n\n            const ack = result.substring.split(',')[2].replace('}', '') == 'true';\n\n            if (text === '') {\n                text = 'W\u00E4hle eine Aktion';\n            }\n            if (convertedValue) {\n                await adapter.setForeignStateAsync(id, convertedValue, ack);\n            }\n        }\n        if (text) {\n            adapter.log.debug(`CheckStatusInfo: ${text}`);\n            return text;\n        }\n        return '';\n    } catch (e: any) {\n        errorLogger('Error checkStatusInfo:', e, adapter);\n        return '';\n    }\n};\n\nexport async function transformValueToTypeOfId(\n    id: string,\n    value: ioBroker.StateValue,\n): Promise<ioBroker.StateValue | undefined> {\n    try {\n        const receivedType = typeof value;\n\n        const obj = await adapter.getForeignObjectAsync(id);\n\n        if (!obj || !isDefined(value)) {\n            return;\n        }\n\n        if (receivedType === obj.common.type || !obj.common.type) {\n            return value;\n        }\n\n        adapter.log.debug(`Change Value type from  \"${receivedType}\" to \"${obj.common.type}\"`);\n\n        switch (obj.common.type) {\n            case 'string':\n                return value as string;\n            case 'number':\n                return parseFloat(jsonString(value));\n            case 'boolean':\n                return isTruthy(value);\n        }\n\n        return value;\n    } catch (e: any) {\n        errorLogger('Error checkTypeOfId:', e, adapter);\n    }\n}\n"],
  "mappings": "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",
  "names": ["val"]
}
