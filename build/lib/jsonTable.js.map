{
  "version": 3,
  "sources": ["../../src/lib/jsonTable.ts"],
  "sourcesContent": ["import { decomposeText } from \"./global\";\r\nimport { debug, error } from \"./logging\";\r\nconst lastText: LastText = {};\r\nconst createKeyboardFromJson = (val: string, text: string | null, id: string, user: string): { text: string; keyboard: string } | undefined => {\r\n\ttry {\r\n\t\tif (text) {\r\n\t\t\tlastText[user] = text;\r\n\t\t} else {\r\n\t\t\ttext = lastText[user];\r\n\t\t}\r\n\t\tconst array = decomposeText(text, \"{json:\", \"}\").substring.split(\";\");\r\n\t\tconst headline = array[2];\r\n\t\tconst itemArray: string[] = array[1].replace(\"[\", \"\").replace(\"]\", \"\").replace(/\"/g, \"\").split(\",\");\r\n\t\tlet idShoppingList = false;\r\n\t\tif (array.length > 3 && array[3] == \"shoppinglist\") {\r\n\t\t\tidShoppingList = true;\r\n\t\t}\r\n\r\n\t\tlet valArray: ValArray[] = [];\r\n\t\tdebug([\r\n\t\t\t{ text: \"Val:\", val },\r\n\t\t\t{ text: \"Type of Val:\", val },\r\n\t\t]);\r\n\r\n\t\tif (typeof val == \"string\") {\r\n\t\t\tvalArray = JSON.parse(val);\r\n\t\t} else {\r\n\t\t\tvalArray = val;\r\n\t\t}\r\n\t\tconst keyboard: (FirstRow | RowArray)[][] = [];\r\n\r\n\t\tvalArray.forEach((element, index) => {\r\n\t\t\tconst firstRow: FirstRow[] = [];\r\n\t\t\tconst rowArray: RowArray[] = [];\r\n\t\t\titemArray.forEach((item) => {\r\n\t\t\t\tif (index == 0) {\r\n\t\t\t\t\tconst btnText: string = item.split(\":\")[1];\r\n\t\t\t\t\tif (btnText.length > 0) {\r\n\t\t\t\t\t\tfirstRow.push({ text: btnText, callback_data: \"1\" });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (idShoppingList) {\r\n\t\t\t\t\tconst value = element[\"buttondelete\"];\r\n\t\t\t\t\tconst valueDeleteLinkArray = decomposeText(value, \"('\", \"')\").substring.replace(\"('\", \"\").replace(\",true')\", \"\").split(\".\");\r\n\t\t\t\t\tconst instanceAlexa = valueDeleteLinkArray[1];\r\n\t\t\t\t\tconst valueDeleteId = valueDeleteLinkArray[5];\r\n\r\n\t\t\t\t\tconst instanceShoppingListID = id.split(\".\")[1] + \".\" + id.split(\".\")[2];\r\n\t\t\t\t\trowArray.push({\r\n\t\t\t\t\t\ttext: element[item.split(\":\")[0]],\r\n\t\t\t\t\t\tcallback_data: `sList:${instanceShoppingListID}:${instanceAlexa}:${valueDeleteId}:`,\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\trowArray.push({ text: element[item.split(\":\")[0]], callback_data: \"1\" });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif (index == 0) {\r\n\t\t\t\tkeyboard.push(firstRow);\r\n\t\t\t}\r\n\t\t\tkeyboard.push(rowArray);\r\n\t\t});\r\n\t\tconst inline_keyboard = { inline_keyboard: keyboard };\r\n\t\tdebug([{ text: \"keyboard:\", val: inline_keyboard }]);\r\n\r\n\t\treturn { text: headline, keyboard: JSON.stringify(inline_keyboard) };\r\n\t} catch (err: any) {\r\n\t\terror([\r\n\t\t\t{ text: \"Error createKeyboardFromJson:\", val: err.message },\r\n\t\t\t{ text: \"Stack:\", val: err.stack },\r\n\t\t]);\r\n\t}\r\n};\r\n\r\nasync function createTextTableFromJson(val: string, textToSend: string): Promise<string | undefined> {\r\n\ttry {\r\n\t\tif (!val) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst substring = decomposeText(textToSend, \"{json:\", \"}\").substring;\r\n\t\tconst array = substring.split(\";\");\r\n\t\tconst itemArray: string[] = array[1].replace(\"[\", \"\").replace(\"]\", \"\").replace(/\"/g, \"\").split(\",\");\r\n\t\tconst valArray: ValArray[] = JSON.parse(val);\r\n\t\t// Array f\u00FCr die Gr\u00F6\u00DFte L\u00E4nge der Items\r\n\t\tconst lengthArray: number[] = [];\r\n\t\t// Tr\u00E4gt f\u00FCr jedes Item einen Eintrag im lengthArray ein\r\n\t\titemArray.forEach((element) => {\r\n\t\t\tlengthArray.push(element.split(\":\")[1].length);\r\n\t\t});\r\n\t\tvalArray.forEach((element) => {\r\n\t\t\titemArray.forEach((item, index) => {\r\n\t\t\t\tif (lengthArray[index] < element[item.split(\":\")[0]].toString().length) {\r\n\t\t\t\t\tlengthArray[index] = element[item.split(\":\")[0]].toString().length;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\tdebug([{ text: \"Length of rows\", val: lengthArray }]);\r\n\t\tconst headline = array[2];\r\n\t\tlet textTable = textToSend.replace(substring, \"\").trim();\r\n\t\tif (textTable != \"\") {\r\n\t\t\ttextTable += \" \\n\\n\";\r\n\t\t}\r\n\t\ttextTable += \" \" + headline + \" \\n`\";\r\n\t\tconst enlargeColumn = 1;\r\n\t\tconst reduce = lengthArray.length == 1 ? 2 : 0;\r\n\t\tconst lineLenght = lengthArray.reduce((a, b) => a + b, 0) + 5 - reduce + enlargeColumn * lengthArray.length;\r\n\t\t// Breakline\r\n\t\ttextTable += \"-\".repeat(lineLenght) + \" \\n\";\r\n\t\tvalArray.forEach((element, elementIndex) => {\r\n\t\t\titemArray.forEach((item, index) => {\r\n\t\t\t\t// TableHead\r\n\t\t\t\tif (elementIndex == 0 && index == 0) {\r\n\t\t\t\t\ttextTable += \"|\";\r\n\t\t\t\t\titemArray.forEach((item2, i) => {\r\n\t\t\t\t\t\tif (item2.split(\":\")[1].length > 0) {\r\n\t\t\t\t\t\t\ttextTable +=\r\n\t\t\t\t\t\t\t\t\" \" +\r\n\t\t\t\t\t\t\t\titem2\r\n\t\t\t\t\t\t\t\t\t.split(\":\")[1]\r\n\t\t\t\t\t\t\t\t\t.toString()\r\n\t\t\t\t\t\t\t\t\t.padEnd(lengthArray[i] + enlargeColumn, \" \") +\r\n\t\t\t\t\t\t\t\t\"|\";\r\n\t\t\t\t\t\t\tif (i == itemArray.length - 1) {\r\n\t\t\t\t\t\t\t\ttextTable += \"\\n\";\r\n\t\t\t\t\t\t\t\t// Breakline\r\n\t\t\t\t\t\t\t\ttextTable += \"-\".repeat(lineLenght) + \" \\n\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttextTable = textTable.slice(0, -1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t// TableBody\r\n\t\t\t\tif (index == 0) {\r\n\t\t\t\t\ttextTable += \"|\";\r\n\t\t\t\t}\r\n\t\t\t\ttextTable += \" \" + element[item.split(\":\")[0]].toString().padEnd(lengthArray[index] + enlargeColumn, \" \") + \"|\";\r\n\t\t\t\tif (index == itemArray.length - 1) {\r\n\t\t\t\t\ttextTable += \"\\n\";\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\t// Breakline\r\n\t\ttextTable += \"-\".repeat(lineLenght);\r\n\t\ttextTable += \"`\";\r\n\t\treturn textTable;\r\n\t} catch (e: any) {\r\n\t\terror([\r\n\t\t\t{ text: \"Error createTextTableFromJson:\", val: e.message },\r\n\t\t\t{ text: \"Stack:\", val: e.stack },\r\n\t\t]);\r\n\t}\r\n}\r\nexport { createKeyboardFromJson, createTextTableFromJson };\r\n"],
  "mappings": "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",
  "names": []
}
