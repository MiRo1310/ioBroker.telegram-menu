{
  "version": 3,
  "sources": ["../../src/lib/dynamicSwitch.ts"],
  "sourcesContent": ["import { error } from './logging';\nimport type { ArrayOfEntriesDynamicSwitch, Keyboard } from './telegram-menu';\nimport { checkStatusInfo } from './utilities';\nasync function dynamicSwitch(\n    calledValue: string,\n    device2Switch: string,\n    text: string,\n): Promise<{ text?: string; keyboard: string; device: string } | undefined> {\n    try {\n        const changedCalledValue = await checkStatusInfo(calledValue);\n        const splittedArray: string[] | undefined = changedCalledValue?.replace(/\"/g, '').split(':');\n\n        if (!splittedArray) {\n            return;\n        }\n        device2Switch = splittedArray[2];\n        const arrayOfValues = splittedArray[1]\n            .replace('dynSwitch', '')\n            .replace(/\\]/g, '')\n            .replace(/\\[/g, '')\n            .split(',');\n\n        const lengthOfRow = parseInt(splittedArray[3]) || 6;\n\n        const array: ArrayOfEntriesDynamicSwitch[][] = [];\n        const keyboard: Keyboard = { inline_keyboard: array };\n        if (arrayOfValues) {\n            let arrayOfEntriesDynamicSwitch: ArrayOfEntriesDynamicSwitch[] = [];\n            arrayOfValues.forEach((value, index: number) => {\n                if (value.includes('|')) {\n                    const splittedValue = value.split('|');\n                    arrayOfEntriesDynamicSwitch.push({\n                        text: splittedValue[0],\n                        callback_data: `menu:dynS:${device2Switch}:${splittedValue[1]}`,\n                    });\n                } else {\n                    arrayOfEntriesDynamicSwitch.push({\n                        text: value,\n                        callback_data: `menu:dynS:${device2Switch}:${value}`,\n                    });\n                }\n                if (\n                    ((index + 1) % lengthOfRow == 0 && index != 0 && arrayOfValues.length > 0) ||\n                    index + 1 == arrayOfValues.length\n                ) {\n                    keyboard.inline_keyboard.push(arrayOfEntriesDynamicSwitch);\n                    arrayOfEntriesDynamicSwitch = [];\n                }\n            });\n            return { text, keyboard: JSON.stringify(keyboard), device: device2Switch };\n        }\n    } catch (e: any) {\n        error([\n            { text: 'Error parsing dynSwitch:', val: e.message },\n            { text: 'Stack:', val: e.stack },\n        ]);\n    }\n}\nexport { dynamicSwitch };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAsB;AAEtB,uBAAgC;AAChC,eAAe,cACX,aACA,eACA,MACwE;AACxE,MAAI;AACA,UAAM,qBAAqB,UAAM,kCAAgB,WAAW;AAC5D,UAAM,gBAAsC,yDAAoB,QAAQ,MAAM,IAAI,MAAM;AAExF,QAAI,CAAC,eAAe;AAChB;AAAA,IACJ;AACA,oBAAgB,cAAc,CAAC;AAC/B,UAAM,gBAAgB,cAAc,CAAC,EAChC,QAAQ,aAAa,EAAE,EACvB,QAAQ,OAAO,EAAE,EACjB,QAAQ,OAAO,EAAE,EACjB,MAAM,GAAG;AAEd,UAAM,cAAc,SAAS,cAAc,CAAC,CAAC,KAAK;AAElD,UAAM,QAAyC,CAAC;AAChD,UAAM,WAAqB,EAAE,iBAAiB,MAAM;AACpD,QAAI,eAAe;AACf,UAAI,8BAA6D,CAAC;AAClE,oBAAc,QAAQ,CAAC,OAAO,UAAkB;AAC5C,YAAI,MAAM,SAAS,GAAG,GAAG;AACrB,gBAAM,gBAAgB,MAAM,MAAM,GAAG;AACrC,sCAA4B,KAAK;AAAA,YAC7B,MAAM,cAAc,CAAC;AAAA,YACrB,eAAe,aAAa,aAAa,IAAI,cAAc,CAAC,CAAC;AAAA,UACjE,CAAC;AAAA,QACL,OAAO;AACH,sCAA4B,KAAK;AAAA,YAC7B,MAAM;AAAA,YACN,eAAe,aAAa,aAAa,IAAI,KAAK;AAAA,UACtD,CAAC;AAAA,QACL;AACA,aACM,QAAQ,KAAK,eAAe,KAAK,SAAS,KAAK,cAAc,SAAS,KACxE,QAAQ,KAAK,cAAc,QAC7B;AACE,mBAAS,gBAAgB,KAAK,2BAA2B;AACzD,wCAA8B,CAAC;AAAA,QACnC;AAAA,MACJ,CAAC;AACD,aAAO,EAAE,MAAM,UAAU,KAAK,UAAU,QAAQ,GAAG,QAAQ,cAAc;AAAA,IAC7E;AAAA,EACJ,SAAS,GAAQ;AACb,8BAAM;AAAA,MACF,EAAE,MAAM,4BAA4B,KAAK,EAAE,QAAQ;AAAA,MACnD,EAAE,MAAM,UAAU,KAAK,EAAE,MAAM;AAAA,IACnC,CAAC;AAAA,EACL;AACJ;",
  "names": []
}
