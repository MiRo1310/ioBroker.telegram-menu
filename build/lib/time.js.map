{
  "version": 3,
  "sources": ["../../src/lib/time.ts"],
  "sourcesContent": ["import { config, defaultLocale, timezone } from '../config/config';\nimport type { ExtractTimeValues, GetTimeWithPad } from '../types/types';\nimport { pad } from '@b/lib/string';\n\n/**\n * Convert timestamp to local date string\n *\n * @param ts\n * @param options\n *\n * Unit Test\n */\n\nexport const toLocaleDate = (ts: Date, options?: { locale?: string; tz?: string }): string => {\n    return ts.toLocaleDateString(options?.locale ?? defaultLocale, {\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false,\n        timeZone: options?.tz ?? timezone,\n    });\n};\n\n/**\n * Integrate time into text\n *\n * @param text Text with placeholder where time should be integrated\n * @param val Timestamp in milliseconds\n *\n * Unit Test\n */\nexport const integrateTimeIntoText = (text: string, val?: ioBroker.StateValue): string => {\n    if (!val) {\n        return text.replace(config.time, '\"Invalid Date\"');\n    }\n    const date = new Date(Number(String(val)));\n\n    return text.replace(config.time, isNaN(date.getTime()) ? '\"Invalid Date\"' : toLocaleDate(date));\n};\n\n/**\n * Extract time values from timestamp\n *\n * @param tsInMs Timestamp in milliseconds\n *\n * Unit Test\n */\nexport function extractTimeValues(tsInMs: number): ExtractTimeValues {\n    if (isNaN(tsInMs) || tsInMs < 0) {\n        return { milliseconds: NaN, seconds: NaN, minutes: NaN, hours: NaN, day: NaN, month: NaN, year: NaN };\n    }\n    const date = new Date(tsInMs); //https://it-tools.tech/date-converter\n    const milliseconds = date.getMilliseconds();\n    const seconds = date.getSeconds();\n    const minutes = date.getMinutes();\n    const hours = Number(\n        new Intl.DateTimeFormat(defaultLocale, {\n            hour: '2-digit',\n            hour12: false,\n            timeZone: timezone,\n        })\n            .formatToParts(new Date(tsInMs))\n            .find(part => part.type === 'hour')?.value,\n    );\n    const day = Number(date.toLocaleString(defaultLocale, { day: '2-digit' }));\n    const month = Number(date.toLocaleString(defaultLocale, { month: '2-digit' }));\n    const year = Number(date.toLocaleString(defaultLocale, { year: 'numeric' }));\n    return { milliseconds, seconds, minutes, hours, day, month, year };\n}\n\n/**\n * Get time values with leading zeros\n * => 1 becomes 01\n *\n * @param root0 Object with time values\n * @param root0.milliseconds Milliseconds\n * @param root0.seconds Seconds\n * @param root0.day Day\n * @param root0.minutes Minutes\n * @param root0.year Year\n * @param root0.month Month\n * @param root0.hours Hours\n *\n * Unit Test\n */\nexport function getTimeWithPad({\n    milliseconds,\n    seconds,\n    day,\n    minutes,\n    year,\n    month,\n    hours,\n}: ExtractTimeValues): GetTimeWithPad {\n    return {\n        ms: pad(milliseconds, 3),\n        s: pad(seconds),\n        m: pad(minutes),\n        h: pad(hours),\n        d: pad(day),\n        mo: pad(month),\n        y: year.toString(),\n    };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgD;AAEhD,oBAAoB;AAWb,MAAM,eAAe,CAAC,IAAU,YAAuD;AAb9F;AAcI,SAAO,GAAG,oBAAmB,wCAAS,WAAT,YAAmB,6BAAe;AAAA,IAC3D,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,WAAU,wCAAS,OAAT,YAAe;AAAA,EAC7B,CAAC;AACL;AAUO,MAAM,wBAAwB,CAAC,MAAc,QAAsC;AACtF,MAAI,CAAC,KAAK;AACN,WAAO,KAAK,QAAQ,qBAAO,MAAM,gBAAgB;AAAA,EACrD;AACA,QAAM,OAAO,IAAI,KAAK,OAAO,OAAO,GAAG,CAAC,CAAC;AAEzC,SAAO,KAAK,QAAQ,qBAAO,MAAM,MAAM,KAAK,QAAQ,CAAC,IAAI,mBAAmB,aAAa,IAAI,CAAC;AAClG;AASO,SAAS,kBAAkB,QAAmC;AA/CrE;AAgDI,MAAI,MAAM,MAAM,KAAK,SAAS,GAAG;AAC7B,WAAO,EAAE,cAAc,KAAK,SAAS,KAAK,SAAS,KAAK,OAAO,KAAK,KAAK,KAAK,OAAO,KAAK,MAAM,IAAI;AAAA,EACxG;AACA,QAAM,OAAO,IAAI,KAAK,MAAM;AAC5B,QAAM,eAAe,KAAK,gBAAgB;AAC1C,QAAM,UAAU,KAAK,WAAW;AAChC,QAAM,UAAU,KAAK,WAAW;AAChC,QAAM,QAAQ;AAAA,KACV,SAAI,KAAK,eAAe,6BAAe;AAAA,MACnC,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,UAAU;AAAA,IACd,CAAC,EACI,cAAc,IAAI,KAAK,MAAM,CAAC,EAC9B,KAAK,UAAQ,KAAK,SAAS,MAAM,MANtC,mBAMyC;AAAA,EAC7C;AACA,QAAM,MAAM,OAAO,KAAK,eAAe,6BAAe,EAAE,KAAK,UAAU,CAAC,CAAC;AACzE,QAAM,QAAQ,OAAO,KAAK,eAAe,6BAAe,EAAE,OAAO,UAAU,CAAC,CAAC;AAC7E,QAAM,OAAO,OAAO,KAAK,eAAe,6BAAe,EAAE,MAAM,UAAU,CAAC,CAAC;AAC3E,SAAO,EAAE,cAAc,SAAS,SAAS,OAAO,KAAK,OAAO,KAAK;AACrE;AAiBO,SAAS,eAAe;AAAA,EAC3B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,GAAsC;AAClC,SAAO;AAAA,IACH,QAAI,mBAAI,cAAc,CAAC;AAAA,IACvB,OAAG,mBAAI,OAAO;AAAA,IACd,OAAG,mBAAI,OAAO;AAAA,IACd,OAAG,mBAAI,KAAK;AAAA,IACZ,OAAG,mBAAI,GAAG;AAAA,IACV,QAAI,mBAAI,KAAK;AAAA,IACb,GAAG,KAAK,SAAS;AAAA,EACrB;AACJ;",
  "names": []
}
