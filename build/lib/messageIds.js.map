{
  "version": 3,
  "sources": ["../../src/lib/messageIds.ts"],
  "sourcesContent": ["import TelegramMenu from \"../main\";\r\nimport { deleteMessageByBot } from \"./botAction\";\r\nimport { getChatID } from \"./utilities\";\r\nimport { error } from \"./logging\";\r\n\r\ninterface Messages {\r\n\t[key: string]: MessageInfos[];\r\n}\r\ninterface MessageInfos {\r\n\tid: ioBroker.StateValue;\r\n\ttime?: number;\r\n\trequest?: ioBroker.StateValue | null | undefined;\r\n}\r\nlet isDeleting = false;\r\nasync function saveMessageIds(state: ioBroker.State, instanceTelegram: string): Promise<void> {\r\n\tconst _this = TelegramMenu.getInstance();\r\n\ttry {\r\n\t\tlet requestMessageId: Messages = {};\r\n\t\tlet requestMessageIdObj = null;\r\n\t\tif (!isDeleting) {\r\n\t\t\trequestMessageIdObj = await _this.getStateAsync(\"communication.requestIds\");\r\n\t\t}\r\n\t\tisDeleting = false;\r\n\t\tconst requestUserIdObj = await _this.getForeignStateAsync(`${instanceTelegram}.communicate.requestChatId`);\r\n\r\n\t\tconst request = await _this.getForeignStateAsync(`${instanceTelegram}.communicate.request`);\r\n\r\n\t\tif (!(requestUserIdObj && requestUserIdObj.val)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\trequestMessageId = requestMessageIdObj && requestMessageIdObj.val ? JSON.parse(requestMessageIdObj.val.toString()) : {};\r\n\r\n\t\tif (!requestMessageId[requestUserIdObj.val.toString()]) {\r\n\t\t\trequestMessageId[requestUserIdObj.val.toString()] = [];\r\n\t\t}\r\n\r\n\t\tif (!requestMessageId[requestUserIdObj.val.toString()]?.find((message) => message.id === state.val)) {\r\n\t\t\trequestMessageId[requestUserIdObj.val.toString()].push({ id: state.val, time: Date.now(), request: request?.val });\r\n\t\t}\r\n\r\n\t\trequestMessageId = removeOldMessageIds(requestMessageId, requestUserIdObj.val.toString());\r\n\t\t_this.setState(\"communication.requestIds\", JSON.stringify(requestMessageId), true);\r\n\t} catch (e: any) {\r\n\t\terror([\r\n\t\t\t{ text: \"Error saveMessageIds:\", val: e.message },\r\n\t\t\t{ text: \"Stack:\", val: e.stack },\r\n\t\t]);\r\n\t}\r\n}\r\nfunction removeOldMessageIds(messages: Messages, chatID: string): Messages {\r\n\tmessages[chatID] = messages[chatID].filter((message) => {\r\n\t\treturn message.time && message.time > Date.now() - 1000 * 60 * 60 * 24 * 2;\r\n\t});\r\n\treturn messages;\r\n}\r\n\r\nconst removeMessageFromList = ({ element, chat_id, copyMessageIds }: { element: any; chat_id: string; copyMessageIds: Messages }): MessageInfos[] => {\r\n\treturn copyMessageIds[chat_id].filter((message) => message.id !== element.id);\r\n};\r\n\r\nasync function deleteMessageIds(\r\n\tuser: string,\r\n\tuserListWithChatID: UserListWithChatId[],\r\n\tinstanceTelegram: string,\r\n\twhatShouldDelete: WhatShouldDelete,\r\n): Promise<void> {\r\n\tconst _this = TelegramMenu.getInstance();\r\n\ttry {\r\n\t\tconst requestMessageIdObj = await _this.getStateAsync(\"communication.requestIds\");\r\n\t\tconst lastMessageId = await _this.getForeignStateAsync(`${instanceTelegram}.communicate.requestMessageId`);\r\n\r\n\t\tif (!requestMessageIdObj || typeof requestMessageIdObj.val !== \"string\" || !JSON.parse(requestMessageIdObj.val)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst chat_id = getChatID(userListWithChatID, user);\r\n\t\tconst messageIds: Messages = JSON.parse(requestMessageIdObj.val);\r\n\r\n\t\tif (lastMessageId && lastMessageId.val) {\r\n\t\t\tmessageIds[chat_id].push({ id: lastMessageId.val.toString() });\r\n\t\t}\r\n\r\n\t\tisDeleting = true;\r\n\t\tconst copyMessageIds = JSON.parse(JSON.stringify(messageIds));\r\n\t\tmessageIds[chat_id].forEach((element, index) => {\r\n\t\t\tif (whatShouldDelete === \"all\" && element.id) {\r\n\t\t\t\tdeleteMessageByBot(instanceTelegram, user, userListWithChatID, parseInt(element.id?.toString()), chat_id);\r\n\t\t\t}\r\n\t\t\tif (whatShouldDelete === \"last\" && index === messageIds[chat_id].length - 1 && element.id) {\r\n\t\t\t\tdeleteMessageByBot(instanceTelegram, user, userListWithChatID, parseInt(element.id?.toString()), chat_id);\r\n\t\t\t}\r\n\t\t\tcopyMessageIds[chat_id] = removeMessageFromList({ element, chat_id, copyMessageIds });\r\n\t\t});\r\n\r\n\t\t_this.setState(\"communication.requestIds\", JSON.stringify(copyMessageIds), true);\r\n\t} catch (e: any) {\r\n\t\terror([\r\n\t\t\t{ text: \"Error deleteMessageIds:\", val: e.message },\r\n\t\t\t{ text: \"Stack:\", val: e.stack },\r\n\t\t]);\r\n\t}\r\n}\r\n\r\nexport { saveMessageIds, deleteMessageIds };\r\n"],
  "mappings": "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",
  "names": ["TelegramMenu"]
}
