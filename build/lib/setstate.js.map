{
  "version": 3,
  "sources": ["../../src/lib/setstate.ts"],
  "sourcesContent": ["import { sendToTelegram } from './telegram';\nimport { checkTypeOfId } from './utilities';\nimport { setDynamicValue } from './dynamicValue';\nimport { decomposeText } from './global';\nimport TelegramMenu from '../main';\nimport { debug, error } from './logging';\nimport type { Part, UserListWithChatId, SetStateIds } from './telegram-menu';\n\nconst modifiedValue = (valueFromSubmenu: string, value: string): string => {\n    if (value && value.includes('{value}')) {\n        return value.replace('{value}', valueFromSubmenu);\n    }\n    return valueFromSubmenu;\n};\nconst isDynamicValueToSet = async (value: string | number | boolean): Promise<string | number | boolean> => {\n    const _this = TelegramMenu.getInstance();\n    if (typeof value === 'string' && value.includes('{id:')) {\n        const result = decomposeText(value, '{id:', '}');\n        const id = result.substring.replace('{id:', '').replace('}', '');\n        const newValue = await _this.getForeignStateAsync(id);\n        if (newValue && newValue.val && typeof newValue.val === 'string') {\n            return value.replace(result.substring, newValue.val);\n        }\n    }\n    return value;\n};\nconst setValue = async (\n    id: string,\n    value: string,\n    SubmenuValuePriority: boolean,\n    valueFromSubmenu: string | number,\n    ack: boolean,\n): Promise<void> => {\n    try {\n        const _this = TelegramMenu.getInstance();\n        let valueToSet;\n        SubmenuValuePriority\n            ? (valueToSet = modifiedValue(valueFromSubmenu as string, value))\n            : (valueToSet = await isDynamicValueToSet(value));\n        await checkTypeOfId(id, valueToSet).then((val: ioBroker.StateValue | ioBroker.SettableState | undefined) => {\n            valueToSet = val;\n            debug([{ text: 'Value to Set:', val: valueToSet }]);\n            if (valueToSet !== undefined && valueToSet !== null) {\n                _this.setForeignState(id, valueToSet, ack);\n            }\n        });\n    } catch (error: any) {\n        error([\n            { text: 'Error setValue', val: error.message },\n            { text: 'Stack', val: error.stack },\n        ]);\n    }\n};\n\nexport const setState = async (\n    part: Part,\n    userToSend: string,\n    valueFromSubmenu: string | number,\n    SubmenuValuePriority: boolean,\n    telegramInstance: string,\n    resize_keyboard: boolean,\n    one_time_keyboard: boolean,\n    userListWithChatID: UserListWithChatId[],\n): Promise<SetStateIds[] | undefined> => {\n    const _this = TelegramMenu.getInstance();\n    try {\n        const setStateIds: SetStateIds[] = [];\n        if (!part.switch) {\n            return;\n        }\n        for (const element of part.switch) {\n            let ack = false;\n            let returnText = element.returnText;\n\n            ack = element?.ack ? element.ack === 'true' : false;\n\n            if (returnText.includes('{setDynamicValue')) {\n                const { confirmText, id } = await setDynamicValue(\n                    returnText,\n                    ack,\n                    element.id,\n                    userToSend,\n                    telegramInstance,\n                    one_time_keyboard,\n                    resize_keyboard,\n                    userListWithChatID,\n                    element.parse_mode,\n                    element.confirm,\n                );\n\n                if (element.confirm) {\n                    setStateIds.push({\n                        id: id || element.id,\n                        confirm: element.confirm,\n                        returnText: confirmText,\n                        userToSend: userToSend,\n                    });\n                    return setStateIds;\n                }\n            }\n\n            if (!returnText.includes(\"{'id':'\")) {\n                setStateIds.push({\n                    id: element.id,\n                    confirm: element.confirm,\n                    returnText: returnText,\n                    userToSend: userToSend,\n                    parse_mode: element.parse_mode,\n                });\n            } else {\n                returnText = returnText.replace(/'/g, '\"');\n                const textToSend = returnText.slice(0, returnText.indexOf('{')).trim();\n                const returnObj = JSON.parse(returnText.slice(returnText.indexOf('{'), returnText.indexOf('}') + 1));\n\n                returnObj.text = returnObj.text + returnText.slice(returnText.indexOf('}') + 1);\n                if (textToSend && textToSend !== '') {\n                    await sendToTelegram({\n                        user: userToSend,\n                        textToSend: textToSend,\n                        keyboard: undefined,\n                        instance: telegramInstance,\n                        resize_keyboard: one_time_keyboard,\n                        one_time_keyboard: resize_keyboard,\n                        userListWithChatID: userListWithChatID,\n                        parse_mode: element.parse_mode,\n                    });\n                }\n\n                setStateIds.push({\n                    id: returnObj.id,\n                    confirm: true,\n                    returnText: returnObj.text,\n                    userToSend: userToSend,\n                });\n            }\n            if (element.toggle) {\n                _this\n                    .getForeignStateAsync(element.id)\n                    .then(val => {\n                        if (val) {\n                            _this.setForeignStateAsync(element.id, !val.val, ack).catch((e: any) => {\n                                error([\n                                    { text: 'Error', val: e.message },\n                                    { text: 'Stack', val: e.stack },\n                                ]);\n                            });\n                        }\n                    })\n                    .catch((e: any) => {\n                        error([\n                            { text: 'Error', val: e.message },\n                            { text: 'Stack', val: e.stack },\n                        ]);\n                    });\n            } else {\n                await setValue(element.id, element.value, SubmenuValuePriority, valueFromSubmenu, ack);\n            }\n        }\n        return setStateIds;\n    } catch (error: any) {\n        error([\n            { text: 'Error Switch', val: error.message },\n            { text: 'Stack', val: error.stack },\n        ]);\n    }\n};\n"],
  "mappings": "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",
  "names": ["TelegramMenu", "error"]
}
