{
  "version": 3,
  "sources": ["../../src/app/dynamicValue.ts"],
  "sourcesContent": ["import { decomposeText } from '../lib/string';\nimport { sendToTelegram } from './telegram';\nimport type { SetDynamicValueObj, UserListWithChatId, SetDynamicValue, TelegramParams } from '../types/types';\n\nconst setDynamicValueObj: SetDynamicValueObj = {};\nexport const setDynamicValue = async (\n    returnText: string,\n    ack: boolean,\n    id: string,\n    userToSend: string,\n    telegramParams: TelegramParams,\n    userListWithChatID: UserListWithChatId[],\n    parse_mode: boolean,\n    confirm: string,\n): Promise<{ confirmText: string; id: string | undefined }> => {\n    const { substring } = decomposeText(returnText, '{setDynamicValue:', '}');\n    let array = substring.split(':');\n    array = isBraceDeleteEntry(array);\n    const text = array[1];\n    if (text) {\n        await sendToTelegram({\n            userToSend,\n            textToSend: text,\n            telegramParams,\n            userListWithChatID,\n            parse_mode,\n        });\n    }\n    setDynamicValueObj[userToSend] = {\n        id,\n        ack,\n        returnText: text,\n        userToSend,\n        parse_mode,\n        confirm,\n        telegramParams,\n        userListWithChatID,\n        valueType: array[2],\n    };\n\n    if (array[3] && array[3] != '') {\n        return { confirmText: array[3], id: array[4] };\n    }\n    return { confirmText: '', id: undefined };\n};\n\nexport const getDynamicValue = (userToSend: string): SetDynamicValue | null => setDynamicValueObj[userToSend] ?? null;\n\nexport const removeUserFromDynamicValue = (userToSend: string): boolean => {\n    if (setDynamicValueObj[userToSend]) {\n        delete setDynamicValueObj[userToSend];\n        return true;\n    }\n    return false;\n};\n\nfunction isBraceDeleteEntry(array: string[]): string[] {\n    if (array[4] === '}') {\n        return array.slice(0, 4);\n    }\n    return array;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA8B;AAC9B,sBAA+B;AAG/B,MAAM,qBAAyC,CAAC;AACzC,MAAM,kBAAkB,OAC3B,YACA,KACA,IACA,YACA,gBACA,oBACA,YACA,YAC2D;AAC3D,QAAM,EAAE,UAAU,QAAI,6BAAc,YAAY,qBAAqB,GAAG;AACxE,MAAI,QAAQ,UAAU,MAAM,GAAG;AAC/B,UAAQ,mBAAmB,KAAK;AAChC,QAAM,OAAO,MAAM,CAAC;AACpB,MAAI,MAAM;AACN,cAAM,gCAAe;AAAA,MACjB;AAAA,MACA,YAAY;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AACA,qBAAmB,UAAU,IAAI;AAAA,IAC7B;AAAA,IACA;AAAA,IACA,YAAY;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAW,MAAM,CAAC;AAAA,EACtB;AAEA,MAAI,MAAM,CAAC,KAAK,MAAM,CAAC,KAAK,IAAI;AAC5B,WAAO,EAAE,aAAa,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,EAAE;AAAA,EACjD;AACA,SAAO,EAAE,aAAa,IAAI,IAAI,OAAU;AAC5C;AAEO,MAAM,kBAAkB,CAAC,eAA4C;AA9C5E;AA8C+E,kCAAmB,UAAU,MAA7B,YAAkC;AAAA;AAE1G,MAAM,6BAA6B,CAAC,eAAgC;AACvE,MAAI,mBAAmB,UAAU,GAAG;AAChC,WAAO,mBAAmB,UAAU;AACpC,WAAO;AAAA,EACX;AACA,SAAO;AACX;AAEA,SAAS,mBAAmB,OAA2B;AACnD,MAAI,MAAM,CAAC,MAAM,KAAK;AAClB,WAAO,MAAM,MAAM,GAAG,CAAC;AAAA,EAC3B;AACA,SAAO;AACX;",
  "names": []
}
