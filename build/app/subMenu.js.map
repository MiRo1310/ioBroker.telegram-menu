{
  "version": 3,
  "sources": ["../../src/app/subMenu.ts"],
  "sourcesContent": ["import { switchBack } from './backMenu';\nimport { handleSetState } from './setstate';\nimport { sendToTelegram, sendToTelegramSubmenu } from './telegram';\nimport { checkStatusInfo } from '../lib/utilities';\nimport { deleteMessageIds } from './messageIds';\nimport { dynamicSwitchMenu } from './dynamicSwitchMenu';\nimport type {\n    AllMenusWithData,\n    BackMenuType,\n    CreateMenu,\n    DeleteMessageIds,\n    Keyboard,\n    KeyboardItems,\n    Navigation,\n    Part,\n    SetFirstMenuValue,\n    SetSecondMenuValue,\n    SetValueForSubmenuNumber,\n    SetValueForSubmenuPercent,\n    SplittedData,\n    TelegramParams,\n} from '../types/types';\nimport { isNonEmptyString, jsonString } from '../lib/string';\nimport { adapter } from '../main';\nimport { errorLogger } from './logging';\nimport { getMenuValues } from '../lib/splitValues';\n\nlet step = 0;\nlet splittedData: SplittedData = [];\n\nconst isMenuBack = (str: string): boolean => str.includes('menu:back');\n\nconst deleteMessages = async ({\n    telegramParams,\n    userToSend,\n    device2Switch,\n    callbackData,\n}: DeleteMessageIds): Promise<{ navToGoBack: string } | undefined> => {\n    if (callbackData.includes('deleteAll')) {\n        await deleteMessageIds(userToSend, telegramParams, 'all');\n    }\n    if (isNonEmptyString(device2Switch)) {\n        return { navToGoBack: device2Switch };\n    }\n    return;\n};\n\nconst createSubmenuPercent = (obj: CreateMenu): { text?: string; keyboard: Keyboard; device: string } => {\n    const { callbackData, device2Switch } = obj;\n\n    step = parseFloat(callbackData.replace('percent', ''));\n    let rowEntries = 0;\n    let menu: KeyboardItems[] = [];\n    const keyboard: Keyboard = {\n        inline_keyboard: [],\n    };\n    for (let i = 100; i >= 0; i -= step) {\n        menu.push({\n            text: `${i}%`,\n            callback_data: `submenu:percent${step},${i}:${device2Switch}`,\n        });\n        if (i != 0 && i - step < 0) {\n            menu.push({\n                text: `0%`,\n                callback_data: `submenu:percent${step},${0}:${device2Switch}`,\n            });\n        }\n        rowEntries++;\n        if (rowEntries == 8) {\n            keyboard.inline_keyboard.push(menu);\n            menu = [];\n            rowEntries = 0;\n        }\n    }\n\n    if (rowEntries != 0) {\n        keyboard.inline_keyboard.push(menu);\n    }\n    return { text: obj.text, keyboard: keyboard, device: device2Switch };\n};\n\nconst setFirstMenuValue = async ({ telegramParams, userToSend, part }: SetFirstMenuValue): Promise<void> => {\n    let val;\n    adapter.log.debug(`SplitData: ${jsonString(splittedData)}`);\n\n    if (splittedData[1].split('.')[1] == 'false') {\n        val = false;\n    } else if (splittedData[1].split('.')[1] == 'true') {\n        val = true;\n    } else {\n        val = splittedData[1].split('.')[1];\n    }\n    await handleSetState(part, userToSend, val as string, true, telegramParams);\n};\n\nconst setSecondMenuValue = async ({ telegramParams, part, userToSend }: SetSecondMenuValue): Promise<void> => {\n    let val;\n    if (splittedData[2].split('.')[1] == 'false') {\n        val = false;\n    } else if (splittedData[2].split('.')[1] == 'true') {\n        val = true;\n    } else {\n        val = splittedData[2].split('.')[1];\n    }\n    await handleSetState(part, userToSend, val as string, true, telegramParams);\n};\n\nconst createSubmenuNumber = (obj: CreateMenu): { text?: string; keyboard: Keyboard; device: string } => {\n    let callbackData = obj.callbackData;\n    const device2Switch = obj.device2Switch;\n\n    if (callbackData.includes('(-)')) {\n        callbackData = callbackData.replace('(-)', 'negativ');\n    }\n    const splittedData = callbackData.replace('number', '').split('-');\n    let rowEntries = 0;\n    let menu: { text: string; callback_data: string }[] = [];\n    const keyboard: Keyboard = {\n        inline_keyboard: [],\n    };\n    let unit = '';\n    if (splittedData[3] != '') {\n        unit = splittedData[3];\n    }\n    let start: number, end: number;\n    const firstValueInText = parseFloat(\n        splittedData[0].includes('negativ') ? splittedData[0].replace('negativ', '-') : splittedData[0],\n    );\n    const secondValueInText = parseFloat(\n        splittedData[1].includes('negativ') ? splittedData[1].replace('negativ', '-') : splittedData[1],\n    );\n\n    if (firstValueInText < secondValueInText) {\n        start = secondValueInText;\n        end = firstValueInText;\n    } else {\n        start = firstValueInText;\n        end = secondValueInText;\n    }\n    let index = -1;\n\n    let maxEntriesPerRow = 8;\n    const step = parseFloat(\n        splittedData[2].includes('negativ') ? splittedData[2].replace('negativ', '-') : splittedData[2],\n    );\n    if (step < 1) {\n        maxEntriesPerRow = 6;\n    }\n\n    for (let i = start; i >= end; i -= step) {\n        // Zahlen umdrehen\n        if (parseFloat(splittedData[0]) < parseFloat(splittedData[1])) {\n            if (i === start) {\n                index = end - step;\n            }\n            index = index + step;\n        } else {\n            index = i;\n        }\n        menu.push({\n            text: `${index}${unit}`,\n            callback_data: `submenu:${callbackData}:${device2Switch}:${index}`,\n        });\n        rowEntries++;\n        if (rowEntries == maxEntriesPerRow) {\n            keyboard.inline_keyboard.push(menu);\n            menu = [];\n            rowEntries = 0;\n        }\n    }\n\n    if (rowEntries != 0) {\n        keyboard.inline_keyboard.push(menu);\n    }\n    adapter.log.debug(`Keyboard: ${jsonString(keyboard)}`);\n\n    return { text: obj.text, keyboard, device: device2Switch };\n};\n\nconst createSwitchMenu = ({\n    device2Switch,\n    callbackData,\n    text,\n}: CreateMenu): { text?: string; keyboard: Keyboard; device: string } => {\n    splittedData = callbackData.split('-');\n    const keyboard = {\n        inline_keyboard: [\n            [\n                {\n                    text: splittedData[1].split('.')[0],\n                    callback_data: `menu:first:${device2Switch}`,\n                },\n                {\n                    text: splittedData[2].split('.')[0],\n                    callback_data: `menu:second:${device2Switch}`,\n                },\n            ],\n        ],\n    };\n    return { text: text, keyboard, device: device2Switch };\n};\n\nconst getSubmenuNumberVales = (str: string): { callbackData: string; device: string; value: number } => {\n    const splitText = str.split(':'); // submenu:number2-8-1-\u00B0C:SetMenuNumber:3\n    return { callbackData: splitText[1], device: splitText[2], value: parseFloat(splitText[3]) };\n};\n\nconst setValueForSubmenuPercent = async ({\n    part,\n    userToSend,\n    telegramParams,\n    calledValue,\n}: SetValueForSubmenuPercent): Promise<void> => {\n    const value = parseInt(calledValue.split(':')[1].split(',')[1]);\n\n    await handleSetState(part, userToSend, value, true, telegramParams);\n};\n\nconst setValueForSubmenuNumber = async ({\n    callbackData,\n    calledValue,\n    userToSend,\n    telegramParams,\n    part,\n}: SetValueForSubmenuNumber): Promise<void> => {\n    adapter.log.debug(`CallbackData: ${callbackData}`);\n\n    const { value } = getSubmenuNumberVales(calledValue);\n    await handleSetState(part, userToSend, value, true, telegramParams);\n};\n\nconst back = async ({ telegramParams, userToSend, allMenusWithData, menus }: BackMenuType): Promise<void> => {\n    const result = await switchBack(userToSend, allMenusWithData, menus);\n    if (result) {\n        const { menuToSend, parse_mode, textToSend = '' } = result;\n        await sendToTelegram({\n            userToSend,\n            textToSend,\n            keyboard: menuToSend,\n            parse_mode,\n            telegramParams,\n        });\n    }\n};\n\nexport async function callSubMenu({\n    jsonStringNav,\n    userToSend,\n    telegramParams,\n    part,\n    allMenusWithData,\n    menus,\n    navObj,\n}: {\n    jsonStringNav: string;\n    userToSend: string;\n    telegramParams: TelegramParams;\n    part: Part;\n    allMenusWithData: AllMenusWithData;\n    menus: string[];\n    navObj?: Navigation;\n}): Promise<{ newNav: string | undefined } | undefined> {\n    try {\n        const obj = await subMenu({\n            jsonStringNav,\n            userToSend,\n            telegramParams,\n            part,\n            allMenusWithData,\n            menus,\n            navObj,\n        });\n        adapter.log.debug(`Submenu: ${jsonString(obj)}`);\n\n        if (obj?.text && obj?.keyboard) {\n            sendToTelegramSubmenu(userToSend, obj.text, obj.keyboard, telegramParams, part.parse_mode);\n        }\n        return { newNav: obj?.navToGoBack };\n    } catch (e: any) {\n        errorLogger('Error callSubMenu:', e, adapter);\n    }\n}\n\nfunction isCreateSubmenuNumber(jsonStringNav: string, callbackData: string): boolean {\n    return !jsonStringNav.includes('submenu') && callbackData.includes('number');\n}\n\nexport async function subMenu({\n    jsonStringNav,\n    userToSend,\n    telegramParams,\n    part,\n    allMenusWithData,\n    menus,\n    navObj,\n}: {\n    jsonStringNav: string;\n    userToSend: string;\n    telegramParams: TelegramParams;\n    part: Part;\n    allMenusWithData: AllMenusWithData;\n    menus: string[];\n    navObj?: Navigation;\n}): Promise<{ text?: string; keyboard?: Keyboard; device?: string; navToGoBack?: string } | undefined> {\n    try {\n        adapter.log.debug(`Menu : ${navObj?.[0][0]}`);\n\n        const text = await checkStatusInfo(part.text);\n        const { callbackData, device: device2Switch, val } = getMenuValues(jsonStringNav);\n\n        if (callbackData.includes('delete') && device2Switch) {\n            return await deleteMessages({\n                userToSend,\n                telegramParams,\n                device2Switch,\n                callbackData,\n            });\n        }\n        if (callbackData.includes('switch') && device2Switch) {\n            return createSwitchMenu({ callbackData, text, device2Switch });\n        }\n        if (callbackData.includes('first')) {\n            await setFirstMenuValue({\n                part,\n                userToSend,\n                telegramParams,\n            });\n        }\n        if (callbackData.includes('second')) {\n            await setSecondMenuValue({\n                part,\n                userToSend,\n                telegramParams,\n            });\n        }\n        if (callbackData.includes('dynSwitch') && device2Switch) {\n            return dynamicSwitchMenu(jsonStringNav, device2Switch, text);\n        }\n        if (callbackData.includes('dynS') && val) {\n            await handleSetState(part, userToSend, val, true, telegramParams); //SetDynamicValue\n        }\n        if (!jsonStringNav.includes('submenu') && callbackData.includes('percent') && device2Switch) {\n            return createSubmenuPercent({ callbackData, text, device2Switch });\n        }\n        if (jsonStringNav.includes(`submenu:percent${step}`)) {\n            await setValueForSubmenuPercent({\n                callbackData,\n                calledValue: jsonStringNav,\n                userToSend,\n                telegramParams,\n                part,\n                allMenusWithData,\n                menus,\n            });\n        }\n        if (isCreateSubmenuNumber(jsonStringNav, callbackData) && device2Switch) {\n            return createSubmenuNumber({ callbackData, text, device2Switch });\n        }\n        if (jsonStringNav.includes(`submenu:${callbackData}`)) {\n            await setValueForSubmenuNumber({\n                callbackData,\n                calledValue: jsonStringNav,\n                userToSend,\n                telegramParams,\n                part,\n            });\n        }\n        if (isMenuBack(jsonStringNav)) {\n            await back({\n                userToSend,\n                allMenusWithData,\n                menus,\n                telegramParams,\n            });\n        }\n    } catch (error: any) {\n        errorLogger('Error subMenu:', error, adapter);\n    }\n}\n"],
  "mappings": "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",
  "names": ["splittedData", "step"]
}
