{
  "version": 3,
  "sources": ["../../src/app/subMenu.ts"],
  "sourcesContent": ["import { switchBack } from './backMenu';\nimport { setState } from './setstate';\nimport { sendToTelegram, sendToTelegramSubmenu } from './telegram';\nimport { checkStatusInfo } from '../lib/utilities';\nimport { _subscribeAndUnSubscribeForeignStatesAsync } from './subscribeStates';\nimport { deleteMessageIds } from './messageIds';\nimport { dynamicSwitch } from './dynamicSwitch';\nimport type {\n    BackMenuType,\n    CreateMenu,\n    DeleteMessageIds,\n    Keyboard,\n    KeyboardItems,\n    Navigation,\n    NewObjectStructure,\n    Part,\n    SetDynamicValueType,\n    SetFirstMenuValue,\n    SetSecondMenuValue,\n    SetStateIds,\n    SetValueForSubmenuNumber,\n    SetValueForSubmenuPercent,\n    SplittedData,\n    UserListWithChatId,\n} from '../types/types';\nimport { jsonString, parseJSON } from '../lib/string';\nimport { adapter } from '../main';\nimport { errorLogger } from './logging';\n\nlet step = 0;\nlet returnIDToListenTo: SetStateIds[] = [];\nlet splittedData: SplittedData = [];\n\nconst getMenuValues = (obj: string[]): { callbackData: string; device: string; val: string } => {\n    const splitText = obj[0].split(':');\n\n    return { callbackData: splitText[1], device: splitText[2], val: splitText[3] };\n};\n\nconst deleteMessages = async (obj: DeleteMessageIds): Promise<{ navToGoBack: string } | undefined> => {\n    const navToGoBack = obj.device2Switch;\n    if (obj.callbackData.includes('deleteAll')) {\n        await deleteMessageIds(obj.userToSend, obj.userListWithChatID, obj.instanceTelegram, 'all');\n    }\n    if (navToGoBack && navToGoBack != '') {\n        return { navToGoBack: navToGoBack };\n    }\n    return;\n};\n\nconst setDynamicValue = async (obj: SetDynamicValueType): Promise<{ returnIds: SetStateIds[] }> => {\n    adapter.log.debug(`State: ${obj.val}`);\n\n    const result = await setState(\n        obj.part,\n        obj.userToSend,\n        obj.val,\n        true,\n        obj.telegramInstance,\n        obj.resize_keyboard,\n        obj.one_time_keyboard,\n        obj.userListWithChatID,\n    );\n    if (Array.isArray(result)) {\n        returnIDToListenTo = result;\n    }\n    return {\n        returnIds: returnIDToListenTo,\n    };\n};\n\nconst createSubmenuPercent = (obj: CreateMenu): { text?: string; keyboard: Keyboard; device: string } => {\n    const { callbackData, device2Switch } = obj;\n\n    step = parseFloat(callbackData.replace('percent', ''));\n    let rowEntries = 0;\n    let menu: KeyboardItems[] = [];\n    const keyboard: Keyboard = {\n        inline_keyboard: [],\n    };\n    for (let i = 100; i >= 0; i -= step) {\n        menu.push({\n            text: `${i}%`,\n            callback_data: `submenu:percent${step},${i}:${device2Switch}`,\n        });\n        if (i != 0 && i - step < 0) {\n            menu.push({\n                text: `0%`,\n                callback_data: `submenu:percent${step},${0}:${device2Switch}`,\n            });\n        }\n        rowEntries++;\n        if (rowEntries == 8) {\n            keyboard.inline_keyboard.push(menu);\n            menu = [];\n            rowEntries = 0;\n        }\n    }\n\n    if (rowEntries != 0) {\n        keyboard.inline_keyboard.push(menu);\n    }\n    return { text: obj.text, keyboard: keyboard, device: device2Switch };\n};\n\nconst setFirstMenuValue = async (obj: SetFirstMenuValue): Promise<{ returnIds: SetStateIds[] }> => {\n    let val;\n    adapter.log.debug(`SplitData: ${jsonString(splittedData)}`);\n\n    if (splittedData[1].split('.')[1] == 'false') {\n        val = false;\n    } else if (splittedData[1].split('.')[1] == 'true') {\n        val = true;\n    } else {\n        val = splittedData[1].split('.')[1];\n    }\n    const result = await setState(\n        obj.part,\n        obj.userToSend,\n        val as string,\n        true,\n        obj.telegramInstance,\n        obj.resize_keyboard,\n        obj.one_time_keyboard,\n        obj.userListWithChatID,\n    );\n    if (Array.isArray(result)) {\n        returnIDToListenTo = result;\n    }\n    return { returnIds: returnIDToListenTo };\n};\n\nconst setSecondMenuValue = async (obj: SetSecondMenuValue): Promise<{ returnIds: SetStateIds[] }> => {\n    let val;\n    if (splittedData[2].split('.')[1] == 'false') {\n        val = false;\n    } else if (splittedData[2].split('.')[1] == 'true') {\n        val = true;\n    } else {\n        val = splittedData[2].split('.')[1];\n    }\n    const result = await setState(\n        obj.part,\n        obj.userToSend,\n        val as string,\n        true,\n        obj.telegramInstance,\n        obj.one_time_keyboard,\n        obj.resize_keyboard,\n        obj.userListWithChatID,\n    );\n    if (Array.isArray(result)) {\n        returnIDToListenTo = result;\n    }\n    return { returnIds: returnIDToListenTo };\n};\n\nconst createSubmenuNumber = (obj: CreateMenu): { text?: string; keyboard: Keyboard; device: string } => {\n    let callbackData = obj.callbackData;\n    const device2Switch = obj.device2Switch;\n\n    if (callbackData.includes('(-)')) {\n        callbackData = callbackData.replace('(-)', 'negativ');\n    }\n    const splittedData = callbackData.replace('number', '').split('-');\n    let rowEntries = 0;\n    let menu: { text: string; callback_data: string }[] = [];\n    const keyboard: Keyboard = {\n        inline_keyboard: [],\n    };\n    let unit = '';\n    if (splittedData[3] != '') {\n        unit = splittedData[3];\n    }\n    let start: number, end: number;\n    const firstValueInText = parseFloat(\n        splittedData[0].includes('negativ') ? splittedData[0].replace('negativ', '-') : splittedData[0],\n    );\n    const secondValueInText = parseFloat(\n        splittedData[1].includes('negativ') ? splittedData[1].replace('negativ', '-') : splittedData[1],\n    );\n\n    if (firstValueInText < secondValueInText) {\n        start = secondValueInText;\n        end = firstValueInText;\n    } else {\n        start = firstValueInText;\n        end = secondValueInText;\n    }\n    let index = -1;\n\n    let maxEntriesPerRow = 8;\n    const step = parseFloat(\n        splittedData[2].includes('negativ') ? splittedData[2].replace('negativ', '-') : splittedData[2],\n    );\n    if (step < 1) {\n        maxEntriesPerRow = 6;\n    }\n\n    for (let i = start; i >= end; i -= step) {\n        // Zahlen umdrehen\n        if (parseFloat(splittedData[0]) < parseFloat(splittedData[1])) {\n            if (i === start) {\n                index = end - step;\n            }\n            index = index + step;\n        } else {\n            index = i;\n        }\n        menu.push({\n            text: `${index}${unit}`,\n            callback_data: `submenu:${callbackData}:${device2Switch}:${index}`,\n        });\n        rowEntries++;\n        if (rowEntries == maxEntriesPerRow) {\n            keyboard.inline_keyboard.push(menu);\n            menu = [];\n            rowEntries = 0;\n        }\n    }\n\n    if (rowEntries != 0) {\n        keyboard.inline_keyboard.push(menu);\n    }\n    adapter.log.debug(`Keyboard: ${jsonString(keyboard)}`);\n\n    return { text: obj.text, keyboard, device: device2Switch };\n};\n\nconst createSwitchMenu = ({\n    device2Switch,\n    callbackData,\n    text,\n}: CreateMenu): { text?: string; keyboard: Keyboard; device: string } => {\n    splittedData = callbackData.split('-');\n    const keyboard = {\n        inline_keyboard: [\n            [\n                {\n                    text: splittedData[1].split('.')[0],\n                    callback_data: `menu:first:${device2Switch}`,\n                },\n                {\n                    text: splittedData[2].split('.')[0],\n                    callback_data: `menu:second:${device2Switch}`,\n                },\n            ],\n        ],\n    };\n    return { text: text, keyboard, device: device2Switch };\n};\n\nconst setValueForSubmenuPercent = async (obj: SetValueForSubmenuPercent): Promise<{ returnIds: SetStateIds[] }> => {\n    const value = parseInt(obj.calledValue.split(':')[1].split(',')[1]);\n\n    const result = await setState(\n        obj.part,\n        obj.userToSend,\n        value,\n        true,\n        obj.telegramInstance,\n        obj.resize_keyboard,\n        obj.one_time_keyboard,\n        obj.userListWithChatID,\n    );\n    if (Array.isArray(result)) {\n        returnIDToListenTo = result;\n    }\n    return { returnIds: returnIDToListenTo };\n};\n\nconst setValueForSubmenuNumber = async (\n    obj: SetValueForSubmenuNumber,\n): Promise<{ returnIds: SetStateIds[]; device2Switch: string }> => {\n    adapter.log.debug(`CallbackData: ${obj.callbackData}`);\n\n    const value = parseFloat(obj.calledValue.split(':')[3]);\n    const device2Switch = obj.calledValue.split(':')[2];\n\n    const result = await setState(\n        obj.part,\n        obj.userToSend,\n        value,\n        true,\n        obj.telegramInstance,\n        obj.resize_keyboard,\n        obj.one_time_keyboard,\n        obj.userListWithChatID,\n    );\n    if (Array.isArray(result)) {\n        returnIDToListenTo = result;\n    }\n    return { returnIds: returnIDToListenTo, device2Switch };\n};\n\nconst back = async (obj: BackMenuType): Promise<void> => {\n    const result = await switchBack(obj.userToSend, obj.allMenusWithData, obj.menus);\n    if (result) {\n        await sendToTelegram({\n            userToSend: obj.userToSend,\n            textToSend: result.texttosend as string,\n            keyboard: result.menuToSend,\n            telegramInstance: obj.telegramInstance,\n            resize_keyboard: obj.resize_keyboard,\n            one_time_keyboard: obj.one_time_keyboard,\n            userListWithChatID: obj.userListWithChatID,\n            parse_mode: result.parse_mode,\n        });\n    }\n};\nasync function callSubMenu(\n    jsonStringNav: string,\n    newObjectNavStructure: NewObjectStructure,\n    userToSend: string,\n    instanceTelegram: string,\n    resize_keyboard: boolean,\n    one_time_keyboard: boolean,\n    userListWithChatID: UserListWithChatId[],\n    part: Part,\n    allMenusWithData: { [key: string]: NewObjectStructure },\n    menus: string[],\n    setStateIdsToListenTo: SetStateIds[] | null,\n    navObj?: Navigation,\n): Promise<{ setStateIdsToListenTo: SetStateIds[] | null; newNav: string | undefined } | undefined> {\n    try {\n        const obj = await subMenu({\n            jsonStringNav: jsonStringNav,\n            userToSend: userToSend,\n            instanceTelegram: instanceTelegram,\n            resize_keyboard: resize_keyboard,\n            one_time_keyboard: one_time_keyboard,\n            userListWithChatID: userListWithChatID,\n            part,\n            allMenusWithData: allMenusWithData,\n            menus,\n            navObj,\n        });\n        adapter.log.debug(`Submenu: ${jsonString(obj)}`);\n\n        if (obj?.returnIds) {\n            setStateIdsToListenTo = obj.returnIds;\n\n            await _subscribeAndUnSubscribeForeignStatesAsync({ array: obj.returnIds });\n        }\n\n        if (obj?.text && obj?.keyboard) {\n            sendToTelegramSubmenu(\n                userToSend,\n                obj.text,\n                obj.keyboard,\n                instanceTelegram,\n                userListWithChatID,\n                part.parse_mode,\n            );\n        }\n        return { setStateIdsToListenTo: setStateIdsToListenTo, newNav: obj?.navToGoBack };\n    } catch (e: any) {\n        errorLogger('Error callSubMenu:', e, adapter);\n    }\n}\n\nasync function subMenu({\n    jsonStringNav,\n    userToSend,\n    instanceTelegram,\n    resize_keyboard,\n    one_time_keyboard,\n    userListWithChatID,\n    part,\n    allMenusWithData,\n    menus,\n    navObj,\n}: {\n    jsonStringNav: string;\n    userToSend: string;\n    instanceTelegram: string;\n    resize_keyboard: boolean;\n    one_time_keyboard: boolean;\n    userListWithChatID: UserListWithChatId[];\n    part: Part;\n    allMenusWithData: { [p: string]: NewObjectStructure };\n    menus: string[];\n    navObj?: Navigation;\n}): Promise<\n    { text?: string; keyboard?: Keyboard; device?: string; returnIds?: SetStateIds[]; navToGoBack?: string } | undefined\n> {\n    try {\n        adapter.log.debug(`Menu : ${navObj?.[0][0]}`);\n\n        let text: string | undefined = '';\n        if (part?.text && part.text != '') {\n            text = await checkStatusInfo(part.text);\n        }\n\n        const { json, isValidJson } = parseJSON<Navigation>(jsonStringNav);\n        if (!isValidJson) {\n            return;\n        }\n        const { callbackData, device: device2Switch, val } = getMenuValues(json[0]);\n\n        if (callbackData.includes('delete')) {\n            return await deleteMessages({\n                userToSend,\n                userListWithChatID,\n                instanceTelegram,\n                device2Switch,\n                callbackData,\n            });\n        } else if (callbackData.includes('switch')) {\n            return createSwitchMenu({ callbackData, text, device2Switch });\n        } else if (callbackData.includes('first')) {\n            return await setFirstMenuValue({\n                part,\n                userToSend,\n                telegramInstance: instanceTelegram,\n                resize_keyboard,\n                one_time_keyboard,\n                userListWithChatID,\n            });\n        } else if (callbackData.includes('second')) {\n            return await setSecondMenuValue({\n                part,\n                userToSend,\n                telegramInstance: instanceTelegram,\n                resize_keyboard,\n                one_time_keyboard,\n                userListWithChatID,\n            });\n        } else if (callbackData.includes('dynSwitch')) {\n            return dynamicSwitch(jsonStringNav, device2Switch, text);\n        } else if (callbackData.includes('dynS')) {\n            return await setDynamicValue({\n                val,\n                userToSend,\n                telegramInstance: instanceTelegram,\n                resize_keyboard,\n                one_time_keyboard,\n                userListWithChatID,\n                part,\n            });\n        } else if (!jsonStringNav.includes('submenu') && callbackData.includes('percent')) {\n            return createSubmenuPercent({ callbackData, text, device2Switch });\n        } else if (jsonStringNav.includes(`submenu:percent${step}`)) {\n            return await setValueForSubmenuPercent({\n                callbackData,\n                calledValue: jsonStringNav,\n                userToSend,\n                telegramInstance: instanceTelegram,\n                resize_keyboard,\n                one_time_keyboard,\n                userListWithChatID,\n                part,\n                allMenusWithData,\n                menus,\n            });\n        } else if (!jsonStringNav.includes('submenu') && callbackData.includes('number')) {\n            return createSubmenuNumber({ callbackData, text, device2Switch });\n        } else if (jsonStringNav.includes(`submenu:${callbackData}`)) {\n            const result = await setValueForSubmenuNumber({\n                callbackData,\n                calledValue: jsonStringNav,\n                userToSend,\n                telegramInstance: instanceTelegram,\n                resize_keyboard,\n                one_time_keyboard,\n                userListWithChatID,\n                part,\n            });\n            // device2Switch = result.device2Switch;\n            return result.returnIds ? { returnIds: result.returnIds } : undefined;\n        } else if (callbackData === 'back') {\n            await back({\n                userToSend,\n                allMenusWithData,\n                menus,\n                telegramInstance: instanceTelegram,\n                resize_keyboard,\n                one_time_keyboard,\n                userListWithChatID,\n            });\n        }\n        return;\n    } catch (error: any) {\n        error([\n            { text: 'Error subMenu:', val: error.message },\n            { text: 'Stack', val: error.stack },\n        ]);\n    }\n}\n\nexport { subMenu, callSubMenu };\n"],
  "mappings": "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",
  "names": ["splittedData", "step"]
}
