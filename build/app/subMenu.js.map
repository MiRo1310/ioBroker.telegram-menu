{
  "version": 3,
  "sources": ["../../src/app/subMenu.ts"],
  "sourcesContent": ["import type {\n    Adapter,\n    AllMenusWithData,\n    BackMenuType,\n    CallSubMenu,\n    CreateMenu,\n    Keyboard,\n    KeyboardItems,\n    Part,\n    SetMenuValue,\n    SplittedData,\n    TelegramParams,\n} from '@b/types/types';\nimport { handleSetState } from '@b/app/setstate';\nimport { isNonEmptyString, jsonString } from '@b/lib/string';\nimport { switchBack } from '@b/app/backMenu';\nimport { sendToTelegram, sendToTelegramSubmenu } from '@b/app/telegram';\nimport { errorLogger } from '@b/app/logging';\nimport { textModifier } from '@b/lib/utilities';\nimport {\n    isCreateDynamicSwitch,\n    isCreateSubmenuNumber,\n    isCreateSubmenuPercent,\n    isCreateSwitch,\n    isDeleteMenu,\n    isFirstMenuValue,\n    isMenuBack,\n    isSecondMenuValue,\n    isSetDynamicSwitchVal,\n    isSetSubmenuNumber,\n    isSetSubmenuPercent,\n} from '@b/app/validateMenus';\nimport { deleteMessageIds } from '@b/app/messageIds';\nimport { getMenuValues, getSubmenuNumberValues } from '@b/lib/splitValues';\nimport { createDynamicSwitchMenu } from '@b/app/dynamicSwitchMenu';\n\nlet step = 0;\nlet splittedData: SplittedData = [];\n\nconst createSubmenuPercent = (obj: CreateMenu): { text?: string; keyboard: Keyboard; device: string } => {\n    const { cbData, menuToHandle } = obj;\n\n    step = parseFloat(cbData.replace('percent', ''));\n    let rowEntries = 0;\n    let menu: KeyboardItems[] = [];\n    const keyboard: Keyboard = {\n        inline_keyboard: [],\n    };\n    for (let i = 100; i >= 0; i -= step) {\n        menu.push({\n            text: `${i}%`,\n            callback_data: `submenu:percent${step},${i}:${menuToHandle}`,\n        });\n        if (i != 0 && i - step < 0) {\n            menu.push({\n                text: `0%`,\n                callback_data: `submenu:percent${step},${0}:${menuToHandle}`,\n            });\n        }\n        rowEntries++;\n        if (rowEntries == 8) {\n            keyboard.inline_keyboard.push(menu);\n            menu = [];\n            rowEntries = 0;\n        }\n    }\n\n    if (rowEntries != 0) {\n        keyboard.inline_keyboard.push(menu);\n    }\n    return { text: obj.text, keyboard: keyboard, device: menuToHandle };\n};\n\nconst setMenuValue = async ({\n    instance,\n    telegramParams,\n    userToSend,\n    part,\n    menuNumber,\n}: SetMenuValue): Promise<void> => {\n    if (!splittedData[menuNumber]) {\n        return;\n    }\n    let val: string | boolean | undefined = splittedData[menuNumber].split('.')?.[1];\n\n    if (val === undefined) {\n        return;\n    }\n\n    if (val === 'false') {\n        val = false;\n    } else if (val === 'true') {\n        val = true;\n    }\n    await handleSetState(instance, part, userToSend, val, telegramParams);\n};\n\nconst createSubmenuNumber = ({\n    cbData,\n    menuToHandle,\n    text,\n    adapter,\n}: CreateMenu): { text?: string; keyboard: Keyboard; menuToHandle: string } => {\n    if (cbData.includes('(-)')) {\n        cbData = cbData.replace('(-)', 'negativ');\n    }\n    const splittedData = cbData.replace('number', '').split('-');\n    let rowEntries = 0;\n    let menu: { text: string; callback_data: string }[] = [];\n    const keyboard: Keyboard = {\n        inline_keyboard: [],\n    };\n    let unit = '';\n    if (splittedData[3] != '') {\n        unit = splittedData[3];\n    }\n    let start: number, end: number;\n    const firstValueInText = parseFloat(\n        splittedData[0].includes('negativ') ? splittedData[0].replace('negativ', '-') : splittedData[0],\n    );\n    const secondValueInText = parseFloat(\n        splittedData[1].includes('negativ') ? splittedData[1].replace('negativ', '-') : splittedData[1],\n    );\n\n    if (firstValueInText < secondValueInText) {\n        start = secondValueInText;\n        end = firstValueInText;\n    } else {\n        start = firstValueInText;\n        end = secondValueInText;\n    }\n    let index = -1;\n\n    let maxEntriesPerRow = 8;\n    const step = parseFloat(\n        splittedData[2].includes('negativ') ? splittedData[2].replace('negativ', '-') : splittedData[2],\n    );\n    if (step < 1) {\n        maxEntriesPerRow = 6;\n    }\n\n    for (let i = start; i >= end; i -= step) {\n        // Zahlen umdrehen\n        if (parseFloat(splittedData[0]) < parseFloat(splittedData[1])) {\n            if (i === start) {\n                index = end - step;\n            }\n            index = index + step;\n        } else {\n            index = i;\n        }\n        menu.push({\n            text: `${index}${unit}`,\n            callback_data: `submenu:${cbData}:${menuToHandle}:${index}`,\n        });\n        rowEntries++;\n        if (rowEntries == maxEntriesPerRow) {\n            keyboard.inline_keyboard.push(menu);\n            menu = [];\n            rowEntries = 0;\n        }\n    }\n\n    if (rowEntries != 0) {\n        keyboard.inline_keyboard.push(menu);\n    }\n    adapter.log.debug(`Keyboard : ${jsonString(keyboard)}`);\n\n    return { text, keyboard, menuToHandle };\n};\n\nconst createSwitchMenu = ({\n    menuToHandle,\n    cbData,\n    text,\n}: CreateMenu): { text?: string; keyboard: Keyboard; device: string } => {\n    splittedData = cbData.split('-');\n    const keyboard = {\n        inline_keyboard: [\n            [\n                {\n                    text: splittedData[1].split('.')[0],\n                    callback_data: `menu:first:${menuToHandle}`,\n                },\n                {\n                    text: splittedData[2].split('.')[0],\n                    callback_data: `menu:second:${menuToHandle}`,\n                },\n            ],\n        ],\n    };\n    return { text: text, keyboard, device: menuToHandle };\n};\n\nconst back = async ({ instance, telegramParams, userToSend, allMenusWithData, menus }: BackMenuType): Promise<void> => {\n    const result = await switchBack(telegramParams.adapter, userToSend, allMenusWithData, menus);\n    if (result) {\n        const { keyboard, parse_mode, textToSend = '' } = result;\n        await sendToTelegram({ instance, userToSend, textToSend, keyboard, parse_mode: parse_mode, telegramParams });\n    }\n};\n\nexport async function callSubMenu({\n    instance,\n    jsonStringNav,\n    userToSend,\n    telegramParams,\n    part,\n    allMenusWithData,\n    menus,\n    adapter,\n}: CallSubMenu): Promise<{ newNav: string | undefined } | undefined> {\n    try {\n        const obj = await subMenu({\n            instance,\n            menuString: jsonStringNav,\n            userToSend,\n            telegramParams,\n            part,\n            allMenusWithData,\n            menus,\n            adapter,\n        });\n        adapter.log.debug(`Submenu : ${jsonString(obj)}`);\n\n        if (obj?.text && obj?.keyboard) {\n            sendToTelegramSubmenu(instance, userToSend, obj.text, obj.keyboard, telegramParams, part.parse_mode);\n        }\n        return { newNav: obj?.navToGoBack };\n    } catch (e: any) {\n        errorLogger('Error callSubMenu:', e, adapter);\n    }\n}\n\nexport async function subMenu({\n    menuString,\n    userToSend,\n    telegramParams,\n    part,\n    allMenusWithData,\n    menus,\n    instance,\n    adapter,\n}: {\n    instance: string;\n    menuString: string;\n    userToSend: string;\n    telegramParams: TelegramParams;\n    part: Part;\n    allMenusWithData: AllMenusWithData;\n    menus: string[];\n    adapter: Adapter;\n}): Promise<{ text?: string; keyboard?: Keyboard; device?: string; navToGoBack?: string } | undefined> {\n    try {\n        adapter.log.debug(`Menu : ${menuString}`);\n\n        const text = await textModifier(adapter, part.text);\n\n        if (isDeleteMenu(menuString)) {\n            await deleteMessageIds(instance, userToSend, telegramParams, 'all');\n            const menu: string | undefined = menuString.split(':')?.[2]?.split('\"')?.[0]; //[[\"menu:deleteAll:\u00DCbersicht\"],[\"\"]]\n            if (menu && isNonEmptyString(menu)) {\n                return { navToGoBack: menu };\n            }\n        }\n\n        const { cbData, menuToHandle, val } = getMenuValues(menuString);\n        if (isCreateSwitch(cbData) && menuToHandle) {\n            return createSwitchMenu({ adapter, cbData, text, menuToHandle: menuToHandle });\n        }\n\n        if (isFirstMenuValue(cbData)) {\n            await setMenuValue({\n                instance,\n                part,\n                userToSend,\n                telegramParams,\n                menuNumber: 1,\n            });\n        }\n\n        if (isSecondMenuValue(cbData)) {\n            await setMenuValue({ instance, part, userToSend, telegramParams, menuNumber: 2 });\n        }\n\n        if (isCreateDynamicSwitch(cbData) && menuToHandle) {\n            return createDynamicSwitchMenu(adapter, menuString, menuToHandle, text);\n        }\n\n        if (isSetDynamicSwitchVal(cbData) && val) {\n            await handleSetState(instance, part, userToSend, val, telegramParams); //SetDynamicValue\n        }\n\n        if (isCreateSubmenuPercent(menuString, cbData) && menuToHandle) {\n            return createSubmenuPercent({ adapter, cbData, text, menuToHandle: menuToHandle });\n        }\n\n        if (isSetSubmenuPercent(menuString, step)) {\n            const value = parseInt(menuString.split(':')[1].split(',')[1]);\n            await handleSetState(instance, part, userToSend, value, telegramParams);\n        }\n\n        if (isCreateSubmenuNumber(menuString, cbData) && menuToHandle) {\n            return createSubmenuNumber({ adapter, cbData, text, menuToHandle: menuToHandle });\n        }\n\n        if (isSetSubmenuNumber(menuString)) {\n            const { value } = getSubmenuNumberValues(menuString);\n            await handleSetState(instance, part, userToSend, value, telegramParams);\n        }\n\n        if (isMenuBack(menuString)) {\n            await back({\n                instance,\n                userToSend,\n                allMenusWithData,\n                menus,\n                telegramParams,\n            });\n        }\n    } catch (error: any) {\n        errorLogger('Error subMenu:', error, adapter);\n    }\n}\n"],
  "mappings": "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",
  "names": ["splittedData", "step"]
}
