{
  "version": 3,
  "sources": ["../../src/app/action.ts"],
  "sourcesContent": ["import { sendToTelegram } from './telegram.js';\nimport { decomposeText } from './global';\nimport { callSubMenu } from './subMenu.js';\nimport { sendNav } from './sendNav.js';\nimport { backMenuFunc } from './backMenu.js';\nimport { debug, errorLogger } from './logging.js';\nimport { _this } from '../main.js';\nimport type {\n    Actions,\n    BindingObject,\n    BooleanString,\n    DataObject,\n    EditArrayButtons,\n    GenerateActionsArrayOfEntries,\n    GenerateActionsNewObject,\n    GeneratedNavMenu,\n    MenuData,\n    MenusWithUsers,\n    Newline,\n    NewObjectNavStructure,\n    Part,\n    Switch,\n    UserInGroup,\n    UserListWithChatId,\n    UserObjectActions,\n} from '../types/types';\n\nconst bindingFunc = async (\n    text: string,\n    userToSend: string,\n    telegramInstance: string,\n    one_time_keyboard: boolean,\n    resize_keyboard: boolean,\n    userListWithChatID: UserListWithChatId[],\n    parse_mode: BooleanString,\n): Promise<void> => {\n    let value;\n\n    try {\n        const substring = decomposeText(text, 'binding:', '}').substring;\n        const arrayOfItems = substring.replace('binding:{', '').replace('}', '').split(';');\n        const bindingObject: BindingObject = {\n            values: {},\n        };\n\n        for (let item of arrayOfItems) {\n            if (!item.includes('?')) {\n                const key = item.split(':')[0];\n                const id = item.split(':')[1];\n\n                const result = await _this.getForeignStateAsync(id);\n                if (result) {\n                    bindingObject.values[key] = result.val?.toString() || '';\n                }\n            } else {\n                Object.keys(bindingObject.values).forEach(function (key) {\n                    item = item.replace(key, bindingObject.values[key]);\n                });\n\n                value = eval(item);\n            }\n        }\n        await sendToTelegram({\n            user: userToSend,\n            textToSend: value,\n            keyboard: undefined,\n            instance: telegramInstance,\n            resize_keyboard: one_time_keyboard,\n            one_time_keyboard: resize_keyboard,\n            userListWithChatID: userListWithChatID,\n            parse_mode: parse_mode,\n        });\n    } catch (e: any) {\n        errorLogger('Error Binding function: ', e);\n    }\n};\n\nfunction calcValue(textToSend: string, val: string): { textToSend: string; val: string } | undefined {\n    const { substring } = decomposeText(textToSend, '{math:', '}');\n    const mathValue = substring.replace('{math:', '').replace('}', '');\n    try {\n        val = eval(val + mathValue);\n        textToSend = textToSend.replace(substring, '');\n\n        return { textToSend: textToSend, val: val };\n    } catch (e: any) {\n        errorLogger('Error Eval:', e);\n    }\n}\n\nfunction checkValueForOneLine(text: string): string {\n    if (!text.includes('&&')) {\n        return `${text}&&`;\n    }\n    return text;\n}\n\nfunction editArrayButtons(val: EditArrayButtons[]): GeneratedNavMenu[] | null {\n    const newVal: GeneratedNavMenu[] = [];\n    try {\n        val.forEach(element => {\n            let value = '';\n            if (typeof element.value === 'string') {\n                value = checkValueForOneLine(element.value);\n            }\n            let array: string[] | string[][] = [];\n            if (value.indexOf('&&') != -1) {\n                array = value.split('&&');\n            }\n\n            if (array.length > 1) {\n                array.forEach(function (element, index: number) {\n                    if (typeof element === 'string') {\n                        let navArray = element.split(',');\n                        navArray = navArray.map(item => item.trim());\n                        array[index] = navArray;\n                    }\n                });\n            } else if (typeof element.value === 'string') {\n                array = element.value.split(',');\n                array.forEach(function (element, index: number) {\n                    array[index] = [element.trim()];\n                });\n            }\n\n            newVal.push({ call: element.call, text: element.text, parse_mode: element.parse_mode, nav: array });\n        });\n\n        return newVal;\n    } catch (err: any) {\n        errorLogger('Error EditArray:', err);\n        return null;\n    }\n}\n\nconst idBySelector = async (\n    selector: string,\n    text: string,\n    userToSend: string,\n    newline: Newline,\n    telegramInstance: string,\n    one_time_keyboard: boolean,\n    resize_keyboard: boolean,\n    userListWithChatID: UserListWithChatId[],\n): Promise<void> => {\n    let text2Send = '';\n    try {\n        if (!selector.includes('functions')) {\n            return;\n        }\n\n        const functions = selector.replace('functions=', '');\n        let enums: string[] | undefined = [];\n        const result = await _this.getEnumsAsync();\n\n        if (!result || !result['enum.functions'][`enum.functions.${functions}`]) {\n            return;\n        }\n        enums = result['enum.functions'][`enum.functions.${functions}`].common.members;\n        if (!enums) {\n            return;\n        }\n        const promises = enums.map(async (id: string) => {\n            const value = await _this.getForeignStateAsync(id);\n            if (value && value.val !== undefined && value.val !== null) {\n                let newText = text;\n                let res;\n\n                if (text.includes('{common.name}')) {\n                    res = await _this.getForeignObjectAsync(id);\n                    _this.log.debug(`Name ${JSON.stringify(res?.common.name)}`);\n\n                    if (res && res.common.name) {\n                        newText = newText.replace('{common.name}', res.common.name as string);\n                    }\n                }\n                if (text.includes('&amp;&amp;')) {\n                    text2Send += newText.replace('&amp;&amp;', value.val as string);\n                } else if (text.includes('&&')) {\n                    text2Send += newText.replace('&&', value.val as string);\n                } else {\n                    text2Send += newText;\n                    text2Send += ` ${value.val}`;\n                }\n            }\n            if (newline === 'true') {\n                text2Send += ' \\n';\n            } else {\n                text2Send += ' ';\n            }\n            _this.log.debug(`text2send ${JSON.stringify(text2Send)}`);\n        });\n        Promise.all(promises)\n            .then(() => {\n                sendToTelegram({\n                    user: userToSend,\n                    textToSend: text2Send,\n                    keyboard: undefined,\n                    instance: telegramInstance,\n                    resize_keyboard: one_time_keyboard,\n                    one_time_keyboard: resize_keyboard,\n                    userListWithChatID: userListWithChatID,\n                    parse_mode: 'false',\n                }).catch(e => {\n                    errorLogger('Error SendToTelegram:', e);\n                });\n                debug([\n                    { text: 'TextToSend:', val: text2Send },\n                    { text: 'UserToSend:', val: userToSend },\n                ]);\n            })\n            .catch(e => {\n                errorLogger('Error Promise:', e);\n            });\n    } catch (error: any) {\n        error([\n            { text: 'Error idBySelector:', val: error.message },\n            { text: 'Stack:', val: error.stack },\n        ]);\n    }\n};\n\nfunction generateNewObjectStructure(val: GeneratedNavMenu[] | null): NewObjectNavStructure | null {\n    try {\n        if (!val) {\n            return null;\n        }\n        const obj: NewObjectNavStructure = {};\n        val.forEach(function (element) {\n            const call = element.call;\n            obj[call] = {\n                nav: element.nav,\n                text: element.text,\n                parse_mode:\n                    element.parse_mode == 'true' || element.parse_mode == 'false' ? element.parse_mode : 'false',\n            };\n        });\n        return obj;\n    } catch (err: any) {\n        errorLogger('Error GenerateNewObjectStructure:', err);\n        return null;\n    }\n}\n\nfunction generateActions(\n    action: Actions,\n    userObject: NewObjectNavStructure,\n): { obj: NewObjectNavStructure; ids: string[] } | undefined {\n    try {\n        const arrayOfEntries: GenerateActionsArrayOfEntries[] = [\n            {\n                objName: 'echarts',\n                name: 'echarts',\n                loop: 'preset',\n                elements: [\n                    { name: 'preset' },\n                    { name: 'echartInstance' },\n                    { name: 'background' },\n                    { name: 'theme' },\n                    { name: 'filename' },\n                ],\n            },\n            {\n                objName: 'loc',\n                name: 'location',\n                loop: 'latitude',\n                elements: [{ name: 'latitude' }, { name: 'longitude' }, { name: 'parse_mode', key: 0 }],\n            },\n            {\n                objName: 'pic',\n                name: 'sendPic',\n                loop: 'IDs',\n                elements: [\n                    { name: 'id', value: 'IDs' },\n                    { name: 'fileName' },\n                    { name: 'delay', value: 'picSendDelay' },\n                ],\n            },\n            {\n                objName: 'get',\n                name: 'getData',\n                loop: 'IDs',\n                elements: [\n                    { name: 'id', value: 'IDs' },\n                    { name: 'text', type: 'text' },\n                    { name: 'newline', value: 'newline_checkbox' },\n                    { name: 'parse_mode', key: 0 },\n                ],\n            },\n            {\n                objName: 'httpRequest',\n                name: 'httpRequest',\n                loop: 'url',\n                elements: [{ name: 'url' }, { name: 'user' }, { name: 'password' }, { name: 'filename' }],\n            },\n        ];\n\n        const listOfSetStateIds: string[] = [];\n        action.set.forEach(function (element, key) {\n            if (key == 0) {\n                userObject[element.trigger[0]] = { switch: [] };\n            }\n            userObject[element.trigger[0]] = { switch: [] };\n            element.IDs.forEach(function (id: string, index: number) {\n                listOfSetStateIds.push(id);\n                const toggle = element.switch_checkbox[index] === 'true';\n                let value;\n\n                if (element.values[index] === 'true' || element.values[index] === 'false') {\n                    value = element.values[index] === 'true';\n                } else {\n                    value = element.values[index];\n                }\n                const newObj: Switch = {\n                    id: element.IDs[index],\n                    value: value.toString(),\n                    toggle: toggle,\n                    confirm: element.confirm[index],\n                    returnText: element.returnText[index],\n                    ack: element.ack ? element.ack[index] : 'false',\n                    parse_mode: element.parse_mode ? element.parse_mode[0] : 'false',\n                };\n                if (userObject[element.trigger[0]] && userObject[element.trigger[0]]?.switch) {\n                    userObject[element.trigger[0]].switch!.push(newObj);\n                }\n            });\n        });\n\n        arrayOfEntries.forEach(item => {\n            if (action[item.objName as keyof Actions]) {\n                action[item.objName as keyof Actions].forEach(function (element, index: number) {\n                    userObject[element.trigger[0]] = { [item.name]: [] };\n                    if (index == 0) {\n                        userObject[element.trigger[0]] = { [item.name as keyof UserObjectActions]: [] };\n                    }\n\n                    (element[item.loop as keyof typeof element] as string[]).forEach(function (\n                        id: string,\n                        key: number,\n                    ) {\n                        const newObj: GenerateActionsNewObject = {};\n                        item.elements.forEach(elementItem => {\n                            const name = elementItem.name;\n                            const value = elementItem.value ? elementItem.value : elementItem.name;\n                            const newKey = elementItem.key ? elementItem.key : key;\n                            let val: string | boolean;\n\n                            if (!element[value as keyof typeof element]) {\n                                val = false;\n                            } else {\n                                val = element[value as keyof typeof element][newKey] || 'false';\n                            }\n\n                            if (elementItem.type == 'text' && typeof val === 'string') {\n                                newObj[name as keyof GenerateActionsNewObject] = val.replace(/&amp;/g, '&') as any;\n                            } else {\n                                newObj[name as keyof GenerateActionsNewObject] = val as any;\n                            }\n                        });\n                        if (item.name && typeof item.name === 'string') {\n                            userObject[element.trigger as string][item?.name as keyof Part].push(newObj);\n                        }\n                    });\n                });\n            }\n        });\n\n        return { obj: userObject, ids: listOfSetStateIds };\n    } catch (err: any) {\n        errorLogger('Error generateActions:', err);\n    }\n}\n\nfunction roundValue(val: string, textToSend: string): { val: string; textToSend: string } | undefined {\n    try {\n        const floatedNumber = parseFloat(val);\n        const { substring, textWithoutSubstring } = decomposeText(textToSend, '{round:', '}');\n\n        const decimalPlaces = substring.split(':')[1].replace('}', '');\n        const floatedString = floatedNumber.toFixed(parseInt(decimalPlaces));\n        return { val: floatedString, textToSend: textWithoutSubstring };\n    } catch (err: any) {\n        errorLogger('Error roundValue:', err);\n    }\n}\n\nconst exchangePlaceholderWithValue = (textToSend: string, text: string | number): string => {\n    let searchString = '';\n    if (textToSend.includes('&&')) {\n        searchString = '&&';\n    } else if (textToSend.includes('&amp;&amp;')) {\n        searchString = '&amp;&amp;';\n    }\n    searchString !== '' && textToSend.toString().indexOf(searchString) != -1\n        ? (textToSend = textToSend.replace(searchString, text.toString()))\n        : (textToSend += ` ${text}`);\n\n    return textToSend;\n};\n\nconst adjustValueType = (value: keyof NewObjectNavStructure, valueType: string): boolean | string | number => {\n    if (valueType == 'number') {\n        if (!parseFloat(value as string)) {\n            _this.log.error(`Error: Value is not a number: ${value}`);\n            return false;\n        }\n        return parseFloat(value as string);\n    }\n    if (valueType == 'boolean') {\n        if (value == 'true') {\n            return true;\n        }\n        _this.log.error(`Error: Value is not a boolean: ${value}`);\n        return false;\n    }\n    return value;\n};\n\nconst checkEvent = async (\n    dataObject: DataObject,\n    id: string,\n    state: ioBroker.State,\n    menuData: MenuData,\n    userListWithChatID: UserListWithChatId[],\n    instanceTelegram: string,\n    resize_keyboard: boolean,\n    one_time_keyboard: boolean,\n    usersInGroup: UserInGroup,\n): Promise<boolean> => {\n    const menuArray: string[] = [];\n    let ok = false;\n    let calledNav = '';\n    Object.keys(dataObject.action).forEach(menu => {\n        if (dataObject.action[menu] && dataObject.action[menu].events) {\n            dataObject.action[menu].events.forEach(event => {\n                if (event.ID[0] == id && event.ack[0] == state.ack.toString()) {\n                    if ((state.val == true || state.val == 'true') && event.condition == 'true') {\n                        ok = true;\n                        menuArray.push(menu);\n                        calledNav = event.menu[0];\n                    } else if ((state.val == false || state.val == 'false') && event.condition[0] == 'false') {\n                        ok = true;\n                        menuArray.push(menu);\n                        calledNav = event.menu[0];\n                    } else if (typeof state.val == 'number' && state.val == parseInt(event.condition[0])) {\n                        ok = true;\n                        menuArray.push(menu);\n                        calledNav = event.menu[0];\n                    } else if (state.val == event.condition[0]) {\n                        ok = true;\n                        menuArray.push(menu);\n                        calledNav = event.menu[0];\n                    }\n                }\n            });\n        }\n    });\n    if (ok) {\n        if (menuArray.length >= 1) {\n            for (const menu of menuArray) {\n                if (usersInGroup[menu] && menuData.data[menu][calledNav as keyof DataObject]) {\n                    for (const user of usersInGroup[menu]) {\n                        const part = menuData.data[menu][calledNav as keyof DataObject];\n                        const menus = Object.keys(menuData.data);\n                        if (part.nav) {\n                            backMenuFunc(calledNav, part.nav, user);\n                        }\n                        if (part?.nav && part?.nav[0][0].includes('menu:')) {\n                            await callSubMenu(\n                                JSON.stringify(part?.nav[0]),\n                                menuData,\n                                user,\n                                instanceTelegram,\n                                resize_keyboard,\n                                one_time_keyboard,\n                                userListWithChatID,\n                                part,\n                                menuData.data,\n                                menus,\n                                null,\n                                part.nav,\n                            );\n                        } else {\n                            await sendNav(\n                                part,\n                                user,\n                                instanceTelegram,\n                                userListWithChatID,\n                                resize_keyboard,\n                                one_time_keyboard,\n                            );\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return ok;\n};\n\nconst getUserToSendFromUserListWithChatID = (\n    userListWithChatID: UserListWithChatId[],\n    chatID: string,\n): string | null => {\n    let userToSend: string | null = null;\n\n    for (const element of userListWithChatID) {\n        if (element.chatID == chatID) {\n            userToSend = element.name;\n            break;\n        }\n    }\n\n    return userToSend;\n};\nconst getMenusWithUserToSend = (menusWithUsers: MenusWithUsers, userToSend: string): string[] => {\n    const menus: string[] = [];\n    for (const key in menusWithUsers) {\n        if (menusWithUsers[key].includes(userToSend)) {\n            menus.push(key);\n        }\n    }\n    return menus;\n};\n\nexport {\n    editArrayButtons,\n    idBySelector,\n    generateNewObjectStructure,\n    generateActions,\n    calcValue,\n    roundValue,\n    bindingFunc,\n    exchangePlaceholderWithValue,\n    adjustValueType,\n    checkEvent,\n    getUserToSendFromUserListWithChatID,\n    getMenusWithUserToSend,\n};\n"],
  "mappings": "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",
  "names": ["text", "val", "value", "element", "item", "userToSend", "telegramInstance", "one_time_keyboard", "resize_keyboard", "userListWithChatID", "textToSend", "substring"]
}
