{
  "version": 3,
  "sources": ["../../src/app/action.ts"],
  "sourcesContent": ["import { sendToTelegram } from './telegram';\nimport { callSubMenu } from './subMenu';\nimport { sendNav } from './sendNav';\nimport { backMenuFunc } from './backMenu';\nimport { errorLogger } from './logging';\nimport { adapter } from '../main';\nimport type {\n    Actions,\n    BindingObject,\n    BooleanString,\n    DataObject,\n    GenerateActionsArrayOfEntries,\n    GenerateActionsNewObject,\n    MenuData,\n    NewObjectStructure,\n    Part,\n    Switch,\n    TelegramParams,\n    UserListWithChatId,\n    UserObjectActions,\n    UsersInGroup,\n} from '../types/types';\nimport { decomposeText, getNewline, jsonString } from '../lib/string';\nimport { isDefined, isTruthy } from '../lib/utils';\nimport { evaluate } from '../lib/math';\nimport { config } from '../config/config';\n\nconst bindingFunc = async (\n    text: string,\n    userToSend: string,\n    telegramParams: TelegramParams,\n    parse_mode?: boolean,\n): Promise<void> => {\n    let textToSend;\n\n    try {\n        const { substringExcludeSearch } = decomposeText(text, config.binding.start, config.binding.end);\n        const arrayOfItems = substringExcludeSearch.split(config.binding.splitChar);\n        const bindingObject: BindingObject = {\n            values: {},\n        };\n\n        for (let item of arrayOfItems) {\n            if (!item.includes('?')) {\n                const array = item.split(':');\n                const key = array[0];\n                const id = array[1];\n\n                const result = await adapter.getForeignStateAsync(id);\n                if (result) {\n                    bindingObject.values[key] = result.val?.toString() ?? '';\n                }\n            } else {\n                Object.keys(bindingObject.values).forEach(function (key) {\n                    item = item.replace(key, bindingObject.values[key]);\n                });\n\n                const { val } = evaluate(item, adapter);\n                textToSend = String(val);\n            }\n        }\n        await sendToTelegram({\n            userToSend,\n            textToSend,\n            telegramParams,\n            parse_mode,\n        });\n    } catch (e: any) {\n        errorLogger('Error Binding function: ', e, adapter);\n    }\n};\n\nconst idBySelector = async ({\n    selector,\n    text,\n    userToSend,\n    newline,\n    telegramParams,\n}: {\n    selector: string;\n    text: string;\n    userToSend: string;\n    newline: BooleanString;\n    telegramParams: TelegramParams;\n}): Promise<void> => {\n    let text2Send = '';\n    try {\n        const functions = selector.replace(config.functionSelektor, '');\n        let enums: string[] | undefined = [];\n        const result = await adapter.getEnumsAsync();\n\n        if (!result?.['enum.functions'][`enum.functions.${functions}`]) {\n            return;\n        }\n        enums = result['enum.functions'][`enum.functions.${functions}`].common.members;\n        if (!enums) {\n            return;\n        }\n\n        const promises = enums.map(async (id: string) => {\n            const value = await adapter.getForeignStateAsync(id);\n            if (isDefined(value?.val)) {\n                let newText = text;\n                let res;\n\n                if (text.includes('{common.name}')) {\n                    res = await adapter.getForeignObjectAsync(id);\n                    adapter.log.debug(`Name ${jsonString(res?.common.name)}`);\n\n                    if (res && typeof res.common.name === 'string') {\n                        newText = newText.replace('{common.name}', res.common.name);\n                    }\n                }\n                if (text.includes('&amp;&amp;')) {\n                    text2Send += newText.replace('&amp;&amp;', String(value.val));\n                } else if (text.includes('&&')) {\n                    text2Send += newText.replace('&&', String(value.val));\n                } else {\n                    text2Send += newText;\n                    text2Send += ` ${value.val}`;\n                }\n            }\n\n            text2Send += getNewline(newline);\n\n            adapter.log.debug(`text2send ${JSON.stringify(text2Send)}`);\n        });\n        Promise.all(promises)\n            .then(async () => {\n                await sendToTelegram({\n                    userToSend,\n                    textToSend: text2Send,\n                    telegramParams,\n                });\n            })\n            .catch(e => {\n                errorLogger('Error Promise:', e, adapter);\n            });\n    } catch (error: any) {\n        errorLogger('Error idBySelector: ', error, adapter);\n    }\n};\n\nfunction generateActions(\n    action: Actions,\n    userObject: NewObjectStructure,\n): { obj: NewObjectStructure; ids: string[] } | undefined {\n    try {\n        const arrayOfEntries: GenerateActionsArrayOfEntries[] = [\n            {\n                objName: 'echarts',\n                name: 'echarts',\n                loop: 'preset',\n                elements: [\n                    { name: 'preset' },\n                    { name: 'echartInstance' },\n                    { name: 'background' },\n                    { name: 'theme' },\n                    { name: 'filename' },\n                ],\n            },\n            {\n                objName: 'loc',\n                name: 'location',\n                loop: 'latitude',\n                elements: [{ name: 'latitude' }, { name: 'longitude' }, { name: 'parse_mode', key: 0 }],\n            },\n            {\n                objName: 'pic',\n                name: 'sendPic',\n                loop: 'IDs',\n                elements: [\n                    { name: 'id', value: 'IDs' },\n                    { name: 'fileName' },\n                    { name: 'delay', value: 'picSendDelay' },\n                ],\n            },\n            {\n                objName: 'get',\n                name: 'getData',\n                loop: 'IDs',\n                elements: [\n                    { name: 'id', value: 'IDs' },\n                    { name: 'text', type: 'text' },\n                    { name: 'newline', value: 'newline_checkbox' },\n                    { name: 'parse_mode', key: 0 },\n                ],\n            },\n            {\n                objName: 'httpRequest',\n                name: 'httpRequest',\n                loop: 'url',\n                elements: [{ name: 'url' }, { name: 'user' }, { name: 'password' }, { name: 'filename' }],\n            },\n        ];\n\n        const listOfSetStateIds: string[] = [];\n        action.set.forEach(function (\n            { trigger, switch_checkbox, returnText, parse_mode, values, confirm, ack, IDs },\n            key,\n        ) {\n            const triggerName = trigger[0];\n            if (key == 0) {\n                userObject[triggerName] = { switch: [] };\n            }\n            userObject[triggerName] = { switch: [] };\n\n            IDs.forEach(function (id: string, index: number) {\n                listOfSetStateIds.push(id);\n                const toggle = isTruthy(switch_checkbox[index]);\n\n                const newObj: Switch = {\n                    id: IDs[index],\n                    value: values[index],\n                    toggle: toggle,\n                    confirm: confirm[index],\n                    returnText: returnText[index],\n                    ack: isTruthy(ack[index]),\n                    parse_mode: isTruthy(parse_mode[0]),\n                };\n                if (Array.isArray(userObject[triggerName]?.switch)) {\n                    userObject[triggerName].switch.push(newObj);\n                }\n            });\n        });\n\n        arrayOfEntries.forEach(item => {\n            if (action[item.objName as keyof Actions]) {\n                action[item.objName as keyof Actions].forEach(function (element, index: number) {\n                    const trigger = element.trigger[0];\n                    userObject[trigger] = { [item.name]: [] };\n                    if (index == 0) {\n                        userObject[trigger] = { [item.name as keyof UserObjectActions]: [] };\n                    }\n\n                    (element[item.loop as keyof typeof element] as string[]).forEach(function (\n                        id: string,\n                        key: number,\n                    ) {\n                        const newObj = {} as GenerateActionsNewObject;\n                        item.elements.forEach(({ name, value, key: elKey }) => {\n                            const elName = (value ? value : name) as keyof typeof element;\n                            const newKey = elKey ? elKey : key;\n\n                            const val = !element[elName] ? false : element[elName][newKey] || 'false';\n\n                            if (name === 'parse_mode') {\n                                newObj.parse_mode = isTruthy(val);\n                            }\n\n                            if (typeof val === 'string') {\n                                newObj[name as keyof GenerateActionsNewObject] = val.replace(/&amp;/g, '&') as any;\n                            }\n                        });\n\n                        (userObject?.[trigger]?.[item.name as keyof Part] as GenerateActionsNewObject[]).push(newObj);\n                    });\n                });\n            }\n        });\n\n        return { obj: userObject, ids: listOfSetStateIds };\n    } catch (err: any) {\n        errorLogger('Error generateActions:', err, adapter);\n    }\n}\n\nconst adjustValueType = (value: keyof NewObjectStructure, valueType: string): boolean | string | number => {\n    if (valueType == 'number') {\n        if (!parseFloat(value)) {\n            adapter.log.error(`Error: Value is not a number: ${value}`);\n            return false;\n        }\n        return parseFloat(value);\n    }\n    if (valueType == 'boolean') {\n        if (value == 'true') {\n            return true;\n        }\n        adapter.log.error(`Error: Value is not a boolean: ${value}`);\n        return false;\n    }\n    return value;\n};\n\nconst checkEvent = async (\n    dataObject: DataObject,\n    id: string,\n    state: ioBroker.State,\n    menuData: MenuData,\n    telegramParams: TelegramParams,\n    usersInGroup: UsersInGroup,\n): Promise<boolean> => {\n    const menuArray: string[] = [];\n    let ok = false;\n    let calledNav = '';\n    Object.keys(dataObject.action).forEach(menu => {\n        if (dataObject.action[menu]?.events) {\n            dataObject.action[menu].events.forEach(event => {\n                if (event.ID[0] == id && event.ack[0] == state.ack.toString()) {\n                    if ((state.val == true || state.val == 'true') && event.condition == 'true') {\n                        ok = true;\n                        menuArray.push(menu);\n                        calledNav = event.menu[0];\n                    } else if ((state.val == false || state.val == 'false') && event.condition[0] == 'false') {\n                        ok = true;\n                        menuArray.push(menu);\n                        calledNav = event.menu[0];\n                    } else if (typeof state.val == 'number' && state.val == parseInt(event.condition[0])) {\n                        ok = true;\n                        menuArray.push(menu);\n                        calledNav = event.menu[0];\n                    } else if (state.val == event.condition[0]) {\n                        ok = true;\n                        menuArray.push(menu);\n                        calledNav = event.menu[0];\n                    }\n                }\n            });\n        }\n    });\n    if (ok) {\n        if (menuArray.length >= 1) {\n            for (const menu of menuArray) {\n                if (usersInGroup[menu] && menuData[menu][calledNav as keyof DataObject]) {\n                    for (const user of usersInGroup[menu]) {\n                        const part = menuData[menu][calledNav as keyof DataObject];\n                        const menus = Object.keys(menuData);\n                        if (part.nav) {\n                            backMenuFunc({ startSide: calledNav, navigation: part.nav, userToSend: user });\n                        }\n                        if (part?.nav?.[0][0].includes('menu:')) {\n                            await callSubMenu({\n                                jsonStringNav: JSON.stringify(part.nav[0]),\n                                userToSend: user,\n                                telegramParams: telegramParams,\n                                part: part,\n                                allMenusWithData: menuData,\n                                menus: menus,\n                                navObj: part.nav,\n                            });\n                        } else {\n                            await sendNav(part, user, telegramParams);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return ok;\n};\n\nconst getUserToSendFromUserListWithChatID = (\n    userListWithChatID: UserListWithChatId[],\n    chatID: string,\n): string | null => {\n    let userToSend: string | null = null;\n\n    for (const element of userListWithChatID) {\n        if (element.chatID == chatID) {\n            userToSend = element.name;\n            break;\n        }\n    }\n\n    return userToSend;\n};\n\nexport { idBySelector, generateActions, bindingFunc, adjustValueType, checkEvent, getUserToSendFromUserListWithChatID };\n"],
  "mappings": "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",
  "names": ["_a"]
}
