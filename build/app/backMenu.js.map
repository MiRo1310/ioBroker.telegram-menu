{
  "version": 3,
  "sources": ["../../src/app/backMenu.ts"],
  "sourcesContent": ["import { errorLogger } from './logging';\nimport type { BackMenu, Keyboard, MenuData, Navigation } from '../types/types';\nimport { checkStatusInfo } from '../lib/utilities';\nimport { adapter } from '../main';\nimport { jsonString } from '../lib/string';\nimport { backMenuLength } from '../config/config';\n\nconst backMenu: BackMenu = {};\n\nexport function backMenuFunc({\n    activePage,\n    navigation,\n    userToSend,\n}: {\n    activePage: string;\n    navigation?: Navigation;\n    userToSend: string;\n}): void {\n    if (!navigation || !jsonString(navigation).split(`\"`)[1].includes('menu:')) {\n        const list = backMenu[userToSend]?.list;\n        const lastMenu = backMenu[userToSend]?.last;\n\n        if (list?.length === backMenuLength) {\n            list.shift();\n        }\n        if (!backMenu[userToSend]) {\n            backMenu[userToSend] = { list: [], last: '' };\n        }\n\n        if (lastMenu && lastMenu !== '' && list) {\n            list.push(lastMenu);\n        }\n        backMenu[userToSend].last = activePage;\n    }\n}\n\nexport async function switchBack(\n    userToSend: string,\n    allMenusWithData: MenuData,\n    menus: string[],\n    lastMenu = false,\n): Promise<{ textToSend: string | undefined; keyboard: Keyboard; parse_mode: boolean | undefined } | undefined> {\n    try {\n        const list = backMenu[userToSend]?.list ? backMenu[userToSend].list : [];\n        const lastListElement = list[list.length - 1];\n        const lastElement = backMenu[userToSend]?.last;\n        let keyboard: Keyboard;\n        let foundedMenu = '';\n\n        if (list.length) {\n            for (const menu of menus) {\n                const nav = lastElement ? allMenusWithData[menu]?.[lastElement]?.nav : undefined;\n                const navBefore = allMenusWithData[menu]?.[lastListElement]?.nav;\n\n                if (lastMenu && nav) {\n                    keyboard = nav;\n                    foundedMenu = menu;\n                    break;\n                } else if (navBefore && !lastMenu) {\n                    keyboard = navBefore;\n                    foundedMenu = menu;\n                    break;\n                }\n\n                adapter.log.debug(`Menu call not found in this Menu: ${menu}`);\n            }\n\n            if (keyboard && foundedMenu != '') {\n                if (!lastMenu) {\n                    const listLength = backMenu[userToSend]?.list ? backMenu[userToSend].list.length - 1 : 0;\n                    const lastListElement = backMenu[userToSend]?.list[listLength];\n                    if (!lastListElement) {\n                        return;\n                    }\n                    const { text, parse_mode } = allMenusWithData[foundedMenu][lastListElement];\n                    let textToSend = text;\n                    if (textToSend) {\n                        textToSend = await checkStatusInfo(textToSend);\n                    }\n                    if (backMenu[userToSend]?.last) {\n                        backMenu[userToSend].last = list.pop() ?? '';\n                    }\n\n                    return { textToSend, keyboard, parse_mode };\n                }\n\n                const lastElement = backMenu[userToSend]?.last;\n                if (!lastElement) {\n                    return;\n                }\n                const { parse_mode, text: textToSend } = allMenusWithData[foundedMenu][lastElement];\n\n                return { textToSend, keyboard, parse_mode };\n            }\n        }\n    } catch (e: any) {\n        errorLogger('Error in switchBack:', e, adapter);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA4B;AAE5B,uBAAgC;AAChC,kBAAwB;AACxB,oBAA2B;AAC3B,oBAA+B;AAE/B,MAAM,WAAqB,CAAC;AAErB,SAAS,aAAa;AAAA,EACzB;AAAA,EACA;AAAA,EACA;AACJ,GAIS;AAjBT;AAkBI,MAAI,CAAC,cAAc,KAAC,0BAAW,UAAU,EAAE,MAAM,GAAG,EAAE,CAAC,EAAE,SAAS,OAAO,GAAG;AACxE,UAAM,QAAO,cAAS,UAAU,MAAnB,mBAAsB;AACnC,UAAM,YAAW,cAAS,UAAU,MAAnB,mBAAsB;AAEvC,SAAI,6BAAM,YAAW,8BAAgB;AACjC,WAAK,MAAM;AAAA,IACf;AACA,QAAI,CAAC,SAAS,UAAU,GAAG;AACvB,eAAS,UAAU,IAAI,EAAE,MAAM,CAAC,GAAG,MAAM,GAAG;AAAA,IAChD;AAEA,QAAI,YAAY,aAAa,MAAM,MAAM;AACrC,WAAK,KAAK,QAAQ;AAAA,IACtB;AACA,aAAS,UAAU,EAAE,OAAO;AAAA,EAChC;AACJ;AAEA,eAAsB,WAClB,YACA,kBACA,OACA,WAAW,OACiG;AAzChH;AA0CI,MAAI;AACA,UAAM,SAAO,cAAS,UAAU,MAAnB,mBAAsB,QAAO,SAAS,UAAU,EAAE,OAAO,CAAC;AACvE,UAAM,kBAAkB,KAAK,KAAK,SAAS,CAAC;AAC5C,UAAM,eAAc,cAAS,UAAU,MAAnB,mBAAsB;AAC1C,QAAI;AACJ,QAAI,cAAc;AAElB,QAAI,KAAK,QAAQ;AACb,iBAAW,QAAQ,OAAO;AACtB,cAAM,MAAM,eAAc,4BAAiB,IAAI,MAArB,mBAAyB,iBAAzB,mBAAuC,MAAM;AACvE,cAAM,aAAY,4BAAiB,IAAI,MAArB,mBAAyB,qBAAzB,mBAA2C;AAE7D,YAAI,YAAY,KAAK;AACjB,qBAAW;AACX,wBAAc;AACd;AAAA,QACJ,WAAW,aAAa,CAAC,UAAU;AAC/B,qBAAW;AACX,wBAAc;AACd;AAAA,QACJ;AAEA,4BAAQ,IAAI,MAAM,qCAAqC,IAAI,EAAE;AAAA,MACjE;AAEA,UAAI,YAAY,eAAe,IAAI;AAC/B,YAAI,CAAC,UAAU;AACX,gBAAM,eAAa,cAAS,UAAU,MAAnB,mBAAsB,QAAO,SAAS,UAAU,EAAE,KAAK,SAAS,IAAI;AACvF,gBAAMA,oBAAkB,cAAS,UAAU,MAAnB,mBAAsB,KAAK;AACnD,cAAI,CAACA,kBAAiB;AAClB;AAAA,UACJ;AACA,gBAAM,EAAE,MAAM,YAAAC,YAAW,IAAI,iBAAiB,WAAW,EAAED,gBAAe;AAC1E,cAAIE,cAAa;AACjB,cAAIA,aAAY;AACZ,YAAAA,cAAa,UAAM,kCAAgBA,WAAU;AAAA,UACjD;AACA,eAAI,cAAS,UAAU,MAAnB,mBAAsB,MAAM;AAC5B,qBAAS,UAAU,EAAE,QAAO,UAAK,IAAI,MAAT,YAAc;AAAA,UAC9C;AAEA,iBAAO,EAAE,YAAAA,aAAY,UAAU,YAAAD,YAAW;AAAA,QAC9C;AAEA,cAAME,gBAAc,cAAS,UAAU,MAAnB,mBAAsB;AAC1C,YAAI,CAACA,cAAa;AACd;AAAA,QACJ;AACA,cAAM,EAAE,YAAY,MAAM,WAAW,IAAI,iBAAiB,WAAW,EAAEA,YAAW;AAElF,eAAO,EAAE,YAAY,UAAU,WAAW;AAAA,MAC9C;AAAA,IACJ;AAAA,EACJ,SAAS,GAAQ;AACb,oCAAY,wBAAwB,GAAG,mBAAO;AAAA,EAClD;AACJ;",
  "names": ["lastListElement", "parse_mode", "textToSend", "lastElement"]
}
