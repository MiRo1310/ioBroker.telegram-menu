{
  "version": 3,
  "sources": ["../../src/app/jsonTable.ts"],
  "sourcesContent": ["import { decomposeText, parseJSON } from './global';\nimport { errorLogger } from './logging';\nimport type { LastText, ValArray, KeyboardItem, Keyboard } from '../types/types';\nimport { _this } from '../main';\nimport { jsonString } from '../lib/string';\n\nconst lastText: LastText = {};\nconst createKeyboardFromJson = (\n    val: string,\n    text: string | null,\n    id: string,\n    user: string,\n): { text: string; keyboard: Keyboard } | undefined => {\n    try {\n        if (text) {\n            lastText[user] = text;\n        } else {\n            text = lastText[user];\n        }\n        const array = decomposeText(text, '{json:', '}').substring.split(';');\n        const headline = array[2];\n        const itemArray: string[] = array[1].replace('[', '').replace(']', '').replace(/\"/g, '').split(',');\n        let idShoppingList = false;\n        if (array.length > 3 && array[3] == 'shoppinglist') {\n            idShoppingList = true;\n        }\n\n        _this.log.debug(`Val: ${val} with type: ${typeof val}`);\n\n        const valArray: ValArray[] | undefined = parseJSON(val);\n        if (!valArray) {\n            return;\n        }\n\n        const keyboard: Keyboard = { inline_keyboard: [] };\n\n        valArray.forEach((element, index) => {\n            const firstRow: KeyboardItem[] = [];\n            const rowArray: KeyboardItem[] = [];\n            itemArray.forEach(item => {\n                if (index == 0) {\n                    const btnText: string = item.split(':')[1];\n                    if (btnText.length > 0) {\n                        firstRow.push({ text: btnText, callback_data: '1' });\n                    }\n                }\n                if (idShoppingList) {\n                    const value = element.buttondelete;\n                    const valueDeleteLinkArray = decomposeText(value, \"('\", \"')\")\n                        .substring.replace(\"('\", '')\n                        .replace(\",true')\", '')\n                        .split('.');\n                    const instanceAlexa = valueDeleteLinkArray[1];\n                    const valueDeleteId = valueDeleteLinkArray[5];\n\n                    const instanceShoppingListID = `${id.split('.')[1]}.${id.split('.')[2]}`;\n                    rowArray.push({\n                        text: element[item.split(':')[0]],\n                        callback_data: `sList:${instanceShoppingListID}:${instanceAlexa}:${valueDeleteId}:`,\n                    });\n                } else {\n                    rowArray.push({ text: element[item.split(':')[0]], callback_data: '1' });\n                }\n            });\n            if (index == 0) {\n                keyboard.inline_keyboard.push(firstRow);\n            }\n            keyboard.inline_keyboard.push(rowArray);\n        });\n\n        _this.log.debug(`Keyboard: ${jsonString(keyboard)}`);\n\n        return { text: headline, keyboard };\n    } catch (err: any) {\n        errorLogger('Error createKeyboardFromJson:', err);\n    }\n};\n\nfunction createTextTableFromJson(val: string, textToSend: string): string | undefined {\n    try {\n        if (!val) {\n            return;\n        }\n        const substring = decomposeText(textToSend, '{json:', '}').substring;\n        const array = substring.split(';');\n        const itemArray: string[] = array[1].replace('[', '').replace(']', '').replace(/\"/g, '').split(',');\n        const valArray: ValArray[] = JSON.parse(val);\n        // Array f\u00FCr die Gr\u00F6\u00DFte L\u00E4nge der Items\n        const lengthArray: number[] = [];\n        // Tr\u00E4gt f\u00FCr jedes Item einen Eintrag im lengthArray ein\n        itemArray.forEach(element => {\n            lengthArray.push(element.split(':')[1].length);\n        });\n        valArray.forEach(element => {\n            itemArray.forEach((item, index) => {\n                if (lengthArray[index] < element[item.split(':')[0]].toString().length) {\n                    lengthArray[index] = element[item.split(':')[0]].toString().length;\n                }\n            });\n        });\n        _this.log.debug(`Length of rows: ${jsonString(lengthArray)}`);\n        const headline = array[2];\n        let textTable = textToSend.replace(substring, '').trim();\n        if (textTable != '') {\n            textTable += ' \\n\\n';\n        }\n        textTable += ` ${headline} \\n\\``;\n        const enlargeColumn = 1;\n        const reduce = lengthArray.length == 1 ? 2 : 0;\n        const lineLength = lengthArray.reduce((a, b) => a + b, 0) + 5 - reduce + enlargeColumn * lengthArray.length;\n        // Breakline\n        textTable += `${'-'.repeat(lineLength)} \\n`;\n        valArray.forEach((element, elementIndex) => {\n            itemArray.forEach((item, index) => {\n                // TableHead\n                if (elementIndex == 0 && index == 0) {\n                    textTable += '|';\n                    itemArray.forEach((item2, i) => {\n                        if (item2.split(':')[1].length > 0) {\n                            textTable += ` ${item2\n                                .split(':')[1]\n                                .toString()\n                                .padEnd(lengthArray[i] + enlargeColumn, ' ')}|`;\n                            if (i == itemArray.length - 1) {\n                                textTable += '\\n';\n                                // Breakline\n                                textTable += `${'-'.repeat(lineLength)} \\n`;\n                            }\n                        } else {\n                            textTable = textTable.slice(0, -1);\n                        }\n                    });\n                }\n                // TableBody\n                if (index == 0) {\n                    textTable += '|';\n                }\n                textTable += ` ${element[item.split(':')[0]].toString().padEnd(lengthArray[index] + enlargeColumn, ' ')}|`;\n                if (index == itemArray.length - 1) {\n                    textTable += '\\n';\n                }\n            });\n        });\n        // Breakline\n        textTable += '-'.repeat(lineLength);\n        textTable += '`';\n        return textTable;\n    } catch (e: any) {\n        errorLogger('Error createTextTableFromJson:', e);\n    }\n}\nexport { createKeyboardFromJson, createTextTableFromJson };\n"],
  "mappings": "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",
  "names": []
}
