{
  "version": 3,
  "sources": ["../../src/app/getstate.ts"],
  "sourcesContent": ["import { sendToTelegram, sendToTelegramSubmenu } from './telegram';\nimport { bindingFunc } from './action';\nimport { createKeyboardFromJson, createTextTableFromJson } from './jsonTable';\nimport { processTimeIdLc } from '../lib/utilities';\nimport { isDefined } from '../lib/utils';\nimport { adapter } from '../main';\nimport type { Part, TelegramParams } from '../types/types';\nimport { integrateTimeIntoText } from '../lib/time';\nimport { cleanUpString, decomposeText, getNewline, jsonString } from '../lib/string';\nimport { calcValue, roundValue } from '../lib/appUtils';\nimport { config } from '../config/config';\nimport { errorLogger } from './logging';\nimport { exchangeValue } from '../lib/exchangeValue';\nimport { idBySelector } from './idBySelector';\nimport { isParseModeFirstElement } from './parseMode';\n\nexport async function getState(\n    instance: string,\n    part: Part,\n    userToSend: string,\n    telegramParams: TelegramParams,\n): Promise<void> {\n    try {\n        const parse_mode = isParseModeFirstElement(part);\n        const valueArrayForCorrectOrder: string[] = [];\n        const promises = (part.getData || []).map(async ({ newline, text, id }, index): Promise<void> => {\n            adapter.log.debug(`Get Value ID: ${id}`);\n\n            if (id.includes(config.functionSelektor)) {\n                await idBySelector({\n                    instance,\n                    adapter,\n                    selector: id,\n                    text,\n                    userToSend,\n                    newline,\n                    telegramParams,\n                });\n                return;\n            }\n\n            if (text.includes(config.binding.start)) {\n                await bindingFunc(instance, text, userToSend, telegramParams, parse_mode);\n                return;\n            }\n\n            const state = await adapter.getForeignStateAsync(id);\n\n            if (!isDefined(state)) {\n                adapter.log.error('The state is empty!');\n                valueArrayForCorrectOrder[index] = 'N/A';\n                return Promise.resolve();\n            }\n\n            const stateValue = cleanUpString(state.val?.toString());\n\n            let modifiedStateVal = stateValue;\n            let modifiedTextToSend = text;\n\n            if (text.includes(config.timestamp.ts) || text.includes(config.timestamp.lc)) {\n                modifiedTextToSend = await processTimeIdLc(text, id);\n                modifiedStateVal = '';\n            }\n\n            if (modifiedTextToSend.includes(config.time)) {\n                modifiedTextToSend = integrateTimeIntoText(modifiedTextToSend, stateValue);\n                modifiedStateVal = '';\n            }\n\n            if (modifiedTextToSend.includes(config.math.start)) {\n                const { textToSend, calculated, error } = calcValue(modifiedTextToSend, modifiedStateVal, adapter);\n                if (!error) {\n                    modifiedTextToSend = textToSend;\n                    modifiedStateVal = calculated;\n\n                    adapter.log.debug(`textToSend : ${modifiedTextToSend} val : ${modifiedStateVal}`);\n                }\n            }\n\n            if (modifiedTextToSend.includes(config.round.start)) {\n                const { error, text, roundedValue } = roundValue(String(modifiedStateVal), modifiedTextToSend);\n                if (!error) {\n                    adapter.log.debug(`Rounded from ${jsonString(modifiedStateVal)} to ${jsonString(roundedValue)}`);\n                    modifiedStateVal = roundedValue;\n                    modifiedTextToSend = text;\n                }\n            }\n\n            if (modifiedTextToSend.includes(config.json.start)) {\n                const { substring } = decomposeText(modifiedTextToSend, config.json.start, config.json.end);\n\n                if (substring.includes(config.json.textTable)) {\n                    const result = createTextTableFromJson(stateValue, modifiedTextToSend);\n                    if (result) {\n                        await sendToTelegram({\n                            instance,\n                            userToSend,\n                            textToSend: result,\n                            telegramParams,\n                            parse_mode,\n                        });\n                        return;\n                    }\n                    adapter.log.debug('Cannot create a Text-Table');\n                } else {\n                    const result = createKeyboardFromJson(stateValue, modifiedTextToSend, id, userToSend);\n                    if (stateValue && stateValue.length > 0) {\n                        if (result?.text && result?.keyboard) {\n                            sendToTelegramSubmenu(\n                                instance,\n                                userToSend,\n                                result.text,\n                                result.keyboard,\n                                telegramParams,\n                                parse_mode,\n                            );\n                        }\n                        return;\n                    }\n                    await sendToTelegram({\n                        instance,\n                        userToSend,\n                        textToSend: 'The state is empty!',\n                        telegramParams,\n                        parse_mode,\n                    });\n                    adapter.log.debug('The state is empty!');\n                    return;\n                }\n            }\n\n            const { textToSend: _text, error } = exchangeValue(adapter, modifiedTextToSend, modifiedStateVal);\n\n            const isNewline = getNewline(newline);\n            modifiedTextToSend = `${_text} ${isNewline}`;\n\n            adapter.log.debug(!error ? `Value Changed to: ${modifiedTextToSend}` : `No Change`);\n\n            valueArrayForCorrectOrder[index] = modifiedTextToSend;\n        });\n        await Promise.all(promises);\n\n        if (valueArrayForCorrectOrder.length) {\n            await sendToTelegram({\n                instance,\n                userToSend,\n                textToSend: valueArrayForCorrectOrder.join(''),\n                telegramParams,\n                parse_mode,\n            });\n        }\n    } catch (error: any) {\n        errorLogger('Error GetData:', error, adapter);\n    }\n}\n"],
  "mappings": "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",
  "names": ["error", "text"]
}
