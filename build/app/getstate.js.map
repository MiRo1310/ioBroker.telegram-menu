{
  "version": 3,
  "sources": ["../../src/app/getstate.ts"],
  "sourcesContent": ["import { sendToTelegram, sendToTelegramSubmenu } from './telegram';\nimport { bindingFunc, idBySelector } from './action';\nimport { createKeyboardFromJson, createTextTableFromJson } from './jsonTable';\nimport { processTimeIdLc } from '../lib/utilities';\nimport { isDefined } from '../lib/utils';\nimport { adapter } from '../main';\nimport type { Part, UserListWithChatId } from '../types/types';\nimport { integrateTimeIntoText } from '../lib/time';\nimport { cleanUpString, decomposeText, getNewline, getValueToExchange, jsonString } from '../lib/string';\nimport { calcValue, roundValue } from '../lib/appUtils';\nimport { config } from '../config/config';\nimport { errorLogger } from './logging';\n\nfunction isLastElement(i: number, array: unknown[] | undefined): boolean {\n    return i == array?.length;\n}\n\nexport function getState(\n    part: Part,\n    userToSend: string,\n    telegramInstance: string,\n    one_time_keyboard: boolean,\n    resize_keyboard: boolean,\n    userListWithChatID: UserListWithChatId[],\n): void {\n    let createdText = '';\n    let i = 1;\n\n    const parse_mode = part.getData?.[0].parse_mode; // Parse Mode ist nur immer im ersten Element\n\n    part.getData?.forEach(async ({ newline, text, id }) => {\n        try {\n            adapter.log.debug(`Get Value ID: ${id}`);\n\n            if (id.includes(config.functionSelektor)) {\n                await idBySelector({\n                    selector: id,\n                    text,\n                    userToSend,\n                    newline,\n                    telegramInstance,\n                    one_time_keyboard,\n                    resize_keyboard,\n                    userListWithChatID,\n                });\n                return;\n            }\n\n            if (text.includes(config.binding.start)) {\n                await bindingFunc(\n                    text,\n                    userToSend,\n                    telegramInstance,\n                    one_time_keyboard,\n                    resize_keyboard,\n                    userListWithChatID,\n                    parse_mode,\n                );\n                return;\n            }\n\n            const state = await adapter.getForeignStateAsync(id);\n\n            if (!isDefined(state)) {\n                adapter.log.error('The state is empty!');\n                return;\n            }\n\n            const stateValue = cleanUpString(state.val?.toString());\n\n            let modifiedStateVal = stateValue;\n            let modifiedTextToSend = text;\n\n            if (text.includes(config.timestamp.ts) || text.includes(config.timestamp.lc)) {\n                modifiedTextToSend = await processTimeIdLc(text, id);\n                modifiedStateVal = '';\n            }\n            if (modifiedTextToSend.includes(config.time)) {\n                modifiedTextToSend = integrateTimeIntoText(modifiedTextToSend, stateValue);\n                modifiedStateVal = '';\n            }\n            if (modifiedTextToSend.includes(config.math.start)) {\n                const { textToSend, calculated, error } = calcValue(modifiedTextToSend, modifiedStateVal, adapter);\n                if (!error) {\n                    modifiedTextToSend = textToSend;\n                    modifiedStateVal = calculated;\n\n                    adapter.log.debug(`TextToSend: ${modifiedTextToSend} val: ${modifiedStateVal}`);\n                }\n            }\n            if (modifiedTextToSend.includes(config.round.start)) {\n                const { error, text, roundedValue } = roundValue(String(modifiedStateVal), modifiedTextToSend);\n                if (!error) {\n                    adapter.log.debug(`Rounded from ${jsonString(modifiedStateVal)} to ${jsonString(roundedValue)}`);\n                    modifiedStateVal = roundedValue;\n                    modifiedTextToSend = text;\n                }\n            }\n            if (modifiedTextToSend.includes(config.json.start)) {\n                const { substring } = decomposeText(modifiedTextToSend, config.json.start, config.json.end);\n\n                if (substring.includes(config.json.textTable)) {\n                    const result = createTextTableFromJson(stateValue, modifiedTextToSend);\n                    if (result) {\n                        await sendToTelegram({\n                            userToSend,\n                            textToSend: result,\n                            telegramInstance,\n                            resize_keyboard,\n                            one_time_keyboard,\n                            userListWithChatID,\n                            parse_mode,\n                        });\n                        return;\n                    }\n                    adapter.log.debug('Cannot create a Text-Table');\n                } else {\n                    const result = createKeyboardFromJson(stateValue, modifiedTextToSend, id, userToSend);\n                    if (stateValue && stateValue.length > 0) {\n                        if (result && result.text && result.keyboard) {\n                            sendToTelegramSubmenu(\n                                userToSend,\n                                result.text,\n                                result.keyboard,\n                                telegramInstance,\n                                userListWithChatID,\n                                parse_mode,\n                            );\n                        }\n                        return;\n                    }\n                    await sendToTelegram({\n                        userToSend,\n                        textToSend: 'The state is empty!',\n                        telegramInstance: telegramInstance,\n                        resize_keyboard,\n                        one_time_keyboard,\n                        userListWithChatID,\n                        parse_mode,\n                    });\n                    adapter.log.debug('The state is empty!');\n                    return;\n                }\n            }\n\n            const {\n                newValue: _val,\n                textToSend: _text,\n                error,\n            } = getValueToExchange(adapter, modifiedTextToSend, modifiedStateVal);\n\n            modifiedStateVal = String(_val);\n            modifiedTextToSend = _text;\n\n            adapter.log.debug(!error ? `Value Changed to: ${modifiedTextToSend}` : `No Change`);\n\n            const isNewline = getNewline(newline);\n\n            createdText += modifiedTextToSend.includes(config.rowSplitter)\n                ? `${modifiedTextToSend.replace(config.rowSplitter, modifiedStateVal.toString())}${isNewline}`\n                : `${modifiedTextToSend} ${modifiedStateVal} ${isNewline}`;\n\n            adapter.log.debug(`Text: ${createdText}`);\n\n            if (isLastElement(i, part.getData)) {\n                await sendToTelegram({\n                    userToSend,\n                    textToSend: createdText,\n                    telegramInstance,\n                    resize_keyboard,\n                    one_time_keyboard,\n                    userListWithChatID,\n                    parse_mode,\n                });\n            }\n            i++;\n        } catch (error: any) {\n            errorLogger('Error GetData:', error, adapter);\n        }\n    });\n}\n"],
  "mappings": "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",
  "names": ["_a", "error", "text"]
}
