{
  "version": 3,
  "sources": ["../../src/app/setstate.ts"],
  "sourcesContent": ["import { sendToTelegram } from './telegram';\nimport { transformValueToTypeOfId } from '../lib/utilities';\nimport { setDynamicValue } from './dynamicValue';\nimport { adapter } from '../main';\nimport { errorLogger } from './logging';\nimport type { Part, TelegramParams } from '../types/types';\nimport { decomposeText, isNonEmptyString, jsonString, parseJSON } from '../lib/string';\nimport { isDefined } from '../lib/utils';\nimport { config } from '../config/config';\nimport { addSetStateIds } from './setStateIdsToListenTo';\nimport { exchangeValue } from '../lib/exchangeValue';\n\nconst modifiedValue = (valueFromSubmenu: string, value: string): string => {\n    return value.includes(config.modifiedValue)\n        ? value.replace(config.modifiedValue, valueFromSubmenu)\n        : valueFromSubmenu;\n};\n\nconst isDynamicValueToSet = async (value: string | number | boolean): Promise<string | number | boolean> => {\n    if (typeof value === 'string' && value.includes(config.dynamicValue.start)) {\n        const { substring, substringExcludeSearch: id } = decomposeText(\n            value,\n            config.dynamicValue.start,\n            config.dynamicValue.end,\n        );\n\n        const newValue = await adapter.getForeignStateAsync(id);\n\n        return value.replace(substring, String(newValue?.val));\n    }\n    return value;\n};\n\nexport const setstateIobroker = async ({\n    id,\n    value,\n    ack,\n}: {\n    id: string;\n    value: string | number | boolean;\n    ack: boolean;\n}): Promise<void> => {\n    try {\n        const val = await transformValueToTypeOfId(id, value);\n\n        adapter.log.debug(`Value to Set: ${jsonString(val)}`);\n        if (isDefined(val)) {\n            await adapter.setForeignStateAsync(id, val, ack);\n        }\n    } catch (error: any) {\n        errorLogger('Error Setstate', error, adapter);\n    }\n};\n\nconst setValue = async (\n    id: string,\n    value: string,\n    valueFromSubmenu: null | string | number | boolean,\n    ack: boolean,\n): Promise<void> => {\n    try {\n        // If Value is set in Config the value will set to datapoint otherwise the value from submenu, so submenuValuePriority is obsolete\n        const valueToSet =\n            isDefined(value) && isNonEmptyString(value)\n                ? await isDynamicValueToSet(value)\n                : modifiedValue(String(valueFromSubmenu), value);\n\n        await setstateIobroker({ id, value: valueToSet, ack });\n    } catch (error: any) {\n        errorLogger('Error setValue', error, adapter);\n    }\n};\n\nexport const handleSetState = async (\n    part: Part,\n    userToSend: string,\n    valueFromSubmenu: null | string | number | boolean,\n    telegramParams: TelegramParams,\n): Promise<void> => {\n    try {\n        if (!part.switch) {\n            return;\n        }\n        for (const { returnText: text, id: ID, parse_mode, confirm, ack, toggle, value } of part.switch) {\n            let returnText = text;\n            if (returnText.includes(config.setDynamicValue)) {\n                const { confirmText, id } = await setDynamicValue(\n                    returnText,\n                    ack,\n                    ID,\n                    userToSend,\n                    telegramParams,\n                    parse_mode,\n                    confirm,\n                );\n\n                if (confirm) {\n                    await addSetStateIds({\n                        id: id ?? ID,\n                        confirm,\n                        returnText: confirmText,\n                        userToSend,\n                    });\n                }\n                return;\n            }\n\n            if (!returnText.includes(\"{'id':'\")) {\n                await addSetStateIds({\n                    id: ID,\n                    confirm,\n                    returnText,\n                    userToSend,\n                    parse_mode,\n                });\n            } else {\n                returnText = returnText.replace(/'/g, '\"');\n                const { substring } = decomposeText(returnText, '{\"id\":', '}');\n                const { json, isValidJson } = parseJSON<{ text: string; id: string }>(substring);\n                if (!isValidJson) {\n                    return;\n                }\n                const text = returnText.replace(substring, json.text);\n                let value: null | ioBroker.StateValue = null;\n\n                if (json.id) {\n                    const state = await adapter.getForeignStateAsync(json.id);\n                    value = state ? state.val : null;\n                }\n\n                const { textToSend } = exchangeValue(adapter, text, valueFromSubmenu ?? value);\n\n                await sendToTelegram({\n                    userToSend,\n                    textToSend,\n                    telegramParams,\n                    parse_mode,\n                });\n\n                await addSetStateIds({\n                    id: json.id,\n                    confirm: true,\n                    returnText: json.text,\n                    userToSend: userToSend,\n                });\n            }\n            if (toggle) {\n                const state = await adapter.getForeignStateAsync(ID);\n\n                state\n                    ? await setstateIobroker({ id: ID, value: !state.val, ack })\n                    : await setstateIobroker({ id: ID, value: false, ack });\n            } else {\n                await setValue(ID, value, valueFromSubmenu, ack);\n            }\n        }\n    } catch (error: any) {\n        errorLogger('Error Switch', error, adapter);\n    }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA+B;AAC/B,uBAAyC;AACzC,0BAAgC;AAChC,kBAAwB;AACxB,qBAA4B;AAE5B,oBAAuE;AACvE,mBAA0B;AAC1B,oBAAuB;AACvB,mCAA+B;AAC/B,2BAA8B;AAE9B,MAAM,gBAAgB,CAAC,kBAA0B,UAA0B;AACvE,SAAO,MAAM,SAAS,qBAAO,aAAa,IACpC,MAAM,QAAQ,qBAAO,eAAe,gBAAgB,IACpD;AACV;AAEA,MAAM,sBAAsB,OAAO,UAAyE;AACxG,MAAI,OAAO,UAAU,YAAY,MAAM,SAAS,qBAAO,aAAa,KAAK,GAAG;AACxE,UAAM,EAAE,WAAW,wBAAwB,GAAG,QAAI;AAAA,MAC9C;AAAA,MACA,qBAAO,aAAa;AAAA,MACpB,qBAAO,aAAa;AAAA,IACxB;AAEA,UAAM,WAAW,MAAM,oBAAQ,qBAAqB,EAAE;AAEtD,WAAO,MAAM,QAAQ,WAAW,OAAO,qCAAU,GAAG,CAAC;AAAA,EACzD;AACA,SAAO;AACX;AAEO,MAAM,mBAAmB,OAAO;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AACJ,MAIqB;AACjB,MAAI;AACA,UAAM,MAAM,UAAM,2CAAyB,IAAI,KAAK;AAEpD,wBAAQ,IAAI,MAAM,qBAAiB,0BAAW,GAAG,CAAC,EAAE;AACpD,YAAI,wBAAU,GAAG,GAAG;AAChB,YAAM,oBAAQ,qBAAqB,IAAI,KAAK,GAAG;AAAA,IACnD;AAAA,EACJ,SAAS,OAAY;AACjB,oCAAY,kBAAkB,OAAO,mBAAO;AAAA,EAChD;AACJ;AAEA,MAAM,WAAW,OACb,IACA,OACA,kBACA,QACgB;AAChB,MAAI;AAEA,UAAM,iBACF,wBAAU,KAAK,SAAK,gCAAiB,KAAK,IACpC,MAAM,oBAAoB,KAAK,IAC/B,cAAc,OAAO,gBAAgB,GAAG,KAAK;AAEvD,UAAM,iBAAiB,EAAE,IAAI,OAAO,YAAY,IAAI,CAAC;AAAA,EACzD,SAAS,OAAY;AACjB,oCAAY,kBAAkB,OAAO,mBAAO;AAAA,EAChD;AACJ;AAEO,MAAM,iBAAiB,OAC1B,MACA,YACA,kBACA,mBACgB;AAChB,MAAI;AACA,QAAI,CAAC,KAAK,QAAQ;AACd;AAAA,IACJ;AACA,eAAW,EAAE,YAAY,MAAM,IAAI,IAAI,YAAY,SAAS,KAAK,QAAQ,MAAM,KAAK,KAAK,QAAQ;AAC7F,UAAI,aAAa;AACjB,UAAI,WAAW,SAAS,qBAAO,eAAe,GAAG;AAC7C,cAAM,EAAE,aAAa,GAAG,IAAI,UAAM;AAAA,UAC9B;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AAEA,YAAI,SAAS;AACT,oBAAM,6CAAe;AAAA,YACjB,IAAI,kBAAM;AAAA,YACV;AAAA,YACA,YAAY;AAAA,YACZ;AAAA,UACJ,CAAC;AAAA,QACL;AACA;AAAA,MACJ;AAEA,UAAI,CAAC,WAAW,SAAS,SAAS,GAAG;AACjC,kBAAM,6CAAe;AAAA,UACjB,IAAI;AAAA,UACJ;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ,CAAC;AAAA,MACL,OAAO;AACH,qBAAa,WAAW,QAAQ,MAAM,GAAG;AACzC,cAAM,EAAE,UAAU,QAAI,6BAAc,YAAY,UAAU,GAAG;AAC7D,cAAM,EAAE,MAAM,YAAY,QAAI,yBAAwC,SAAS;AAC/E,YAAI,CAAC,aAAa;AACd;AAAA,QACJ;AACA,cAAMA,QAAO,WAAW,QAAQ,WAAW,KAAK,IAAI;AACpD,YAAIC,SAAoC;AAExC,YAAI,KAAK,IAAI;AACT,gBAAM,QAAQ,MAAM,oBAAQ,qBAAqB,KAAK,EAAE;AACxD,UAAAA,SAAQ,QAAQ,MAAM,MAAM;AAAA,QAChC;AAEA,cAAM,EAAE,WAAW,QAAI,oCAAc,qBAASD,OAAM,8CAAoBC,MAAK;AAE7E,kBAAM,gCAAe;AAAA,UACjB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ,CAAC;AAED,kBAAM,6CAAe;AAAA,UACjB,IAAI,KAAK;AAAA,UACT,SAAS;AAAA,UACT,YAAY,KAAK;AAAA,UACjB;AAAA,QACJ,CAAC;AAAA,MACL;AACA,UAAI,QAAQ;AACR,cAAM,QAAQ,MAAM,oBAAQ,qBAAqB,EAAE;AAEnD,gBACM,MAAM,iBAAiB,EAAE,IAAI,IAAI,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,IACzD,MAAM,iBAAiB,EAAE,IAAI,IAAI,OAAO,OAAO,IAAI,CAAC;AAAA,MAC9D,OAAO;AACH,cAAM,SAAS,IAAI,OAAO,kBAAkB,GAAG;AAAA,MACnD;AAAA,IACJ;AAAA,EACJ,SAAS,OAAY;AACjB,oCAAY,gBAAgB,OAAO,mBAAO;AAAA,EAC9C;AACJ;",
  "names": ["text", "value"]
}
