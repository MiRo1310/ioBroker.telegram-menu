{
  "version": 3,
  "sources": ["../../src/app/setstate.ts"],
  "sourcesContent": ["import { sendToTelegram } from './telegram';\nimport { checkTypeOfId } from '../lib/utilities';\nimport { setDynamicValue } from './dynamicValue';\nimport { adapter } from '../main';\nimport { errorLogger } from './logging';\nimport type { Part, SetStateIds, UserListWithChatId } from '../types/types';\nimport { jsonString, decomposeText, parseJSON } from '../lib/string';\nimport { isTruthy } from '../lib/utils';\nimport { config } from '../config/config';\n\nconst modifiedValue = (valueFromSubmenu: string, value: string): string => {\n    return value.includes(config.modifiedValue)\n        ? value.replace(config.modifiedValue, valueFromSubmenu)\n        : valueFromSubmenu;\n};\n\nconst isDynamicValueToSet = async (value: string | number | boolean): Promise<string | number | boolean> => {\n    if (typeof value === 'string' && value.includes(config.dynamicValue.start)) {\n        const { substring, substringExcludeSearch: id } = decomposeText(\n            value,\n            config.dynamicValue.start,\n            config.dynamicValue.end,\n        );\n\n        const newValue = await adapter.getForeignStateAsync(id);\n\n        if (typeof newValue?.val === 'string') {\n            return value.replace(substring, newValue.val);\n        }\n    }\n    return value;\n};\n\nconst setValue = async (\n    id: string,\n    value: string,\n    SubmenuValuePriority: boolean,\n    valueFromSubmenu: string | number,\n    ack: boolean,\n): Promise<void> => {\n    try {\n        let valueToSet;\n        SubmenuValuePriority\n            ? (valueToSet = modifiedValue(valueFromSubmenu as string, value))\n            : (valueToSet = await isDynamicValueToSet(value));\n\n        await checkTypeOfId(id, valueToSet).then((val: ioBroker.StateValue | ioBroker.SettableState | undefined) => {\n            valueToSet = val;\n            adapter.log.debug(`Value to Set: ${jsonString(valueToSet)}`);\n\n            if (valueToSet !== undefined && valueToSet !== null) {\n                adapter.setForeignState(id, valueToSet, ack);\n            }\n        });\n    } catch (error: any) {\n        errorLogger('Error setValue', error, adapter);\n    }\n};\n\nexport const setState = async (\n    part: Part,\n    userToSend: string,\n    valueFromSubmenu: string | number,\n    SubmenuValuePriority: boolean,\n    telegramInstance: string,\n    resize_keyboard: boolean,\n    one_time_keyboard: boolean,\n    userListWithChatID: UserListWithChatId[],\n): Promise<SetStateIds[] | undefined> => {\n    try {\n        const setStateIds: SetStateIds[] = [];\n        if (!part.switch) {\n            return;\n        }\n        for (const { returnText: text, id: ID, parse_mode, confirm, ack, toggle, value } of part.switch) {\n            let returnText = text;\n            if (returnText.includes(config.setDynamicValue)) {\n                const { confirmText, id } = await setDynamicValue(\n                    returnText,\n                    isTruthy(ack),\n                    ID,\n                    userToSend,\n                    telegramInstance,\n                    one_time_keyboard,\n                    resize_keyboard,\n                    userListWithChatID,\n                    parse_mode,\n                    confirm,\n                );\n\n                if (confirm) {\n                    setStateIds.push({\n                        id: id ?? ID,\n                        confirm,\n                        returnText: confirmText,\n                        userToSend: userToSend,\n                    });\n                    return setStateIds;\n                }\n            }\n\n            if (!returnText.includes(\"{'id':'\")) {\n                setStateIds.push({\n                    id: ID,\n                    confirm,\n                    returnText,\n                    userToSend,\n                    parse_mode,\n                });\n            } else {\n                returnText = returnText.replace(/'/g, '\"');\n                const textToSend = returnText.slice(0, returnText.indexOf('{')).trim();\n                const { json, isValidJson } = parseJSON<{ text: string; id: string }>(\n                    returnText.slice(returnText.indexOf('{'), returnText.indexOf('}') + 1),\n                );\n                if (!isValidJson) {\n                    return;\n                }\n\n                json.text = json.text + returnText.slice(returnText.indexOf('}') + 1);\n                if (textToSend && textToSend !== '') {\n                    await sendToTelegram({\n                        userToSend,\n                        textToSend,\n                        telegramInstance,\n                        resize_keyboard,\n                        one_time_keyboard,\n                        userListWithChatID,\n                        parse_mode,\n                    });\n                }\n\n                setStateIds.push({\n                    id: json.id,\n                    confirm: true,\n                    returnText: json.text,\n                    userToSend: userToSend,\n                });\n            }\n            if (toggle) {\n                adapter\n                    .getForeignStateAsync(ID)\n                    .then(val => {\n                        if (val) {\n                            adapter.setForeignStateAsync(ID, !val.val, ack).catch((e: any) => {\n                                errorLogger('Error setForeignStateAsync:', e, adapter);\n                            });\n                        }\n                    })\n                    .catch((e: any) => {\n                        errorLogger('Error getForeignStateAsync:', e, adapter);\n                    });\n            } else {\n                await setValue(ID, value, SubmenuValuePriority, valueFromSubmenu, isTruthy(ack));\n            }\n        }\n        return setStateIds;\n    } catch (error: any) {\n        errorLogger('Error Switch', error, adapter);\n    }\n};\n"],
  "mappings": "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",
  "names": []
}
