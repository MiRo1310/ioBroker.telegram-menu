{
  "version": 3,
  "sources": ["../../src/app/events.ts"],
  "sourcesContent": ["import type { Actions } from '../types/types';\nimport type { MenusWithUsers, UserType } from '@/types/app';\n\ninterface EventParams {\n    isEvent: boolean;\n    eventInstanceList: UserType[];\n}\n\n/**\n * Get all instances from the provided menus\n *\n * @param menuToGo This is a list but its contains only one menu\n * @param menusWithUsers All users in groups\n * @returns List of instances\n *\n * Testet in test/test/events.test.ts\n */\nexport const getInstances = (menuToGo: string[], menusWithUsers: MenusWithUsers): UserType[] => {\n    return menuToGo.flatMap(m => menusWithUsers[m] ?? []);\n};\n\n/**\n * Get all instances from events by ID\n *\n * @param action All actions\n * @param id State changed ID\n * @param menusWithUsers All users in groups\n * @returns List of instances and isEvent true/false\n *\n * Testet in test/test/events.test.ts\n */\nexport const getInstancesFromEventsById = (\n    action: Record<string, Actions | undefined> | undefined,\n    id: string,\n    menusWithUsers: MenusWithUsers,\n): EventParams => {\n    const event = action && Object.keys(action).filter(a => action[a]?.events?.some(e => e.ID?.includes(id)));\n\n    return { isEvent: !!(event && event?.length), eventInstanceList: getInstances(event ?? [], menusWithUsers) };\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBO,MAAM,eAAe,CAAC,UAAoB,mBAA+C;AAC5F,SAAO,SAAS,QAAQ,OAAE;AAlB9B;AAkBiC,gCAAe,CAAC,MAAhB,YAAqB,CAAC;AAAA,GAAC;AACxD;AAYO,MAAM,6BAA6B,CACtC,QACA,IACA,mBACc;AACd,QAAM,QAAQ,UAAU,OAAO,KAAK,MAAM,EAAE,OAAO,OAAE;AApCzD;AAoC4D,8BAAO,CAAC,MAAR,mBAAW,WAAX,mBAAmB,KAAK,OAAE;AApCtF,UAAAA;AAoCyF,cAAAA,MAAA,EAAE,OAAF,gBAAAA,IAAM,SAAS;AAAA;AAAA,GAAI;AAExG,SAAO,EAAE,SAAS,CAAC,EAAE,UAAS,+BAAO,UAAS,mBAAmB,aAAa,wBAAS,CAAC,GAAG,cAAc,EAAE;AAC/G;",
  "names": ["_a"]
}
