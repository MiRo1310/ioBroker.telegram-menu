{
  "version": 3,
  "sources": ["../../src/app/events.ts"],
  "sourcesContent": ["import type { Actions } from '../types/types';\nimport type { UsersInGroup, UserType } from '@/types/app';\n\ninterface EventParams {\n    isEvent: boolean;\n    eventInstanceList: UserType[];\n}\n\nconst getInstances = (menus: string[], menusWithUsers: UsersInGroup): UserType[] => {\n    return menus.flatMap(m => menusWithUsers[m] ?? []);\n};\n\nexport const getInstancesFromEventsById = (\n    action: Record<string, Actions | undefined> | undefined,\n    id: string,\n    menusWithUsers: UsersInGroup,\n): EventParams => {\n    const event =\n        action &&\n        Object.keys(action).filter(a => action[a]?.events.filter(e => e.ID.filter(eventId => eventId === id)));\n\n    return { isEvent: !!(event && event?.length), eventInstanceList: getInstances(event ?? [], menusWithUsers) };\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,MAAM,eAAe,CAAC,OAAiB,mBAA6C;AAChF,SAAO,MAAM,QAAQ,OAAE;AAT3B;AAS8B,gCAAe,CAAC,MAAhB,YAAqB,CAAC;AAAA,GAAC;AACrD;AAEO,MAAM,6BAA6B,CACtC,QACA,IACA,mBACc;AACd,QAAM,QACF,UACA,OAAO,KAAK,MAAM,EAAE,OAAO,OAAE;AAnBrC;AAmBwC,wBAAO,CAAC,MAAR,mBAAW,OAAO,OAAO,OAAK,EAAE,GAAG,OAAO,aAAW,YAAY,EAAE;AAAA,GAAE;AAEzG,SAAO,EAAE,SAAS,CAAC,EAAE,UAAS,+BAAO,UAAS,mBAAmB,aAAa,wBAAS,CAAC,GAAG,cAAc,EAAE;AAC/G;",
  "names": []
}
