{
  "version": 3,
  "sources": ["../../src/app/messageIds.ts"],
  "sourcesContent": ["import { adapter } from '../main';\nimport { deleteMessageByBot } from './botAction';\nimport { errorLogger } from './logging';\nimport type { MessageInfos, Messages, TelegramParams, WhatShouldDelete } from '../types/types';\nimport { deepCopy, getChatID } from '../lib/utils';\nimport { parseJSON } from '../lib/string';\n\nlet isDeleting = false;\nasync function saveMessageIds(state: ioBroker.State, instanceTelegram: string): Promise<void> {\n    try {\n        let requestMessageId: Messages = {};\n\n        const requestMessageIdObj = !isDeleting ? await adapter.getStateAsync('communication.requestIds') : null;\n\n        isDeleting = false;\n        const requestUserIdObj = await adapter.getForeignStateAsync(`${instanceTelegram}.communicate.requestChatId`);\n\n        const request = await adapter.getForeignStateAsync(`${instanceTelegram}.communicate.request`);\n\n        if (!requestUserIdObj?.val) {\n            return;\n        }\n        let isValidJson = false;\n        let json = {};\n\n        if (requestMessageIdObj?.val) {\n            const result = parseJSON<Messages>(String(requestMessageIdObj?.val), adapter);\n            json = result.json;\n            isValidJson = result.isValidJson;\n        }\n        requestMessageId = isValidJson ? json : {};\n\n        const userIDValue = requestUserIdObj.val.toString();\n        if (!requestMessageId[userIDValue]) {\n            requestMessageId[userIDValue] = [];\n        }\n\n        if (!requestMessageId[userIDValue]?.find(message => message.id === state.val)) {\n            requestMessageId[userIDValue].push({\n                id: state.val,\n                time: Date.now(),\n                request: request?.val,\n            });\n        }\n\n        requestMessageId = removeOldMessageIds(requestMessageId, userIDValue);\n        await adapter.setState('communication.requestIds', JSON.stringify(requestMessageId), true);\n    } catch (e: any) {\n        errorLogger('Error saveMessageIds:', e, adapter);\n    }\n}\nfunction removeOldMessageIds(messages: Messages, chatID: string): Messages {\n    messages[chatID] = messages[chatID].filter(message => {\n        return message.time && message.time > Date.now() - 1000 * 60 * 60 * 24 * 2;\n    });\n    return messages;\n}\n\nconst removeMessageFromList = ({\n    element,\n    chat_id,\n    copyMessageIds,\n}: {\n    element: MessageInfos;\n    chat_id: string;\n    copyMessageIds: Messages;\n}): MessageInfos[] => {\n    return copyMessageIds[chat_id].filter(message => message.id !== element.id);\n};\n\nasync function deleteMessageIds(\n    user: string,\n    telegramParams: TelegramParams,\n    whatShouldDelete: WhatShouldDelete,\n): Promise<void> {\n    const { telegramInstance, userListWithChatID } = telegramParams;\n    try {\n        const requestMessageIdObj = await adapter.getStateAsync('communication.requestIds');\n        const lastMessageId = await adapter.getForeignStateAsync(`${telegramInstance}.communicate.requestMessageId`);\n\n        if (\n            !requestMessageIdObj ||\n            typeof requestMessageIdObj.val !== 'string' ||\n            !JSON.parse(requestMessageIdObj.val)\n        ) {\n            return;\n        }\n\n        const chat_id = getChatID(userListWithChatID, user);\n        const { json, isValidJson } = parseJSON<Messages>(requestMessageIdObj.val);\n\n        if (!isValidJson || !chat_id) {\n            return;\n        }\n        if (lastMessageId && lastMessageId.val) {\n            json[chat_id].push({ id: lastMessageId.val.toString() });\n        }\n\n        isDeleting = true;\n        const copyMessageIds = deepCopy(json, adapter);\n        json[chat_id].forEach((element, index) => {\n            const id = element.id?.toString();\n            if (!telegramInstance) {\n                return;\n            }\n            if (whatShouldDelete === 'all' && id) {\n                deleteMessageByBot(telegramInstance, user, parseInt(id), chat_id);\n            }\n            if (whatShouldDelete === 'last' && index === json[chat_id].length - 1 && id) {\n                deleteMessageByBot(telegramInstance, user, parseInt(id), chat_id);\n            }\n            if (!copyMessageIds) {\n                return;\n            }\n            copyMessageIds[chat_id] = removeMessageFromList({ element, chat_id, copyMessageIds });\n        });\n\n        await adapter.setState('communication.requestIds', JSON.stringify(copyMessageIds), true);\n    } catch (e: any) {\n        errorLogger('Error deleteMessageIds:', e, adapter);\n    }\n}\n\nexport { deleteMessageIds, saveMessageIds };\n"],
  "mappings": "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",
  "names": []
}
