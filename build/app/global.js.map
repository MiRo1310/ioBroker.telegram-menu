{
  "version": 3,
  "sources": ["../../src/app/global.ts"],
  "sourcesContent": ["import type { DecomposeText } from '../types/types';\nimport { errorLogger } from './logging';\nimport { _this } from '../main';\n\nexport const isDefined = <T>(value: T | undefined | null): value is T => value !== undefined && value !== null;\n\nexport const deleteDoubleEntriesInArray = (arr: string[]): string[] =>\n    arr.filter((item, index) => arr.indexOf(item) === index);\n\nexport const replaceAll = (text: string, searchValue: string, replaceValue: string): string =>\n    text.replace(new RegExp(searchValue, 'g'), replaceValue);\n\nexport function decomposeText(text: string, searchValue: string, secondValue: string): DecomposeText {\n    const startindex = text.indexOf(searchValue);\n    const endindex = text.indexOf(secondValue, startindex);\n    const substring = text.substring(startindex, endindex + secondValue.length);\n    const textWithoutSubstring = text.replace(substring, '').trim();\n    return {\n        startindex: startindex,\n        endindex: endindex,\n        substring: substring,\n        textWithoutSubstring: textWithoutSubstring,\n    };\n}\n\nexport const deepCopy = <T>(obj: T): T | undefined => {\n    try {\n        if (!obj) {\n            return undefined;\n        }\n        return JSON.parse(JSON.stringify(obj));\n    } catch (err) {\n        console.error(`Error deepCopy: ${JSON.stringify(err)}`);\n    }\n};\n\nexport const isString = (value: unknown): value is string => typeof value === 'string';\n\nexport const isTruthy = (value: string | number | boolean): boolean => ['1', 1, true, 'true'].includes(value);\n\nexport const isFalsy = (value: string | number | boolean | undefined | null): boolean =>\n    ['0', 0, false, 'false', undefined, null].includes(value);\n\nexport function checkDirectoryIsOk(directory: string): boolean {\n    if (['', null, undefined].includes(directory)) {\n        _this.log.error(\n            'No directory to save the picture. Please add a directory in the settings with full read and write permissions.',\n        );\n        return false;\n    }\n    return true;\n}\n\nexport function parseJSON<T>(value: string): T | undefined {\n    try {\n        return JSON.parse(value);\n    } catch (error) {\n        errorLogger('Error parseJson: ', error);\n        return undefined;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,qBAA4B;AAC5B,kBAAsB;AAEf,MAAM,YAAY,CAAI,UAA4C,UAAU,UAAa,UAAU;AAEnG,MAAM,6BAA6B,CAAC,QACvC,IAAI,OAAO,CAAC,MAAM,UAAU,IAAI,QAAQ,IAAI,MAAM,KAAK;AAEpD,MAAM,aAAa,CAAC,MAAc,aAAqB,iBAC1D,KAAK,QAAQ,IAAI,OAAO,aAAa,GAAG,GAAG,YAAY;AAEpD,SAAS,cAAc,MAAc,aAAqB,aAAoC;AACjG,QAAM,aAAa,KAAK,QAAQ,WAAW;AAC3C,QAAM,WAAW,KAAK,QAAQ,aAAa,UAAU;AACrD,QAAM,YAAY,KAAK,UAAU,YAAY,WAAW,YAAY,MAAM;AAC1E,QAAM,uBAAuB,KAAK,QAAQ,WAAW,EAAE,EAAE,KAAK;AAC9D,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ;AAEO,MAAM,WAAW,CAAI,QAA0B;AAClD,MAAI;AACA,QAAI,CAAC,KAAK;AACN,aAAO;AAAA,IACX;AACA,WAAO,KAAK,MAAM,KAAK,UAAU,GAAG,CAAC;AAAA,EACzC,SAAS,KAAK;AACV,YAAQ,MAAM,mBAAmB,KAAK,UAAU,GAAG,CAAC,EAAE;AAAA,EAC1D;AACJ;AAEO,MAAM,WAAW,CAAC,UAAoC,OAAO,UAAU;AAEvE,MAAM,WAAW,CAAC,UAA8C,CAAC,KAAK,GAAG,MAAM,MAAM,EAAE,SAAS,KAAK;AAErG,MAAM,UAAU,CAAC,UACpB,CAAC,KAAK,GAAG,OAAO,SAAS,QAAW,IAAI,EAAE,SAAS,KAAK;AAErD,SAAS,mBAAmB,WAA4B;AAC3D,MAAI,CAAC,IAAI,MAAM,MAAS,EAAE,SAAS,SAAS,GAAG;AAC3C,sBAAM,IAAI;AAAA,MACN;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACA,SAAO;AACX;AAEO,SAAS,UAAa,OAA8B;AACvD,MAAI;AACA,WAAO,KAAK,MAAM,KAAK;AAAA,EAC3B,SAAS,OAAO;AACZ,oCAAY,qBAAqB,KAAK;AACtC,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
