{
  "version": 3,
  "sources": ["../../src/app/adapterStartMenuSend.ts"],
  "sourcesContent": ["import { sendToTelegram } from './telegram';\nimport { backMenuFunc } from './backMenu';\nimport type {\n    ListOfMenus,\n    StartSides,\n    IsUserActiveCheckbox,\n    MenusWithUsers,\n    MenuData,\n    UserListWithChatId,\n} from '../types/types';\nimport { adapter } from '../main';\nimport { jsonString } from '../lib/string';\nimport { isStartside } from '../lib/appUtils';\n\nexport async function adapterStartMenuSend(\n    listOfMenus: ListOfMenus,\n    startSides: StartSides,\n    userActiveCheckbox: IsUserActiveCheckbox,\n    menusWithUsers: MenusWithUsers,\n    menuData: MenuData,\n    userListWithChatID: UserListWithChatId[],\n    telegramInstance: string,\n    resize_keyboard: boolean,\n    one_time_keyboard: boolean,\n): Promise<void> {\n    for (const menu of listOfMenus) {\n        const startSide = startSides[menu];\n\n        if (userActiveCheckbox[menu] && isStartside(startSide)) {\n            adapter.log.debug(`Startside: ${startSide}`);\n            for (const userToSend of menusWithUsers[menu]) {\n                const { nav, text, parse_mode } = menuData[menu][startSide];\n                backMenuFunc({ startSide: startSide, navigation: nav, userToSend: userToSend });\n\n                adapter.log.debug(`User list: ${jsonString(userListWithChatID)}`);\n\n                await sendToTelegram({\n                    userToSend,\n                    textToSend: text,\n                    keyboard: nav,\n                    telegramInstance,\n                    resize_keyboard,\n                    one_time_keyboard,\n                    userListWithChatID,\n                    parse_mode,\n                });\n            }\n        } else {\n            if (!isStartside(startSide)) {\n                adapter.log.debug(`Menu \"${menu}\" is a Submenu.`);\n                continue;\n            }\n            adapter.log.debug(`Menu \"${menu}\" is inactive.`);\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA+B;AAC/B,sBAA6B;AAS7B,kBAAwB;AACxB,oBAA2B;AAC3B,sBAA4B;AAE5B,eAAsB,qBAClB,aACA,YACA,oBACA,gBACA,UACA,oBACA,kBACA,iBACA,mBACa;AACb,aAAW,QAAQ,aAAa;AAC5B,UAAM,YAAY,WAAW,IAAI;AAEjC,QAAI,mBAAmB,IAAI,SAAK,6BAAY,SAAS,GAAG;AACpD,0BAAQ,IAAI,MAAM,cAAc,SAAS,EAAE;AAC3C,iBAAW,cAAc,eAAe,IAAI,GAAG;AAC3C,cAAM,EAAE,KAAK,MAAM,WAAW,IAAI,SAAS,IAAI,EAAE,SAAS;AAC1D,0CAAa,EAAE,WAAsB,YAAY,KAAK,WAAuB,CAAC;AAE9E,4BAAQ,IAAI,MAAM,kBAAc,0BAAW,kBAAkB,CAAC,EAAE;AAEhE,kBAAM,gCAAe;AAAA,UACjB;AAAA,UACA,YAAY;AAAA,UACZ,UAAU;AAAA,UACV;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ,OAAO;AACH,UAAI,KAAC,6BAAY,SAAS,GAAG;AACzB,4BAAQ,IAAI,MAAM,SAAS,IAAI,iBAAiB;AAChD;AAAA,MACJ;AACA,0BAAQ,IAAI,MAAM,SAAS,IAAI,gBAAgB;AAAA,IACnD;AAAA,EACJ;AACJ;",
  "names": []
}
