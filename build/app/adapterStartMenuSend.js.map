{
  "version": 3,
  "sources": ["../../src/app/adapterStartMenuSend.ts"],
  "sourcesContent": ["import type { MenusWithUsers, UserActiveCheckbox, UserListWithChatID, UserType } from '@/types/app';\nimport type { ListOfMenus, MenuData, StartSides, TelegramParams } from '@b/types/types';\nimport { isStartside } from '@b/lib/appUtils';\nimport { backMenuFunc } from '@b/app/backMenu';\nimport { jsonString } from '@b/lib/string';\nimport { sendToTelegram } from '@b/app/telegram';\n\nfunction isUserActive(telegramParams: TelegramParams, userToSend: UserType): UserListWithChatID | undefined {\n    return telegramParams.userListWithChatID.find(\n        user => user.chatID === userToSend.chatId && user.instance === userToSend.instance,\n    );\n}\n\nexport async function adapterStartMenuSend(\n    listOfMenus: ListOfMenus,\n    startSides: StartSides,\n    userActiveCheckbox: UserActiveCheckbox,\n    menusWithUsers: MenusWithUsers,\n    menuData: MenuData,\n    telegramParams: TelegramParams,\n): Promise<void> {\n    const adapter = telegramParams.adapter;\n    for (const menu of listOfMenus) {\n        const startSide = startSides[menu];\n\n        if (userActiveCheckbox[menu] && isStartside(startSide)) {\n            adapter.log.debug(`Startside: ${startSide}`);\n            const group = menusWithUsers[menu];\n            if (group) {\n                for (const userToSend of group) {\n                    const { nav, text, parse_mode } = menuData[menu][startSide];\n\n                    const user = isUserActive(telegramParams, userToSend);\n                    if (!user) {\n                        continue;\n                    }\n                    backMenuFunc({ activePage: startSide, navigation: nav, userToSend: userToSend.name });\n\n                    adapter.log.debug(`User list: ${jsonString(telegramParams.userListWithChatID)}`);\n                    const params = { ...telegramParams };\n                    await sendToTelegram({\n                        instance: userToSend.instance,\n                        userToSend: userToSend.name,\n                        textToSend: text,\n                        keyboard: nav,\n                        telegramParams: params,\n                        parse_mode,\n                    });\n                }\n            }\n        } else {\n            if (!isStartside(startSide)) {\n                adapter.log.debug(`Menu \"${menu}\" is a Submenu.`);\n                continue;\n            }\n            adapter.log.debug(`Menu \"${menu}\" is inactive.`);\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,sBAA4B;AAC5B,sBAA6B;AAC7B,oBAA2B;AAC3B,sBAA+B;AAE/B,SAAS,aAAa,gBAAgC,YAAsD;AACxG,SAAO,eAAe,mBAAmB;AAAA,IACrC,UAAQ,KAAK,WAAW,WAAW,UAAU,KAAK,aAAa,WAAW;AAAA,EAC9E;AACJ;AAEA,eAAsB,qBAClB,aACA,YACA,oBACA,gBACA,UACA,gBACa;AACb,QAAM,UAAU,eAAe;AAC/B,aAAW,QAAQ,aAAa;AAC5B,UAAM,YAAY,WAAW,IAAI;AAEjC,QAAI,mBAAmB,IAAI,SAAK,6BAAY,SAAS,GAAG;AACpD,cAAQ,IAAI,MAAM,cAAc,SAAS,EAAE;AAC3C,YAAM,QAAQ,eAAe,IAAI;AACjC,UAAI,OAAO;AACP,mBAAW,cAAc,OAAO;AAC5B,gBAAM,EAAE,KAAK,MAAM,WAAW,IAAI,SAAS,IAAI,EAAE,SAAS;AAE1D,gBAAM,OAAO,aAAa,gBAAgB,UAAU;AACpD,cAAI,CAAC,MAAM;AACP;AAAA,UACJ;AACA,4CAAa,EAAE,YAAY,WAAW,YAAY,KAAK,YAAY,WAAW,KAAK,CAAC;AAEpF,kBAAQ,IAAI,MAAM,kBAAc,0BAAW,eAAe,kBAAkB,CAAC,EAAE;AAC/E,gBAAM,SAAS,EAAE,GAAG,eAAe;AACnC,oBAAM,gCAAe;AAAA,YACjB,UAAU,WAAW;AAAA,YACrB,YAAY,WAAW;AAAA,YACvB,YAAY;AAAA,YACZ,UAAU;AAAA,YACV,gBAAgB;AAAA,YAChB;AAAA,UACJ,CAAC;AAAA,QACL;AAAA,MACJ;AAAA,IACJ,OAAO;AACH,UAAI,KAAC,6BAAY,SAAS,GAAG;AACzB,gBAAQ,IAAI,MAAM,SAAS,IAAI,iBAAiB;AAChD;AAAA,MACJ;AACA,cAAQ,IAAI,MAAM,SAAS,IAAI,gBAAgB;AAAA,IACnD;AAAA,EACJ;AACJ;",
  "names": []
}
