{
  "version": 3,
  "sources": ["../../src/app/telegram.ts"],
  "sourcesContent": ["import { errorLogger } from './logging';\nimport { checkStatusInfo } from '../lib/utilities';\nimport { adapter } from '../main';\nimport type { Keyboard, Location, Telegram, UserListWithChatId } from '../types/types';\nimport { getChatID } from '../lib/utils';\nimport { jsonString, validateNewLine } from '../lib/string';\nimport { getParseMode } from '../lib/appUtils';\nimport { defaultTelegramInstance } from '../config/config';\n\nasync function sendToTelegram({\n    userToSend = '',\n    textToSend,\n    keyboard,\n    instanceTelegram = defaultTelegramInstance,\n    resize_keyboard = true,\n    one_time_keyboard = true,\n    userListWithChatID,\n    parse_mode = false,\n}: Telegram): Promise<void> {\n    try {\n        const chatId = getChatID(userListWithChatID, userToSend);\n        const parse_modeType = getParseMode(parse_mode);\n\n        adapter.log.debug(`Send to: ${userToSend} => ${textToSend}`);\n        adapter.log.debug(`Instance: ${instanceTelegram}`);\n        adapter.log.debug(`UserListWithChatID\t: ${jsonString(userListWithChatID)}`);\n        adapter.log.debug(`Parse_mode\t: ${parse_mode}`);\n        adapter.log.debug(`ChatId\t: ${chatId}`);\n        adapter.log.debug(`ParseModeType: ${parse_modeType}`);\n\n        const validatedTextToSend = validateNewLine(textToSend ?? '');\n        if (!keyboard) {\n            adapter.sendTo(\n                instanceTelegram,\n                'send',\n                {\n                    text: validatedTextToSend,\n                    chatId,\n                    parse_mode: parse_modeType,\n                },\n                (res: any) => telegramLogger(res),\n            );\n            return;\n        }\n\n        adapter.sendTo(\n            instanceTelegram,\n            'send',\n            {\n                chatId,\n                parse_mode: parse_modeType,\n                text: await checkStatusInfo(validatedTextToSend),\n                reply_markup: {\n                    keyboard,\n                    resize_keyboard,\n                    one_time_keyboard,\n                },\n            },\n            (res: any) => telegramLogger(res),\n        );\n    } catch (e: any) {\n        errorLogger('Error sendToTelegram:', e, adapter);\n    }\n}\n\nfunction sendToTelegramSubmenu(\n    user: string,\n    textToSend: string,\n    keyboard: Keyboard,\n    instance = defaultTelegramInstance,\n    userListWithChatID: UserListWithChatId[],\n    parse_mode?: boolean,\n): void {\n    adapter.sendTo(\n        instance,\n        'send',\n        {\n            chatId: getChatID(userListWithChatID, user),\n            parse_mode: getParseMode(parse_mode),\n            text: validateNewLine(textToSend),\n            reply_markup: keyboard,\n        },\n        (res: any) => telegramLogger(res),\n    );\n}\n\nconst sendLocationToTelegram = async (\n    user: string,\n    data: Location[],\n    instance: string,\n    userListWithChatID: UserListWithChatId[],\n): Promise<void> => {\n    try {\n        const chatId = getChatID(userListWithChatID, user);\n\n        for (const { longitude: longitudeID, latitude: latitudeID } of data) {\n            if (!(latitudeID || longitudeID)) {\n                continue;\n            }\n\n            const latitude = await adapter.getForeignStateAsync(latitudeID);\n            const longitude = await adapter.getForeignStateAsync(longitudeID);\n            if (!latitude || !longitude) {\n                continue;\n            }\n            adapter.sendTo(\n                instance,\n                {\n                    chatId: chatId,\n                    latitude: latitude.val,\n                    longitude: longitude.val,\n                    disable_notification: true,\n                },\n                (res: any) => telegramLogger(res),\n            );\n        }\n    } catch (e: any) {\n        errorLogger('Error sendLocationToTelegram:', e, adapter);\n    }\n};\n\nfunction telegramLogger(res: any): void {\n    adapter.log.debug(`Sent Value to ${jsonString(res)} users!`);\n}\n\nexport { sendToTelegram, sendToTelegramSubmenu, sendLocationToTelegram };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA4B;AAC5B,uBAAgC;AAChC,kBAAwB;AAExB,mBAA0B;AAC1B,oBAA4C;AAC5C,sBAA6B;AAC7B,oBAAwC;AAExC,eAAe,eAAe;AAAA,EAC1B,aAAa;AAAA,EACb;AAAA,EACA;AAAA,EACA,mBAAmB;AAAA,EACnB,kBAAkB;AAAA,EAClB,oBAAoB;AAAA,EACpB;AAAA,EACA,aAAa;AACjB,GAA4B;AACxB,MAAI;AACA,UAAM,aAAS,wBAAU,oBAAoB,UAAU;AACvD,UAAM,qBAAiB,8BAAa,UAAU;AAE9C,wBAAQ,IAAI,MAAM,YAAY,UAAU,OAAO,UAAU,EAAE;AAC3D,wBAAQ,IAAI,MAAM,aAAa,gBAAgB,EAAE;AACjD,wBAAQ,IAAI,MAAM,4BAAwB,0BAAW,kBAAkB,CAAC,EAAE;AAC1E,wBAAQ,IAAI,MAAM,gBAAgB,UAAU,EAAE;AAC9C,wBAAQ,IAAI,MAAM,YAAY,MAAM,EAAE;AACtC,wBAAQ,IAAI,MAAM,kBAAkB,cAAc,EAAE;AAEpD,UAAM,0BAAsB,+BAAgB,kCAAc,EAAE;AAC5D,QAAI,CAAC,UAAU;AACX,0BAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN;AAAA,UACA,YAAY;AAAA,QAChB;AAAA,QACA,CAAC,QAAa,eAAe,GAAG;AAAA,MACpC;AACA;AAAA,IACJ;AAEA,wBAAQ;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,QACI;AAAA,QACA,YAAY;AAAA,QACZ,MAAM,UAAM,kCAAgB,mBAAmB;AAAA,QAC/C,cAAc;AAAA,UACV;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,CAAC,QAAa,eAAe,GAAG;AAAA,IACpC;AAAA,EACJ,SAAS,GAAQ;AACb,oCAAY,yBAAyB,GAAG,mBAAO;AAAA,EACnD;AACJ;AAEA,SAAS,sBACL,MACA,YACA,UACA,WAAW,uCACX,oBACA,YACI;AACJ,sBAAQ;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,MACI,YAAQ,wBAAU,oBAAoB,IAAI;AAAA,MAC1C,gBAAY,8BAAa,UAAU;AAAA,MACnC,UAAM,+BAAgB,UAAU;AAAA,MAChC,cAAc;AAAA,IAClB;AAAA,IACA,CAAC,QAAa,eAAe,GAAG;AAAA,EACpC;AACJ;AAEA,MAAM,yBAAyB,OAC3B,MACA,MACA,UACA,uBACgB;AAChB,MAAI;AACA,UAAM,aAAS,wBAAU,oBAAoB,IAAI;AAEjD,eAAW,EAAE,WAAW,aAAa,UAAU,WAAW,KAAK,MAAM;AACjE,UAAI,EAAE,cAAc,cAAc;AAC9B;AAAA,MACJ;AAEA,YAAM,WAAW,MAAM,oBAAQ,qBAAqB,UAAU;AAC9D,YAAM,YAAY,MAAM,oBAAQ,qBAAqB,WAAW;AAChE,UAAI,CAAC,YAAY,CAAC,WAAW;AACzB;AAAA,MACJ;AACA,0BAAQ;AAAA,QACJ;AAAA,QACA;AAAA,UACI;AAAA,UACA,UAAU,SAAS;AAAA,UACnB,WAAW,UAAU;AAAA,UACrB,sBAAsB;AAAA,QAC1B;AAAA,QACA,CAAC,QAAa,eAAe,GAAG;AAAA,MACpC;AAAA,IACJ;AAAA,EACJ,SAAS,GAAQ;AACb,oCAAY,iCAAiC,GAAG,mBAAO;AAAA,EAC3D;AACJ;AAEA,SAAS,eAAe,KAAgB;AACpC,sBAAQ,IAAI,MAAM,qBAAiB,0BAAW,GAAG,CAAC,SAAS;AAC/D;",
  "names": []
}
