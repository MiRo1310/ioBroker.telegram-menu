{
  "version": 3,
  "sources": ["../../src/app/shoppingList.ts"],
  "sourcesContent": ["import { deleteMessageIds } from './messageIds.js';\nimport { createKeyboardFromJson } from './jsonTable.js';\nimport { sendToTelegramSubmenu, sendToTelegram } from './telegram.js';\nimport { _subscribeAndUnSubscribeForeignStatesAsync } from './subscribeStates.js';\nimport { debug, errorLogger } from './logging.js';\nimport TelegramMenu from '../main.js';\nimport type { UserListWithChatId } from '../types/types.js';\n\ninterface ObjectData {\n    [key: string]: {\n        idList: string;\n    };\n}\nconst objData: ObjectData = {};\n\nlet isSubscribed = false;\n\nasync function shoppingListSubscribeStateAndDeleteItem(\n    val: string | null,\n    instanceTelegram: string,\n    userListWithChatID: UserListWithChatId[],\n    resize_keyboard: boolean,\n    one_time_keyboard: boolean,\n): Promise<void> {\n    const _this = TelegramMenu.getInstance();\n    try {\n        let array, user, idList, instance, idItem, res;\n        if (val != null) {\n            array = val.split(':');\n            user = array[0].replace('[', '').replace(']sList', '');\n            idList = array[1];\n            instance = array[2];\n            idItem = array[3];\n            res = await _this.getForeignObjectAsync(`alexa2.${instance}.Lists.SHOPPING_LIST.items.${idItem}`);\n\n            if (res) {\n                objData[user] = { idList: idList };\n                debug([{ text: 'alexa-shoppinglist.', val: idList }]);\n                if (!isSubscribed) {\n                    await _subscribeAndUnSubscribeForeignStatesAsync({ id: `alexa-shoppinglist.${idList}` });\n                    isSubscribed = true;\n                }\n                await _this.setForeignStateAsync(\n                    `alexa2.${instance}.Lists.SHOPPING_LIST.items.${idItem}.#delete`,\n                    true,\n                    false,\n                );\n                return;\n            }\n            await sendToTelegram({\n                user: user,\n                textToSend: 'Cannot delete the Item',\n                keyboard: undefined,\n                instance: instanceTelegram,\n                resize_keyboard: resize_keyboard,\n                one_time_keyboard: one_time_keyboard,\n                userListWithChatID: userListWithChatID,\n                parse_mode: 'true',\n            });\n            debug([{ text: 'Cannot delete the Item' }]);\n            return;\n        }\n    } catch (e: any) {\n        errorLogger([\n            { text: 'Error shoppingList:', val: e.message },\n            { text: 'Stack:', val: e.stack },\n        ]);\n    }\n}\n\nasync function deleteMessageAndSendNewShoppingList(\n    instanceTelegram: string,\n    userListWithChatID: UserListWithChatId[],\n    userToSend: string,\n): Promise<void> {\n    const _this = TelegramMenu.getInstance();\n    try {\n        const user = userToSend;\n        const idList = objData[user].idList;\n        await _subscribeAndUnSubscribeForeignStatesAsync({ id: `alexa-shoppinglist.${idList}` });\n        await deleteMessageIds(user, userListWithChatID, instanceTelegram, 'last');\n\n        const result = await _this.getForeignStateAsync(`alexa-shoppinglist.${idList}`);\n        if (result && result.val) {\n            debug([{ text: 'Result from Shoppinglist:', val: result }]);\n            const newId = `alexa-shoppinglist.${idList}`;\n            const resultJson = createKeyboardFromJson(result.val as string, null, newId, user);\n            if (resultJson && resultJson.text && resultJson.keyboard) {\n                sendToTelegramSubmenu(\n                    user,\n                    resultJson.text,\n                    resultJson.keyboard,\n                    instanceTelegram,\n                    userListWithChatID,\n                    'true',\n                );\n            }\n        }\n    } catch (e: any) {\n        errorLogger([\n            { text: 'Error deleteMessageAndSendNewShoppingList:', val: e.message },\n            { text: 'Stack:', val: e.stack },\n        ]);\n    }\n}\n\nexport { shoppingListSubscribeStateAndDeleteItem, deleteMessageAndSendNewShoppingList };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAiC;AACjC,uBAAuC;AACvC,sBAAsD;AACtD,6BAA2D;AAC3D,qBAAmC;AACnC,kBAAyB;AAQzB,MAAM,UAAsB,CAAC;AAE7B,IAAI,eAAe;AAEnB,eAAe,wCACX,KACA,kBACA,oBACA,iBACA,mBACa;AACb,QAAM,QAAQ,YAAAA,QAAa,YAAY;AACvC,MAAI;AACA,QAAI,OAAO,MAAM,QAAQ,UAAU,QAAQ;AAC3C,QAAI,OAAO,MAAM;AACb,cAAQ,IAAI,MAAM,GAAG;AACrB,aAAO,MAAM,CAAC,EAAE,QAAQ,KAAK,EAAE,EAAE,QAAQ,UAAU,EAAE;AACrD,eAAS,MAAM,CAAC;AAChB,iBAAW,MAAM,CAAC;AAClB,eAAS,MAAM,CAAC;AAChB,YAAM,MAAM,MAAM,sBAAsB,UAAU,QAAQ,8BAA8B,MAAM,EAAE;AAEhG,UAAI,KAAK;AACL,gBAAQ,IAAI,IAAI,EAAE,OAAe;AACjC,kCAAM,CAAC,EAAE,MAAM,uBAAuB,KAAK,OAAO,CAAC,CAAC;AACpD,YAAI,CAAC,cAAc;AACf,oBAAM,mEAA2C,EAAE,IAAI,sBAAsB,MAAM,GAAG,CAAC;AACvF,yBAAe;AAAA,QACnB;AACA,cAAM,MAAM;AAAA,UACR,UAAU,QAAQ,8BAA8B,MAAM;AAAA,UACtD;AAAA,UACA;AAAA,QACJ;AACA;AAAA,MACJ;AACA,gBAAM,gCAAe;AAAA,QACjB;AAAA,QACA,YAAY;AAAA,QACZ,UAAU;AAAA,QACV,UAAU;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,QACA,YAAY;AAAA,MAChB,CAAC;AACD,gCAAM,CAAC,EAAE,MAAM,yBAAyB,CAAC,CAAC;AAC1C;AAAA,IACJ;AAAA,EACJ,SAAS,GAAQ;AACb,oCAAY;AAAA,MACR,EAAE,MAAM,uBAAuB,KAAK,EAAE,QAAQ;AAAA,MAC9C,EAAE,MAAM,UAAU,KAAK,EAAE,MAAM;AAAA,IACnC,CAAC;AAAA,EACL;AACJ;AAEA,eAAe,oCACX,kBACA,oBACA,YACa;AACb,QAAM,QAAQ,YAAAA,QAAa,YAAY;AACvC,MAAI;AACA,UAAM,OAAO;AACb,UAAM,SAAS,QAAQ,IAAI,EAAE;AAC7B,cAAM,mEAA2C,EAAE,IAAI,sBAAsB,MAAM,GAAG,CAAC;AACvF,cAAM,oCAAiB,MAAM,oBAAoB,kBAAkB,MAAM;AAEzE,UAAM,SAAS,MAAM,MAAM,qBAAqB,sBAAsB,MAAM,EAAE;AAC9E,QAAI,UAAU,OAAO,KAAK;AACtB,gCAAM,CAAC,EAAE,MAAM,6BAA6B,KAAK,OAAO,CAAC,CAAC;AAC1D,YAAM,QAAQ,sBAAsB,MAAM;AAC1C,YAAM,iBAAa,yCAAuB,OAAO,KAAe,MAAM,OAAO,IAAI;AACjF,UAAI,cAAc,WAAW,QAAQ,WAAW,UAAU;AACtD;AAAA,UACI;AAAA,UACA,WAAW;AAAA,UACX,WAAW;AAAA,UACX;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ,SAAS,GAAQ;AACb,oCAAY;AAAA,MACR,EAAE,MAAM,8CAA8C,KAAK,EAAE,QAAQ;AAAA,MACrE,EAAE,MAAM,UAAU,KAAK,EAAE,MAAM;AAAA,IACnC,CAAC;AAAA,EACL;AACJ;",
  "names": ["TelegramMenu"]
}
