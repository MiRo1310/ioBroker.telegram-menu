{
  "version": 3,
  "sources": ["../../src/app/shoppingList.ts"],
  "sourcesContent": ["import { deleteMessageIds } from './messageIds';\nimport { createKeyboardFromJson } from './jsonTable';\nimport { sendToTelegram, sendToTelegramSubmenu } from './telegram';\nimport { _subscribeForeignStates } from './subscribeStates';\nimport { errorLogger } from './logging';\nimport type { TelegramParams } from '../types/types';\nimport { jsonString } from '../lib/string';\nimport { setstateIobroker } from './setstate';\nimport { toJson } from '../lib/json';\nimport { isDefined } from '../lib/utils';\n\ninterface ObjectData {\n    [key: string]: {\n        idList: string;\n    };\n}\nconst objData: ObjectData = {};\n\nlet isSubscribed = false;\n\nexport async function shoppingListSubscribeStateAndDeleteItem(\n    telegramInstance: string,\n    val: string | null,\n    telegramParams: TelegramParams,\n): Promise<void> {\n    const adapter = telegramParams.adapter;\n    try {\n        let array, user, idList, instance, idItem, res;\n        if (isDefined(val)) {\n            array = val.split(':');\n            user = array[0].replace('[', '').replace(']sList', '');\n            idList = array[1];\n            instance = array[2];\n            idItem = array[3];\n            res = await adapter.getForeignObjectAsync(`alexa2.${instance}.Lists.SHOPPING_LIST.items.${idItem}`);\n\n            if (res) {\n                objData[user] = { idList: idList };\n                adapter.log.debug(`Alexa-shoppinglist : ${idList}`);\n                if (!isSubscribed) {\n                    await _subscribeForeignStates(adapter, `alexa-shoppinglist.${idList}`);\n                    isSubscribed = true;\n                }\n                await setstateIobroker({\n                    adapter,\n                    id: `alexa2.${instance}.Lists.SHOPPING_LIST.items.${idItem}.#delete`,\n                    value: true,\n                    ack: false,\n                });\n                return;\n            }\n            await sendToTelegram({\n                instance: telegramInstance,\n                userToSend: user,\n                textToSend: 'Cannot delete the Item',\n                telegramParams,\n                parse_mode: true,\n            });\n            adapter.log.debug('Cannot delete the Item');\n        }\n    } catch (e: any) {\n        errorLogger('Error shoppingList:', e, adapter);\n    }\n}\n\nexport async function deleteMessageAndSendNewShoppingList(\n    instance: string,\n    telegramParams: TelegramParams,\n    userToSend: string,\n): Promise<void> {\n    const adapter = telegramParams.adapter;\n    try {\n        const user = userToSend;\n        const idList = objData[user].idList;\n        await _subscribeForeignStates(adapter, `alexa-shoppinglist.${idList}`);\n        await deleteMessageIds(instance, user, telegramParams, 'last');\n\n        const result = await adapter.getForeignStateAsync(`alexa-shoppinglist.${idList}`);\n        if (result?.val) {\n            adapter.log.debug(`Result from Shoppinglist : ${jsonString(result)}`);\n            const newId = `alexa-shoppinglist.${idList}`;\n            const resultJson = createKeyboardFromJson(adapter, toJson(result.val), null, newId, user);\n            if (resultJson?.text && resultJson?.keyboard) {\n                sendToTelegramSubmenu(instance, user, resultJson.text, resultJson.keyboard, telegramParams, true);\n            }\n        }\n    } catch (e: any) {\n        errorLogger('Error deleteMessageAndSendNewShoppingList', e, adapter);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAiC;AACjC,uBAAuC;AACvC,sBAAsD;AACtD,6BAAwC;AACxC,qBAA4B;AAE5B,oBAA2B;AAC3B,sBAAiC;AACjC,kBAAuB;AACvB,mBAA0B;AAO1B,MAAM,UAAsB,CAAC;AAE7B,IAAI,eAAe;AAEnB,eAAsB,wCAClB,kBACA,KACA,gBACa;AACb,QAAM,UAAU,eAAe;AAC/B,MAAI;AACA,QAAI,OAAO,MAAM,QAAQ,UAAU,QAAQ;AAC3C,YAAI,wBAAU,GAAG,GAAG;AAChB,cAAQ,IAAI,MAAM,GAAG;AACrB,aAAO,MAAM,CAAC,EAAE,QAAQ,KAAK,EAAE,EAAE,QAAQ,UAAU,EAAE;AACrD,eAAS,MAAM,CAAC;AAChB,iBAAW,MAAM,CAAC;AAClB,eAAS,MAAM,CAAC;AAChB,YAAM,MAAM,QAAQ,sBAAsB,UAAU,QAAQ,8BAA8B,MAAM,EAAE;AAElG,UAAI,KAAK;AACL,gBAAQ,IAAI,IAAI,EAAE,OAAe;AACjC,gBAAQ,IAAI,MAAM,wBAAwB,MAAM,EAAE;AAClD,YAAI,CAAC,cAAc;AACf,oBAAM,gDAAwB,SAAS,sBAAsB,MAAM,EAAE;AACrE,yBAAe;AAAA,QACnB;AACA,kBAAM,kCAAiB;AAAA,UACnB;AAAA,UACA,IAAI,UAAU,QAAQ,8BAA8B,MAAM;AAAA,UAC1D,OAAO;AAAA,UACP,KAAK;AAAA,QACT,CAAC;AACD;AAAA,MACJ;AACA,gBAAM,gCAAe;AAAA,QACjB,UAAU;AAAA,QACV,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ;AAAA,QACA,YAAY;AAAA,MAChB,CAAC;AACD,cAAQ,IAAI,MAAM,wBAAwB;AAAA,IAC9C;AAAA,EACJ,SAAS,GAAQ;AACb,oCAAY,uBAAuB,GAAG,OAAO;AAAA,EACjD;AACJ;AAEA,eAAsB,oCAClB,UACA,gBACA,YACa;AACb,QAAM,UAAU,eAAe;AAC/B,MAAI;AACA,UAAM,OAAO;AACb,UAAM,SAAS,QAAQ,IAAI,EAAE;AAC7B,cAAM,gDAAwB,SAAS,sBAAsB,MAAM,EAAE;AACrE,cAAM,oCAAiB,UAAU,MAAM,gBAAgB,MAAM;AAE7D,UAAM,SAAS,MAAM,QAAQ,qBAAqB,sBAAsB,MAAM,EAAE;AAChF,QAAI,iCAAQ,KAAK;AACb,cAAQ,IAAI,MAAM,kCAA8B,0BAAW,MAAM,CAAC,EAAE;AACpE,YAAM,QAAQ,sBAAsB,MAAM;AAC1C,YAAM,iBAAa,yCAAuB,aAAS,oBAAO,OAAO,GAAG,GAAG,MAAM,OAAO,IAAI;AACxF,WAAI,yCAAY,UAAQ,yCAAY,WAAU;AAC1C,mDAAsB,UAAU,MAAM,WAAW,MAAM,WAAW,UAAU,gBAAgB,IAAI;AAAA,MACpG;AAAA,IACJ;AAAA,EACJ,SAAS,GAAQ;AACb,oCAAY,6CAA6C,GAAG,OAAO;AAAA,EACvE;AACJ;",
  "names": []
}
