{
  "version": 3,
  "sources": ["../../src/app/httpRequest.ts"],
  "sourcesContent": ["import axios from 'axios';\nimport { sendToTelegram } from './telegram';\nimport path from 'path';\nimport fs from 'fs';\nimport { errorLogger } from './logging';\nimport type { Adapter, Part, TelegramParams } from '../types/types';\nimport { validateDirectory } from '../lib/utils';\n\nasync function httpRequest(\n    adapter: Adapter,\n    instance: string,\n    parts: Part,\n    userToSend: string,\n    telegramParams: TelegramParams,\n    directoryPicture: string,\n): Promise<boolean | undefined> {\n    if (!parts.httpRequest) {\n        return;\n    }\n    for (const { url, password, user: username, filename } of parts.httpRequest) {\n        adapter.log.debug(`URL : ${url}`);\n\n        try {\n            //prettier-ignore\n\n            const response = await axios(\n                username && password\n                    ? {\n                          method: 'get',\n                          url,\n                          responseType: 'arraybuffer',\n                          auth: {\n                              username,\n                              password,\n                          },\n                      }\n                    : {\n                          method: 'get',\n                          url,\n                          responseType: 'arraybuffer',\n                      },\n            );\n\n            if (!validateDirectory(adapter, directoryPicture)) {\n                return;\n            }\n            const imagePath = path.join(directoryPicture, filename);\n\n            fs.writeFileSync(imagePath, Buffer.from(response.data), 'binary');\n            adapter.log.debug(`Pic saved : ${imagePath}`);\n\n            await sendToTelegram({\n                instance,\n                userToSend,\n                textToSend: imagePath,\n                telegramParams,\n            });\n        } catch (e: any) {\n            errorLogger('Error http request:', e, adapter);\n        }\n    }\n    return true;\n}\n\nexport { httpRequest };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,sBAA+B;AAC/B,kBAAiB;AACjB,gBAAe;AACf,qBAA4B;AAE5B,mBAAkC;AAElC,eAAe,YACX,SACA,UACA,OACA,YACA,gBACA,kBAC4B;AAC5B,MAAI,CAAC,MAAM,aAAa;AACpB;AAAA,EACJ;AACA,aAAW,EAAE,KAAK,UAAU,MAAM,UAAU,SAAS,KAAK,MAAM,aAAa;AACzE,YAAQ,IAAI,MAAM,SAAS,GAAG,EAAE;AAEhC,QAAI;AAGA,YAAM,WAAW,UAAM,aAAAA;AAAA,QACnB,YAAY,WACN;AAAA,UACI,QAAQ;AAAA,UACR;AAAA,UACA,cAAc;AAAA,UACd,MAAM;AAAA,YACF;AAAA,YACA;AAAA,UACJ;AAAA,QACJ,IACA;AAAA,UACI,QAAQ;AAAA,UACR;AAAA,UACA,cAAc;AAAA,QAClB;AAAA,MACV;AAEA,UAAI,KAAC,gCAAkB,SAAS,gBAAgB,GAAG;AAC/C;AAAA,MACJ;AACA,YAAM,YAAY,YAAAC,QAAK,KAAK,kBAAkB,QAAQ;AAEtD,gBAAAC,QAAG,cAAc,WAAW,OAAO,KAAK,SAAS,IAAI,GAAG,QAAQ;AAChE,cAAQ,IAAI,MAAM,eAAe,SAAS,EAAE;AAE5C,gBAAM,gCAAe;AAAA,QACjB;AAAA,QACA;AAAA,QACA,YAAY;AAAA,QACZ;AAAA,MACJ,CAAC;AAAA,IACL,SAAS,GAAQ;AACb,sCAAY,uBAAuB,GAAG,OAAO;AAAA,IACjD;AAAA,EACJ;AACA,SAAO;AACX;",
  "names": ["axios", "path", "fs"]
}
