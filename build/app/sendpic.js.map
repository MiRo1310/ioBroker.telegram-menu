{
  "version": 3,
  "sources": ["../../src/app/sendpic.ts"],
  "sourcesContent": ["import { sendToTelegram } from './telegram';\nimport { validateDirectory } from '../lib/utils';\nimport { errorLogger } from './logging';\nimport { adapter } from '../main';\nimport type { Part, TelegramParams, Timeouts } from '../types/types';\nimport { replaceAll } from '../lib/string';\nimport { isStartside } from '../lib/appUtils';\nimport { loadWithCurl } from './exec';\n\nexport function sendPic(\n    instance: string,\n    part: Part,\n    userToSend: string,\n    telegramParams: TelegramParams,\n    token: string,\n    directoryPicture: string,\n    timeouts: Timeouts[],\n    timeoutKey: string,\n): Timeouts[] {\n    try {\n        part.sendPic?.forEach(element => {\n            const { id, delay, fileName } = element;\n            let path = '';\n            if (isStartside(id)) {\n                const url = replaceAll(id, '&amp;', '&');\n                path = `${directoryPicture}${fileName}`;\n\n                if (!validateDirectory(adapter, directoryPicture)) {\n                    return;\n                }\n\n                if (delay <= 0) {\n                    loadWithCurl(\n                        adapter,\n                        token,\n                        path,\n                        url,\n                        async () =>\n                            await sendToTelegram({\n                                instance,\n                                userToSend,\n                                textToSend: path,\n                                telegramParams,\n                            }),\n                    );\n                    return;\n                }\n                loadWithCurl(adapter, token, path, url);\n                adapter.log.debug(`Send Picture : { delay : ${delay} , path : ${path} }`);\n                timeoutKey += 1;\n            } else {\n                return;\n            }\n\n            const timeout = adapter.setTimeout(\n                async () => {\n                    await sendToTelegram({\n                        instance,\n                        userToSend,\n                        textToSend: path,\n                        telegramParams,\n                    });\n                    let timeoutToClear: Timeouts[] = [];\n                    timeoutToClear = timeouts.filter(item => item.key == timeoutKey);\n                    timeoutToClear.forEach(item => {\n                        adapter.clearTimeout(item.timeout);\n                    });\n\n                    timeouts = timeouts.filter(item => item.key !== timeoutKey);\n\n                    adapter.log.debug('Picture has been send');\n                },\n                parseInt(String(element.delay)),\n            );\n\n            if (timeout) {\n                timeouts.push({ key: timeoutKey, timeout });\n            }\n        });\n        return timeouts;\n    } catch (e: any) {\n        errorLogger('Error send pic:', e, adapter);\n    }\n    return timeouts;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA+B;AAC/B,mBAAkC;AAClC,qBAA4B;AAC5B,kBAAwB;AAExB,oBAA2B;AAC3B,sBAA4B;AAC5B,kBAA6B;AAEtB,SAAS,QACZ,UACA,MACA,YACA,gBACA,OACA,kBACA,UACA,YACU;AAlBd;AAmBI,MAAI;AACA,eAAK,YAAL,mBAAc,QAAQ,aAAW;AAC7B,YAAM,EAAE,IAAI,OAAO,SAAS,IAAI;AAChC,UAAI,OAAO;AACX,cAAI,6BAAY,EAAE,GAAG;AACjB,cAAM,UAAM,0BAAW,IAAI,SAAS,GAAG;AACvC,eAAO,GAAG,gBAAgB,GAAG,QAAQ;AAErC,YAAI,KAAC,gCAAkB,qBAAS,gBAAgB,GAAG;AAC/C;AAAA,QACJ;AAEA,YAAI,SAAS,GAAG;AACZ;AAAA,YACI;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA,YACI,UAAM,gCAAe;AAAA,cACjB;AAAA,cACA;AAAA,cACA,YAAY;AAAA,cACZ;AAAA,YACJ,CAAC;AAAA,UACT;AACA;AAAA,QACJ;AACA,sCAAa,qBAAS,OAAO,MAAM,GAAG;AACtC,4BAAQ,IAAI,MAAM,4BAA4B,KAAK,aAAa,IAAI,IAAI;AACxE,sBAAc;AAAA,MAClB,OAAO;AACH;AAAA,MACJ;AAEA,YAAM,UAAU,oBAAQ;AAAA,QACpB,YAAY;AACR,oBAAM,gCAAe;AAAA,YACjB;AAAA,YACA;AAAA,YACA,YAAY;AAAA,YACZ;AAAA,UACJ,CAAC;AACD,cAAI,iBAA6B,CAAC;AAClC,2BAAiB,SAAS,OAAO,UAAQ,KAAK,OAAO,UAAU;AAC/D,yBAAe,QAAQ,UAAQ;AAC3B,gCAAQ,aAAa,KAAK,OAAO;AAAA,UACrC,CAAC;AAED,qBAAW,SAAS,OAAO,UAAQ,KAAK,QAAQ,UAAU;AAE1D,8BAAQ,IAAI,MAAM,uBAAuB;AAAA,QAC7C;AAAA,QACA,SAAS,OAAO,QAAQ,KAAK,CAAC;AAAA,MAClC;AAEA,UAAI,SAAS;AACT,iBAAS,KAAK,EAAE,KAAK,YAAY,QAAQ,CAAC;AAAA,MAC9C;AAAA,IACJ;AACA,WAAO;AAAA,EACX,SAAS,GAAQ;AACb,oCAAY,mBAAmB,GAAG,mBAAO;AAAA,EAC7C;AACA,SAAO;AACX;",
  "names": []
}
