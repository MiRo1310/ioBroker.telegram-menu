{
  "version": 3,
  "sources": ["../../src/app/sendpic.ts"],
  "sourcesContent": ["import { sendToTelegram } from './telegram';\nimport { checkDirectoryIsOk, replaceAll } from './global';\nimport { exec } from 'child_process';\nimport { debug, errorLogger } from './logging';\nimport TelegramMenu from '../main';\nimport type { Part, UserListWithChatId } from '../types/types';\n\nfunction sendPic(\n    part: Part,\n    userToSend: string,\n    instanceTelegram: string,\n    resize_keyboard: boolean,\n    one_time_keyboard: boolean,\n    userListWithChatID: UserListWithChatId[],\n    token: string,\n    directoryPicture: string,\n    timeouts: Timeouts[],\n    timeoutKey: string,\n): Timeouts[] {\n    try {\n        part.sendPic?.forEach(element => {\n            const _this = TelegramMenu.getInstance();\n            let path = '';\n            if (element.id != '-') {\n                const url = element.id;\n                const newUrl = replaceAll(url, '&amp;', '&');\n\n                exec(\n                    `curl -H \"Autorisation: Bearer ${token.trim()}\" \"${newUrl}\" > ${directoryPicture}${element.fileName}`,\n                    (error: any, stdout: any, stderr: any) => {\n                        if (stdout) {\n                            debug([{ text: 'Stdout:', val: stdout }]);\n                        }\n                        if (stderr) {\n                            debug([{ text: 'Stderr:', val: stderr }]);\n                        }\n                        if (error) {\n                            error([{ text: 'Error:', val: error }]);\n                            return;\n                        }\n                    },\n                );\n\n                debug([{ text: 'Delay Time:', val: element.delay }]);\n                timeoutKey += 1;\n\n                if (!checkDirectoryIsOk(directoryPicture)) {\n                    return;\n                }\n\n                path = `${directoryPicture}${element.fileName}`;\n                debug([{ text: 'Path : ', val: path }]);\n            } else {\n                return;\n            }\n\n            const timeout = _this.setTimeout(\n                async () => {\n                    await sendToTelegram({\n                        user: userToSend,\n                        textToSend: path,\n                        instance: instanceTelegram,\n                        resize_keyboard: resize_keyboard,\n                        one_time_keyboard: one_time_keyboard,\n                        userListWithChatID: userListWithChatID,\n                        parse_mode: 'false',\n                    });\n                    let timeoutToClear: Timeouts[] = [];\n                    timeoutToClear = timeouts.filter(item => item.key == timeoutKey);\n                    timeoutToClear.forEach(item => {\n                        _this.clearTimeout(item.timeout);\n                    });\n\n                    timeouts = timeouts.filter(item => item.key !== timeoutKey);\n                    debug([{ text: 'Picture sent' }]);\n                },\n                parseInt(String(element.delay)),\n            );\n\n            if (timeout) {\n                timeouts.push({ key: timeoutKey, timeout: timeout });\n            }\n        });\n        return timeouts;\n    } catch (e: any) {\n        errorLogger([\n            { text: 'Error:', val: e.message },\n            { text: 'Stack:', val: e.stack },\n        ]);\n    }\n    return timeouts;\n}\n\nexport { sendPic };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA+B;AAC/B,oBAA+C;AAC/C,2BAAqB;AACrB,qBAAmC;AACnC,kBAAyB;AAGzB,SAAS,QACL,MACA,YACA,kBACA,iBACA,mBACA,oBACA,OACA,kBACA,UACA,YACU;AAlBd;AAmBI,MAAI;AACA,eAAK,YAAL,mBAAc,QAAQ,aAAW;AAC7B,YAAM,QAAQ,YAAAA,QAAa,YAAY;AACvC,UAAI,OAAO;AACX,UAAI,QAAQ,MAAM,KAAK;AACnB,cAAM,MAAM,QAAQ;AACpB,cAAM,aAAS,0BAAW,KAAK,SAAS,GAAG;AAE3C;AAAA,UACI,iCAAiC,MAAM,KAAK,CAAC,MAAM,MAAM,OAAO,gBAAgB,GAAG,QAAQ,QAAQ;AAAA,UACnG,CAAC,OAAY,QAAa,WAAgB;AACtC,gBAAI,QAAQ;AACR,wCAAM,CAAC,EAAE,MAAM,WAAW,KAAK,OAAO,CAAC,CAAC;AAAA,YAC5C;AACA,gBAAI,QAAQ;AACR,wCAAM,CAAC,EAAE,MAAM,WAAW,KAAK,OAAO,CAAC,CAAC;AAAA,YAC5C;AACA,gBAAI,OAAO;AACP,oBAAM,CAAC,EAAE,MAAM,UAAU,KAAK,MAAM,CAAC,CAAC;AACtC;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAEA,kCAAM,CAAC,EAAE,MAAM,eAAe,KAAK,QAAQ,MAAM,CAAC,CAAC;AACnD,sBAAc;AAEd,YAAI,KAAC,kCAAmB,gBAAgB,GAAG;AACvC;AAAA,QACJ;AAEA,eAAO,GAAG,gBAAgB,GAAG,QAAQ,QAAQ;AAC7C,kCAAM,CAAC,EAAE,MAAM,WAAW,KAAK,KAAK,CAAC,CAAC;AAAA,MAC1C,OAAO;AACH;AAAA,MACJ;AAEA,YAAM,UAAU,MAAM;AAAA,QAClB,YAAY;AACR,oBAAM,gCAAe;AAAA,YACjB,MAAM;AAAA,YACN,YAAY;AAAA,YACZ,UAAU;AAAA,YACV;AAAA,YACA;AAAA,YACA;AAAA,YACA,YAAY;AAAA,UAChB,CAAC;AACD,cAAI,iBAA6B,CAAC;AAClC,2BAAiB,SAAS,OAAO,UAAQ,KAAK,OAAO,UAAU;AAC/D,yBAAe,QAAQ,UAAQ;AAC3B,kBAAM,aAAa,KAAK,OAAO;AAAA,UACnC,CAAC;AAED,qBAAW,SAAS,OAAO,UAAQ,KAAK,QAAQ,UAAU;AAC1D,oCAAM,CAAC,EAAE,MAAM,eAAe,CAAC,CAAC;AAAA,QACpC;AAAA,QACA,SAAS,OAAO,QAAQ,KAAK,CAAC;AAAA,MAClC;AAEA,UAAI,SAAS;AACT,iBAAS,KAAK,EAAE,KAAK,YAAY,QAAiB,CAAC;AAAA,MACvD;AAAA,IACJ;AACA,WAAO;AAAA,EACX,SAAS,GAAQ;AACb,oCAAY;AAAA,MACR,EAAE,MAAM,UAAU,KAAK,EAAE,QAAQ;AAAA,MACjC,EAAE,MAAM,UAAU,KAAK,EAAE,MAAM;AAAA,IACnC,CAAC;AAAA,EACL;AACA,SAAO;AACX;",
  "names": ["TelegramMenu"]
}
