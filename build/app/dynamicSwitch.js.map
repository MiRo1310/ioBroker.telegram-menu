{
  "version": 3,
  "sources": ["../../src/app/dynamicSwitch.ts"],
  "sourcesContent": ["import { errorLogger } from './logging';\nimport type { KeyboardItems, Keyboard } from '../types/types';\nimport { checkStatusInfo } from '../lib/utilities';\n\nasync function dynamicSwitch(\n    calledValue: string,\n    device: string,\n    text: string,\n): Promise<{ text?: string; keyboard: Keyboard; device: string } | undefined> {\n    try {\n        const changedCalledValue = await checkStatusInfo(calledValue);\n        const splittedArray: string[] | undefined = changedCalledValue?.replace(/\"/g, '').split(':');\n\n        if (!splittedArray) {\n            return;\n        }\n        device = splittedArray[2];\n        const arrayOfValues = splittedArray[1]\n            .replace('dynSwitch', '')\n            .replace(/\\]/g, '')\n            .replace(/\\[/g, '')\n            .split(',');\n\n        const lengthOfRow = parseInt(splittedArray[3]) || 6;\n\n        const array: KeyboardItems[][] = [];\n        const keyboard: Keyboard = { inline_keyboard: array };\n        if (arrayOfValues) {\n            let keyboardItemsArray: KeyboardItems[] = [];\n            arrayOfValues.forEach((value, index: number) => {\n                if (value.includes('|')) {\n                    const splittedValue = value.split('|');\n                    keyboardItemsArray.push({\n                        text: splittedValue[0],\n                        callback_data: `menu:dynS:${device}:${splittedValue[1]}`,\n                    });\n                } else {\n                    keyboardItemsArray.push({\n                        text: value,\n                        callback_data: `menu:dynS:${device}:${value}`,\n                    });\n                }\n                if (\n                    ((index + 1) % lengthOfRow == 0 && index != 0 && arrayOfValues.length > 0) ||\n                    index + 1 == arrayOfValues.length\n                ) {\n                    keyboard.inline_keyboard.push(keyboardItemsArray);\n                    keyboardItemsArray = [];\n                }\n            });\n            return { text, keyboard, device };\n        }\n    } catch (e: any) {\n        errorLogger('Error parsing dynSwitch:', e);\n    }\n}\nexport { dynamicSwitch };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA4B;AAE5B,uBAAgC;AAEhC,eAAe,cACX,aACA,QACA,MAC0E;AAC1E,MAAI;AACA,UAAM,qBAAqB,UAAM,kCAAgB,WAAW;AAC5D,UAAM,gBAAsC,yDAAoB,QAAQ,MAAM,IAAI,MAAM;AAExF,QAAI,CAAC,eAAe;AAChB;AAAA,IACJ;AACA,aAAS,cAAc,CAAC;AACxB,UAAM,gBAAgB,cAAc,CAAC,EAChC,QAAQ,aAAa,EAAE,EACvB,QAAQ,OAAO,EAAE,EACjB,QAAQ,OAAO,EAAE,EACjB,MAAM,GAAG;AAEd,UAAM,cAAc,SAAS,cAAc,CAAC,CAAC,KAAK;AAElD,UAAM,QAA2B,CAAC;AAClC,UAAM,WAAqB,EAAE,iBAAiB,MAAM;AACpD,QAAI,eAAe;AACf,UAAI,qBAAsC,CAAC;AAC3C,oBAAc,QAAQ,CAAC,OAAO,UAAkB;AAC5C,YAAI,MAAM,SAAS,GAAG,GAAG;AACrB,gBAAM,gBAAgB,MAAM,MAAM,GAAG;AACrC,6BAAmB,KAAK;AAAA,YACpB,MAAM,cAAc,CAAC;AAAA,YACrB,eAAe,aAAa,MAAM,IAAI,cAAc,CAAC,CAAC;AAAA,UAC1D,CAAC;AAAA,QACL,OAAO;AACH,6BAAmB,KAAK;AAAA,YACpB,MAAM;AAAA,YACN,eAAe,aAAa,MAAM,IAAI,KAAK;AAAA,UAC/C,CAAC;AAAA,QACL;AACA,aACM,QAAQ,KAAK,eAAe,KAAK,SAAS,KAAK,cAAc,SAAS,KACxE,QAAQ,KAAK,cAAc,QAC7B;AACE,mBAAS,gBAAgB,KAAK,kBAAkB;AAChD,+BAAqB,CAAC;AAAA,QAC1B;AAAA,MACJ,CAAC;AACD,aAAO,EAAE,MAAM,UAAU,OAAO;AAAA,IACpC;AAAA,EACJ,SAAS,GAAQ;AACb,oCAAY,4BAA4B,CAAC;AAAA,EAC7C;AACJ;",
  "names": []
}
