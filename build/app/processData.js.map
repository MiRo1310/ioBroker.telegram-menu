{
  "version": 3,
  "sources": ["../../src/app/processData.ts"],
  "sourcesContent": ["import { adapter } from '../main';\nimport { sendLocationToTelegram, sendToTelegram } from './telegram';\nimport { sendNav } from './sendNav';\nimport { callSubMenu } from './subMenu';\nimport { backMenuFunc, switchBack } from './backMenu';\nimport { handleSetState, setstateIobroker } from './setstate';\nimport { getState } from './getstate';\nimport { sendPic } from './sendpic';\nimport { getDynamicValue, removeUserFromDynamicValue } from './dynamicValue';\nimport { adjustValueType } from './action';\nimport { getChart } from './echarts';\nimport { httpRequest } from './httpRequest';\nimport { errorLogger } from './logging';\nimport type { CheckEveryMenuForDataType, Part, ProcessDataType, Timeouts } from '../types/types';\nimport { jsonString } from '../lib/string';\nimport { isSubmenuOrMenu } from './validateMenus';\n\nlet timeouts: Timeouts[] = [];\n\nexport async function checkEveryMenuForData(obj: CheckEveryMenuForDataType): Promise<boolean> {\n    const {\n        menuData,\n        calledValue,\n        userToSend,\n        telegramParams,\n        menus,\n        isUserActiveCheckbox,\n        token,\n        directoryPicture,\n        timeoutKey,\n    } = obj;\n\n    for (const menu of menus) {\n        const groupData = menuData[menu];\n\n        adapter.log.debug(`Menu: ${menu}`);\n        adapter.log.debug(`Nav: ${jsonString(menuData[menu])}`);\n\n        if (\n            await processData({\n                menuData,\n                calledValue,\n                userToSend,\n                groupWithUser: menu,\n                telegramParams,\n                allMenusWithData: menuData,\n                menus,\n                isUserActiveCheckbox,\n                token,\n                directoryPicture,\n                timeoutKey,\n                groupData,\n            })\n        ) {\n            adapter.log.debug('CalledText found');\n            return true;\n        }\n    }\n    return false;\n}\n\nasync function processData(obj: ProcessDataType): Promise<boolean | undefined> {\n    const {\n        menuData,\n        calledValue,\n        userToSend,\n        groupWithUser,\n        telegramParams,\n        allMenusWithData,\n        menus,\n        isUserActiveCheckbox,\n        token,\n        directoryPicture,\n        timeoutKey,\n        groupData,\n    } = obj;\n    try {\n        let part: Part | undefined = {} as Part;\n\n        if (getDynamicValue(userToSend)) {\n            const res = getDynamicValue(userToSend);\n            const valueToSet = res?.valueType ? adjustValueType(calledValue, res.valueType) : calledValue;\n\n            valueToSet && res?.id\n                ? await setstateIobroker({ id: res.id, value: valueToSet, ack: res?.ack })\n                : await sendToTelegram({\n                      userToSend,\n                      textToSend: `You insert a wrong Type of value, please insert type: ${res?.valueType}`,\n                      telegramParams,\n                  });\n\n            removeUserFromDynamicValue(userToSend);\n            const result = await switchBack(userToSend, allMenusWithData, menus, true);\n\n            if (result) {\n                const { textToSend, keyboard, parse_mode } = result;\n                await sendToTelegram({\n                    userToSend,\n                    textToSend,\n                    keyboard: keyboard,\n                    telegramParams,\n                    parse_mode,\n                });\n                return true;\n            }\n            await sendNav(part, userToSend, telegramParams);\n\n            return true;\n        }\n\n        const call = calledValue.includes('menu:') ? calledValue.split(':')[2] : calledValue;\n        part = groupData[call];\n\n        if (!calledValue.toString().includes('menu:') && isUserActiveCheckbox[groupWithUser]) {\n            const nav = part?.nav;\n            if (nav) {\n                adapter.log.debug(`Menu to Send: ${jsonString(nav)}`);\n\n                backMenuFunc({ activePage: call, navigation: nav, userToSend });\n\n                if (jsonString(nav).includes('menu:')) {\n                    adapter.log.debug(`Submenu: ${jsonString(nav)}`);\n\n                    const result = await callSubMenu({\n                        jsonStringNav: jsonString(nav),\n                        userToSend,\n                        telegramParams,\n                        part,\n                        allMenusWithData,\n                        menus,\n                    });\n                    if (result?.newNav) {\n                        await checkEveryMenuForData({\n                            menuData,\n                            calledValue: result.newNav,\n                            userToSend,\n                            telegramParams,\n                            menus,\n                            isUserActiveCheckbox,\n                            token,\n                            directoryPicture,\n                            timeoutKey,\n                        });\n                    }\n                    return true;\n                }\n                await sendNav(part, userToSend, telegramParams);\n                return true;\n            }\n\n            if (part?.switch) {\n                await handleSetState(part, userToSend, 0, false, telegramParams);\n                return true;\n            }\n\n            if (part?.getData) {\n                getState(part, userToSend, telegramParams);\n                return true;\n            }\n\n            if (part?.sendPic) {\n                timeouts = sendPic(part, userToSend, telegramParams, token, directoryPicture, timeouts, timeoutKey);\n                return true;\n            }\n\n            if (part?.location) {\n                adapter.log.debug('Send location');\n                await sendLocationToTelegram(userToSend, part.location, telegramParams);\n                return true;\n            }\n\n            if (part?.echarts) {\n                adapter.log.debug('Send echarts');\n                getChart(part.echarts, directoryPicture, userToSend, telegramParams);\n                return true;\n            }\n\n            if (part?.httpRequest) {\n                adapter.log.debug('Send http request');\n                const result = await httpRequest(part, userToSend, telegramParams, directoryPicture);\n                return !!result;\n            }\n        }\n        if (isSubmenuOrMenu(calledValue) && menuData[groupWithUser][call]) {\n            adapter.log.debug('Call Submenu');\n            await callSubMenu({\n                jsonStringNav: calledValue,\n                userToSend: userToSend,\n                telegramParams: telegramParams,\n                part: part,\n                allMenusWithData: allMenusWithData,\n                menus: menus,\n            });\n            return true;\n        }\n        return false;\n    } catch (e: any) {\n        errorLogger('Error processData:', e, adapter);\n    }\n}\n\nexport function getTimeouts(): Timeouts[] {\n    return timeouts;\n}\n"],
  "mappings": "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",
  "names": []
}
