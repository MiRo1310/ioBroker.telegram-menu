{
  "version": 3,
  "sources": ["../../src/app/subscribeStates.ts"],
  "sourcesContent": ["import { adapter } from '../main';\nimport type { SetStateIds } from '../types/types';\nimport { jsonString } from '../lib/string';\nimport { removeDuplicates } from '../lib/object';\n\nasync function _subscribeAndUnSubscribeForeignStatesAsync(obj: { array?: SetStateIds[]; id?: string }): Promise<void> {\n    if (obj.id) {\n        adapter.log.debug(`Subscribe to ${obj.id}`);\n    } else if (obj.array) {\n        for (const element of obj.array) {\n            await adapter.subscribeForeignStatesAsync(element.id);\n        }\n    }\n}\n\nasync function _subscribeForeignStatesAsync(array: string[]): Promise<void> {\n    array = removeDuplicates(array);\n    for (const element of array) {\n        await adapter.subscribeForeignStatesAsync(element);\n    }\n    adapter.log.debug(`Subscribe all States of: ${jsonString(array)}`);\n}\n\nexport { _subscribeAndUnSubscribeForeignStatesAsync, _subscribeForeignStatesAsync };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAwB;AAExB,oBAA2B;AAC3B,oBAAiC;AAEjC,eAAe,2CAA2C,KAA4D;AAClH,MAAI,IAAI,IAAI;AACR,wBAAQ,IAAI,MAAM,gBAAgB,IAAI,EAAE,EAAE;AAAA,EAC9C,WAAW,IAAI,OAAO;AAClB,eAAW,WAAW,IAAI,OAAO;AAC7B,YAAM,oBAAQ,4BAA4B,QAAQ,EAAE;AAAA,IACxD;AAAA,EACJ;AACJ;AAEA,eAAe,6BAA6B,OAAgC;AACxE,cAAQ,gCAAiB,KAAK;AAC9B,aAAW,WAAW,OAAO;AACzB,UAAM,oBAAQ,4BAA4B,OAAO;AAAA,EACrD;AACA,sBAAQ,IAAI,MAAM,gCAA4B,0BAAW,KAAK,CAAC,EAAE;AACrE;",
  "names": []
}
